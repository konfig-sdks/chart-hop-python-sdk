# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from chart_hop_python_sdk.pydantic.due_date import DueDate

class UpdateTaskConfig(BaseModel):
    # description for all tasks associated with the config that should be used in notifications
    description: typing.Optional[str] = Field(None, alias='description')

    # type of task generated by the task config
    type: typing.Optional[Literal["FORM_SUBMIT", "CHANGE_APPROVE", "TIMEOFF_APPROVE", "SCENARIO_CHANGES_APPROVE", "SCENARIO_CHANGES_CREATE", "ORG_IMPORT", "COMP_REVIEW_APPROVAL_SUBMIT", "SCENARIO_APPROVAL_SUBMIT", "APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER", "ACTION"]] = Field(None, alias='type')

    due_date: typing.Optional[DueDate] = Field(None, alias='dueDate')

    # sets pastDueAction on the task when it's generated
    past_due_action: typing.Optional[Literal["NONE", "SET_EXPIRED"]] = Field(None, alias='pastDueAction')

    # sets isSkippable on the task
    is_skippable: typing.Optional[bool] = Field(None, alias='isSkippable')

    # human-readable label that should be used for all tasks associated with the config as the task name
    label: typing.Optional[str] = Field(None, alias='label')

    # deleted by user id
    delete_id: typing.Optional[str] = Field(None, alias='deleteId')

    # deleted timestamp
    delete_at: typing.Optional[str] = Field(None, alias='deleteAt')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
