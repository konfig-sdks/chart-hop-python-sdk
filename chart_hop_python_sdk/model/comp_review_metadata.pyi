# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ineligibleEmployees",
            "eligibleEmployees",
            "eligibleEmployeesFilter",
            "ineligibleEmployeesFilter",
            "approvers",
            "collaborators",
            "compReviewId",
            "reviewers",
            "orgId",
        }
        
        class properties:
            compReviewId = schemas.StrSchema
            orgId = schemas.StrSchema
            eligibleEmployees = schemas.Int32Schema
            eligibleEmployeesFilter = schemas.StrSchema
            ineligibleEmployees = schemas.Int32Schema
            ineligibleEmployeesFilter = schemas.StrSchema
            approvers = schemas.Int32Schema
            reviewers = schemas.Int32Schema
            collaborators = schemas.Int32Schema
            __annotations__ = {
                "compReviewId": compReviewId,
                "orgId": orgId,
                "eligibleEmployees": eligibleEmployees,
                "eligibleEmployeesFilter": eligibleEmployeesFilter,
                "ineligibleEmployees": ineligibleEmployees,
                "ineligibleEmployeesFilter": ineligibleEmployeesFilter,
                "approvers": approvers,
                "reviewers": reviewers,
                "collaborators": collaborators,
            }
    
    ineligibleEmployees: MetaOapg.properties.ineligibleEmployees
    eligibleEmployees: MetaOapg.properties.eligibleEmployees
    eligibleEmployeesFilter: MetaOapg.properties.eligibleEmployeesFilter
    ineligibleEmployeesFilter: MetaOapg.properties.ineligibleEmployeesFilter
    approvers: MetaOapg.properties.approvers
    collaborators: MetaOapg.properties.collaborators
    compReviewId: MetaOapg.properties.compReviewId
    reviewers: MetaOapg.properties.reviewers
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligibleEmployees"]) -> MetaOapg.properties.eligibleEmployees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligibleEmployeesFilter"]) -> MetaOapg.properties.eligibleEmployeesFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ineligibleEmployees"]) -> MetaOapg.properties.ineligibleEmployees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ineligibleEmployeesFilter"]) -> MetaOapg.properties.ineligibleEmployeesFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvers"]) -> MetaOapg.properties.approvers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewers"]) -> MetaOapg.properties.reviewers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaborators"]) -> MetaOapg.properties.collaborators: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["compReviewId", "orgId", "eligibleEmployees", "eligibleEmployeesFilter", "ineligibleEmployees", "ineligibleEmployeesFilter", "approvers", "reviewers", "collaborators", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligibleEmployees"]) -> MetaOapg.properties.eligibleEmployees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligibleEmployeesFilter"]) -> MetaOapg.properties.eligibleEmployeesFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ineligibleEmployees"]) -> MetaOapg.properties.ineligibleEmployees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ineligibleEmployeesFilter"]) -> MetaOapg.properties.ineligibleEmployeesFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvers"]) -> MetaOapg.properties.approvers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewers"]) -> MetaOapg.properties.reviewers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaborators"]) -> MetaOapg.properties.collaborators: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["compReviewId", "orgId", "eligibleEmployees", "eligibleEmployeesFilter", "ineligibleEmployees", "ineligibleEmployeesFilter", "approvers", "reviewers", "collaborators", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ineligibleEmployees: typing.Union[MetaOapg.properties.ineligibleEmployees, decimal.Decimal, int, ],
        eligibleEmployees: typing.Union[MetaOapg.properties.eligibleEmployees, decimal.Decimal, int, ],
        eligibleEmployeesFilter: typing.Union[MetaOapg.properties.eligibleEmployeesFilter, str, ],
        ineligibleEmployeesFilter: typing.Union[MetaOapg.properties.ineligibleEmployeesFilter, str, ],
        approvers: typing.Union[MetaOapg.properties.approvers, decimal.Decimal, int, ],
        collaborators: typing.Union[MetaOapg.properties.collaborators, decimal.Decimal, int, ],
        compReviewId: typing.Union[MetaOapg.properties.compReviewId, str, ],
        reviewers: typing.Union[MetaOapg.properties.reviewers, decimal.Decimal, int, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewMetadata':
        return super().__new__(
            cls,
            *args,
            ineligibleEmployees=ineligibleEmployees,
            eligibleEmployees=eligibleEmployees,
            eligibleEmployeesFilter=eligibleEmployeesFilter,
            ineligibleEmployeesFilter=ineligibleEmployeesFilter,
            approvers=approvers,
            collaborators=collaborators,
            compReviewId=compReviewId,
            reviewers=reviewers,
            orgId=orgId,
            _configuration=_configuration,
            **kwargs,
        )
