# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CostImpact(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "months",
            "annual",
            "firstMonth",
        }
        
        class properties:
            annual = schemas.NumberSchema
            firstMonth = schemas.StrSchema
        
            @staticmethod
            def months() -> typing.Type['CostImpactMonths']:
                return CostImpactMonths
            __annotations__ = {
                "annual": annual,
                "firstMonth": firstMonth,
                "months": months,
            }
    
    months: 'CostImpactMonths'
    annual: MetaOapg.properties.annual
    firstMonth: MetaOapg.properties.firstMonth
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual"]) -> MetaOapg.properties.annual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstMonth"]) -> MetaOapg.properties.firstMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["months"]) -> 'CostImpactMonths': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annual", "firstMonth", "months", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual"]) -> MetaOapg.properties.annual: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstMonth"]) -> MetaOapg.properties.firstMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["months"]) -> 'CostImpactMonths': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annual", "firstMonth", "months", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        months: 'CostImpactMonths',
        annual: typing.Union[MetaOapg.properties.annual, decimal.Decimal, int, float, ],
        firstMonth: typing.Union[MetaOapg.properties.firstMonth, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostImpact':
        return super().__new__(
            cls,
            *args,
            months=months,
            annual=annual,
            firstMonth=firstMonth,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.cost_impact_months import CostImpactMonths
