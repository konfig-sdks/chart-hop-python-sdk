# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Address(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
        }
        
        class properties:
            
            
            class country(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{2}$',
                    }]
            street1 = schemas.StrSchema
            street2 = schemas.StrSchema
            street3 = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            postal = schemas.StrSchema
        
            @staticmethod
            def geo() -> typing.Type['Geopoint']:
                return Geopoint
        
            @staticmethod
            def approxGeo() -> typing.Type['Geopoint']:
                return Geopoint
            __annotations__ = {
                "country": country,
                "street1": street1,
                "street2": street2,
                "street3": street3,
                "city": city,
                "state": state,
                "postal": postal,
                "geo": geo,
                "approxGeo": approxGeo,
            }
    
    country: MetaOapg.properties.country
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street1"]) -> MetaOapg.properties.street1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street2"]) -> MetaOapg.properties.street2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street3"]) -> MetaOapg.properties.street3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal"]) -> MetaOapg.properties.postal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo"]) -> 'Geopoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approxGeo"]) -> 'Geopoint': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country", "street1", "street2", "street3", "city", "state", "postal", "geo", "approxGeo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street1"]) -> typing.Union[MetaOapg.properties.street1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street2"]) -> typing.Union[MetaOapg.properties.street2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street3"]) -> typing.Union[MetaOapg.properties.street3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal"]) -> typing.Union[MetaOapg.properties.postal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo"]) -> typing.Union['Geopoint', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approxGeo"]) -> typing.Union['Geopoint', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country", "street1", "street2", "street3", "city", "state", "postal", "geo", "approxGeo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        street1: typing.Union[MetaOapg.properties.street1, str, schemas.Unset] = schemas.unset,
        street2: typing.Union[MetaOapg.properties.street2, str, schemas.Unset] = schemas.unset,
        street3: typing.Union[MetaOapg.properties.street3, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        postal: typing.Union[MetaOapg.properties.postal, str, schemas.Unset] = schemas.unset,
        geo: typing.Union['Geopoint', schemas.Unset] = schemas.unset,
        approxGeo: typing.Union['Geopoint', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Address':
        return super().__new__(
            cls,
            *args,
            country=country,
            street1=street1,
            street2=street2,
            street3=street3,
            city=city,
            state=state,
            postal=postal,
            geo=geo,
            approxGeo=approxGeo,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.geopoint import Geopoint
