# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GroupGraphResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "jobs",
            "underCount",
            "groupPositions",
            "group",
        }
        
        class properties:
        
            @staticmethod
            def group() -> typing.Type['GroupGraphResultGroup']:
                return GroupGraphResultGroup
        
            @staticmethod
            def jobs() -> typing.Type['GroupGraphResultJobs']:
                return GroupGraphResultJobs
        
            @staticmethod
            def groupPositions() -> typing.Type['GroupGraphResultGroupPositions']:
                return GroupGraphResultGroupPositions
        
            @staticmethod
            def underCount() -> typing.Type['GroupGraphCount']:
                return GroupGraphCount
        
            @staticmethod
            def parent() -> typing.Type['GroupParent']:
                return GroupParent
            __annotations__ = {
                "group": group,
                "jobs": jobs,
                "groupPositions": groupPositions,
                "underCount": underCount,
                "parent": parent,
            }
    
    jobs: 'GroupGraphResultJobs'
    underCount: 'GroupGraphCount'
    groupPositions: 'GroupGraphResultGroupPositions'
    group: 'GroupGraphResultGroup'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'GroupGraphResultGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> 'GroupGraphResultJobs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupPositions"]) -> 'GroupGraphResultGroupPositions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["underCount"]) -> 'GroupGraphCount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'GroupParent': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["group", "jobs", "groupPositions", "underCount", "parent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> 'GroupGraphResultGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> 'GroupGraphResultJobs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupPositions"]) -> 'GroupGraphResultGroupPositions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["underCount"]) -> 'GroupGraphCount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union['GroupParent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["group", "jobs", "groupPositions", "underCount", "parent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobs: 'GroupGraphResultJobs',
        underCount: 'GroupGraphCount',
        groupPositions: 'GroupGraphResultGroupPositions',
        group: 'GroupGraphResultGroup',
        parent: typing.Union['GroupParent', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupGraphResult':
        return super().__new__(
            cls,
            *args,
            jobs=jobs,
            underCount=underCount,
            groupPositions=groupPositions,
            group=group,
            parent=parent,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.group_graph_count import GroupGraphCount
from chart_hop_python_sdk.model.group_graph_result_group import GroupGraphResultGroup
from chart_hop_python_sdk.model.group_graph_result_group_positions import GroupGraphResultGroupPositions
from chart_hop_python_sdk.model.group_graph_result_jobs import GroupGraphResultJobs
from chart_hop_python_sdk.model.group_parent import GroupParent
