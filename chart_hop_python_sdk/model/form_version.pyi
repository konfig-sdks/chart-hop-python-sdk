# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class FormVersion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "formId",
            "id",
            "orgId",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            formId = schemas.StrSchema
        
            @staticmethod
            def form() -> typing.Type['Form']:
                return Form
            
            
            class questions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Question']:
                        return Question
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Question'], typing.List['Question']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'questions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Question':
                    return super().__getitem__(i)
            createAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "formId": formId,
                "form": form,
                "questions": questions,
                "createAt": createAt,
            }
    
    formId: MetaOapg.properties.formId
    id: MetaOapg.properties.id
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form"]) -> 'Form': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "formId", "form", "questions", "createAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form"]) -> typing.Union['Form', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> typing.Union[MetaOapg.properties.questions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "formId", "form", "questions", "createAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formId: typing.Union[MetaOapg.properties.formId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        form: typing.Union['Form', schemas.Unset] = schemas.unset,
        questions: typing.Union[MetaOapg.properties.questions, list, tuple, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormVersion':
        return super().__new__(
            cls,
            *args,
            formId=formId,
            id=id,
            orgId=orgId,
            form=form,
            questions=questions,
            createAt=createAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.form import Form
from chart_hop_python_sdk.model.question import Question
