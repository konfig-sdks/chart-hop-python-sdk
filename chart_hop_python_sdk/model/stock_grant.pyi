# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class StockGrant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "shares",
            "price",
            "vestSchedule",
            "id",
            "stock",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            stock = schemas.StrSchema
            date = schemas.DateSchema
            shares = schemas.NumberSchema
            price = schemas.NumberSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ISO(cls):
                    return cls("ISO")
                
                @schemas.classproperty
                def NSO(cls):
                    return cls("NSO")
                
                @schemas.classproperty
                def RSU(cls):
                    return cls("RSU")
                
                @schemas.classproperty
                def SAR(cls):
                    return cls("SAR")
                
                @schemas.classproperty
                def PERFORMANCE_SHARES(cls):
                    return cls("PERFORMANCE_SHARES")
                
                @schemas.classproperty
                def PHANTOM_STOCK(cls):
                    return cls("PHANTOM_STOCK")
                
                @schemas.classproperty
                def RSA(cls):
                    return cls("RSA")
            vestSchedule = schemas.StrSchema
            description = schemas.StrSchema
            vestStartDate = schemas.DateSchema
            expireDate = schemas.DateSchema
            originalPrice = schemas.NumberSchema
            currentPrice = schemas.NumberSchema
            vestedShares = schemas.NumberSchema
            vestedSharesNextYear = schemas.NumberSchema
        
            @staticmethod
            def vestedSharesByDate() -> typing.Type['StockGrantVestedSharesByDate']:
                return StockGrantVestedSharesByDate
            vestEndDate = schemas.DateSchema
            cancelDate = schemas.DateSchema
            details = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "stock": stock,
                "date": date,
                "shares": shares,
                "price": price,
                "type": type,
                "vestSchedule": vestSchedule,
                "description": description,
                "vestStartDate": vestStartDate,
                "expireDate": expireDate,
                "originalPrice": originalPrice,
                "currentPrice": currentPrice,
                "vestedShares": vestedShares,
                "vestedSharesNextYear": vestedSharesNextYear,
                "vestedSharesByDate": vestedSharesByDate,
                "vestEndDate": vestEndDate,
                "cancelDate": cancelDate,
                "details": details,
            }
    
    date: MetaOapg.properties.date
    shares: MetaOapg.properties.shares
    price: MetaOapg.properties.price
    vestSchedule: MetaOapg.properties.vestSchedule
    id: MetaOapg.properties.id
    stock: MetaOapg.properties.stock
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stock"]) -> MetaOapg.properties.stock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestSchedule"]) -> MetaOapg.properties.vestSchedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestStartDate"]) -> MetaOapg.properties.vestStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireDate"]) -> MetaOapg.properties.expireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalPrice"]) -> MetaOapg.properties.originalPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPrice"]) -> MetaOapg.properties.currentPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestedShares"]) -> MetaOapg.properties.vestedShares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestedSharesNextYear"]) -> MetaOapg.properties.vestedSharesNextYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestedSharesByDate"]) -> 'StockGrantVestedSharesByDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestEndDate"]) -> MetaOapg.properties.vestEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelDate"]) -> MetaOapg.properties.cancelDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "stock", "date", "shares", "price", "type", "vestSchedule", "description", "vestStartDate", "expireDate", "originalPrice", "currentPrice", "vestedShares", "vestedSharesNextYear", "vestedSharesByDate", "vestEndDate", "cancelDate", "details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stock"]) -> MetaOapg.properties.stock: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestSchedule"]) -> MetaOapg.properties.vestSchedule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestStartDate"]) -> typing.Union[MetaOapg.properties.vestStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireDate"]) -> typing.Union[MetaOapg.properties.expireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalPrice"]) -> typing.Union[MetaOapg.properties.originalPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPrice"]) -> typing.Union[MetaOapg.properties.currentPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestedShares"]) -> typing.Union[MetaOapg.properties.vestedShares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestedSharesNextYear"]) -> typing.Union[MetaOapg.properties.vestedSharesNextYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestedSharesByDate"]) -> typing.Union['StockGrantVestedSharesByDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestEndDate"]) -> typing.Union[MetaOapg.properties.vestEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelDate"]) -> typing.Union[MetaOapg.properties.cancelDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "stock", "date", "shares", "price", "type", "vestSchedule", "description", "vestStartDate", "expireDate", "originalPrice", "currentPrice", "vestedShares", "vestedSharesNextYear", "vestedSharesByDate", "vestEndDate", "cancelDate", "details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        shares: typing.Union[MetaOapg.properties.shares, decimal.Decimal, int, float, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        vestSchedule: typing.Union[MetaOapg.properties.vestSchedule, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        stock: typing.Union[MetaOapg.properties.stock, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        vestStartDate: typing.Union[MetaOapg.properties.vestStartDate, str, date, schemas.Unset] = schemas.unset,
        expireDate: typing.Union[MetaOapg.properties.expireDate, str, date, schemas.Unset] = schemas.unset,
        originalPrice: typing.Union[MetaOapg.properties.originalPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentPrice: typing.Union[MetaOapg.properties.currentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vestedShares: typing.Union[MetaOapg.properties.vestedShares, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vestedSharesNextYear: typing.Union[MetaOapg.properties.vestedSharesNextYear, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vestedSharesByDate: typing.Union['StockGrantVestedSharesByDate', schemas.Unset] = schemas.unset,
        vestEndDate: typing.Union[MetaOapg.properties.vestEndDate, str, date, schemas.Unset] = schemas.unset,
        cancelDate: typing.Union[MetaOapg.properties.cancelDate, str, date, schemas.Unset] = schemas.unset,
        details: typing.Union[MetaOapg.properties.details, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StockGrant':
        return super().__new__(
            cls,
            *args,
            date=date,
            shares=shares,
            price=price,
            vestSchedule=vestSchedule,
            id=id,
            stock=stock,
            type=type,
            description=description,
            vestStartDate=vestStartDate,
            expireDate=expireDate,
            originalPrice=originalPrice,
            currentPrice=currentPrice,
            vestedShares=vestedShares,
            vestedSharesNextYear=vestedSharesNextYear,
            vestedSharesByDate=vestedSharesByDate,
            vestEndDate=vestEndDate,
            cancelDate=cancelDate,
            details=details,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.stock_grant_vested_shares_by_date import StockGrantVestedSharesByDate
