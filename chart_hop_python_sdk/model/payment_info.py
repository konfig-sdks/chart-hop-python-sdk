# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PaymentInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "paymentType",
        }
        
        class properties:
            
            
            class paymentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CREDIT_CARD": "CREDIT_CARD",
                        "INVOICE": "INVOICE",
                    }
                
                @schemas.classproperty
                def CREDIT_CARD(cls):
                    return cls("CREDIT_CARD")
                
                @schemas.classproperty
                def INVOICE(cls):
                    return cls("INVOICE")
            creditCardEndDigits = schemas.StrSchema
            brand = schemas.StrSchema
            __annotations__ = {
                "paymentType": paymentType,
                "creditCardEndDigits": creditCardEndDigits,
                "brand": brand,
            }
    
    paymentType: MetaOapg.properties.paymentType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditCardEndDigits"]) -> MetaOapg.properties.creditCardEndDigits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> MetaOapg.properties.brand: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentType", "creditCardEndDigits", "brand", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditCardEndDigits"]) -> typing.Union[MetaOapg.properties.creditCardEndDigits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union[MetaOapg.properties.brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentType", "creditCardEndDigits", "brand", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paymentType: typing.Union[MetaOapg.properties.paymentType, str, ],
        creditCardEndDigits: typing.Union[MetaOapg.properties.creditCardEndDigits, str, schemas.Unset] = schemas.unset,
        brand: typing.Union[MetaOapg.properties.brand, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentInfo':
        return super().__new__(
            cls,
            *args,
            paymentType=paymentType,
            creditCardEndDigits=creditCardEndDigits,
            brand=brand,
            _configuration=_configuration,
            **kwargs,
        )
