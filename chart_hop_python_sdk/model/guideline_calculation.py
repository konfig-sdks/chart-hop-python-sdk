# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GuidelineCalculation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "flagMode",
            "jobId",
            "appliedField",
            "isDeviated",
            "compReviewId",
            "deviation",
            "fields",
            "guidelineId",
            "guidelineLabel",
        }
        
        class properties:
            guidelineId = schemas.StrSchema
            jobId = schemas.StrSchema
            compReviewId = schemas.StrSchema
            guidelineLabel = schemas.StrSchema
            appliedField = schemas.StrSchema
            
            
            class flagMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DEVIATION_THRESHOLD": "DEVIATION_THRESHOLD",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def DEVIATION_THRESHOLD(cls):
                    return cls("DEVIATION_THRESHOLD")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
            isDeviated = schemas.BoolSchema
        
            @staticmethod
            def deviation() -> typing.Type['Deviation']:
                return Deviation
        
            @staticmethod
            def fields() -> typing.Type['GuidelineCalculationFields']:
                return GuidelineCalculationFields
            budgetPoolId = schemas.StrSchema
            min = schemas.DictSchema
            max = schemas.DictSchema
            target = schemas.DictSchema
            flagDeviationThreshold = schemas.NumberSchema
            __annotations__ = {
                "guidelineId": guidelineId,
                "jobId": jobId,
                "compReviewId": compReviewId,
                "guidelineLabel": guidelineLabel,
                "appliedField": appliedField,
                "flagMode": flagMode,
                "isDeviated": isDeviated,
                "deviation": deviation,
                "fields": fields,
                "budgetPoolId": budgetPoolId,
                "min": min,
                "max": max,
                "target": target,
                "flagDeviationThreshold": flagDeviationThreshold,
            }
    
    flagMode: MetaOapg.properties.flagMode
    jobId: MetaOapg.properties.jobId
    appliedField: MetaOapg.properties.appliedField
    isDeviated: MetaOapg.properties.isDeviated
    compReviewId: MetaOapg.properties.compReviewId
    deviation: 'Deviation'
    fields: 'GuidelineCalculationFields'
    guidelineId: MetaOapg.properties.guidelineId
    guidelineLabel: MetaOapg.properties.guidelineLabel
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guidelineId"]) -> MetaOapg.properties.guidelineId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guidelineLabel"]) -> MetaOapg.properties.guidelineLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedField"]) -> MetaOapg.properties.appliedField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flagMode"]) -> MetaOapg.properties.flagMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeviated"]) -> MetaOapg.properties.isDeviated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviation"]) -> 'Deviation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'GuidelineCalculationFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budgetPoolId"]) -> MetaOapg.properties.budgetPoolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flagDeviationThreshold"]) -> MetaOapg.properties.flagDeviationThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["guidelineId", "jobId", "compReviewId", "guidelineLabel", "appliedField", "flagMode", "isDeviated", "deviation", "fields", "budgetPoolId", "min", "max", "target", "flagDeviationThreshold", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guidelineId"]) -> MetaOapg.properties.guidelineId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guidelineLabel"]) -> MetaOapg.properties.guidelineLabel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedField"]) -> MetaOapg.properties.appliedField: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flagMode"]) -> MetaOapg.properties.flagMode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeviated"]) -> MetaOapg.properties.isDeviated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviation"]) -> 'Deviation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> 'GuidelineCalculationFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budgetPoolId"]) -> typing.Union[MetaOapg.properties.budgetPoolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> typing.Union[MetaOapg.properties.target, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flagDeviationThreshold"]) -> typing.Union[MetaOapg.properties.flagDeviationThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guidelineId", "jobId", "compReviewId", "guidelineLabel", "appliedField", "flagMode", "isDeviated", "deviation", "fields", "budgetPoolId", "min", "max", "target", "flagDeviationThreshold", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        flagMode: typing.Union[MetaOapg.properties.flagMode, str, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        appliedField: typing.Union[MetaOapg.properties.appliedField, str, ],
        isDeviated: typing.Union[MetaOapg.properties.isDeviated, bool, ],
        compReviewId: typing.Union[MetaOapg.properties.compReviewId, str, ],
        deviation: 'Deviation',
        fields: 'GuidelineCalculationFields',
        guidelineId: typing.Union[MetaOapg.properties.guidelineId, str, ],
        guidelineLabel: typing.Union[MetaOapg.properties.guidelineLabel, str, ],
        budgetPoolId: typing.Union[MetaOapg.properties.budgetPoolId, str, schemas.Unset] = schemas.unset,
        min: typing.Union[MetaOapg.properties.min, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        max: typing.Union[MetaOapg.properties.max, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        target: typing.Union[MetaOapg.properties.target, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        flagDeviationThreshold: typing.Union[MetaOapg.properties.flagDeviationThreshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GuidelineCalculation':
        return super().__new__(
            cls,
            *args,
            flagMode=flagMode,
            jobId=jobId,
            appliedField=appliedField,
            isDeviated=isDeviated,
            compReviewId=compReviewId,
            deviation=deviation,
            fields=fields,
            guidelineId=guidelineId,
            guidelineLabel=guidelineLabel,
            budgetPoolId=budgetPoolId,
            min=min,
            max=max,
            target=target,
            flagDeviationThreshold=flagDeviationThreshold,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.deviation import Deviation
from chart_hop_python_sdk.model.guideline_calculation_fields import GuidelineCalculationFields
