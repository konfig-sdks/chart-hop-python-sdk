# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Comp(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def baseComp() -> typing.Type['PayInterval']:
                return PayInterval
            
            
            class variableTargets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VariableComp']:
                        return VariableComp
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VariableComp'], typing.List['VariableComp']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variableTargets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VariableComp':
                    return super().__getitem__(i)
            grantShares = schemas.Int32Schema
            grantValue = schemas.Int32Schema
            
            
            class grantType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ISO": "ISO",
                        "NSO": "NSO",
                        "RSU": "RSU",
                        "SAR": "SAR",
                        "PERFORMANCE_SHARES": "PERFORMANCE_SHARES",
                        "PHANTOM_STOCK": "PHANTOM_STOCK",
                        "RSA": "RSA",
                    }
                
                @schemas.classproperty
                def ISO(cls):
                    return cls("ISO")
                
                @schemas.classproperty
                def NSO(cls):
                    return cls("NSO")
                
                @schemas.classproperty
                def RSU(cls):
                    return cls("RSU")
                
                @schemas.classproperty
                def SAR(cls):
                    return cls("SAR")
                
                @schemas.classproperty
                def PERFORMANCE_SHARES(cls):
                    return cls("PERFORMANCE_SHARES")
                
                @schemas.classproperty
                def PHANTOM_STOCK(cls):
                    return cls("PHANTOM_STOCK")
                
                @schemas.classproperty
                def RSA(cls):
                    return cls("RSA")
            __annotations__ = {
                "baseComp": baseComp,
                "variableTargets": variableTargets,
                "grantShares": grantShares,
                "grantValue": grantValue,
                "grantType": grantType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseComp"]) -> 'PayInterval': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variableTargets"]) -> MetaOapg.properties.variableTargets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantShares"]) -> MetaOapg.properties.grantShares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantValue"]) -> MetaOapg.properties.grantValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantType"]) -> MetaOapg.properties.grantType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["baseComp", "variableTargets", "grantShares", "grantValue", "grantType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseComp"]) -> typing.Union['PayInterval', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variableTargets"]) -> typing.Union[MetaOapg.properties.variableTargets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantShares"]) -> typing.Union[MetaOapg.properties.grantShares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantValue"]) -> typing.Union[MetaOapg.properties.grantValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantType"]) -> typing.Union[MetaOapg.properties.grantType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["baseComp", "variableTargets", "grantShares", "grantValue", "grantType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        baseComp: typing.Union['PayInterval', schemas.Unset] = schemas.unset,
        variableTargets: typing.Union[MetaOapg.properties.variableTargets, list, tuple, schemas.Unset] = schemas.unset,
        grantShares: typing.Union[MetaOapg.properties.grantShares, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        grantValue: typing.Union[MetaOapg.properties.grantValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        grantType: typing.Union[MetaOapg.properties.grantType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Comp':
        return super().__new__(
            cls,
            *args,
            baseComp=baseComp,
            variableTargets=variableTargets,
            grantShares=grantShares,
            grantValue=grantValue,
            grantType=grantType,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.pay_interval import PayInterval
from chart_hop_python_sdk.model.variable_comp import VariableComp
