# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Job(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "jobId",
            "groupIds",
            "fields",
            "title",
            "groupAssignments",
            "orgId",
        }
        
        class properties:
            title = schemas.StrSchema
            jobId = schemas.StrSchema
            orgId = schemas.StrSchema
        
            @staticmethod
            def groupIds() -> typing.Type['JobGroupIds']:
                return JobGroupIds
            
            
            class groupAssignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupAssignment']:
                        return GroupAssignment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupAssignment'], typing.List['GroupAssignment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groupAssignments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupAssignment':
                    return super().__getitem__(i)
        
            @staticmethod
            def fields() -> typing.Type['JobFields']:
                return JobFields
        
            @staticmethod
            def comp() -> typing.Type['Comp']:
                return Comp
            
            
            class sensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            
            
            class relationships(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['JobRelationship']:
                        return JobRelationship
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['JobRelationship'], typing.List['JobRelationship']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relationships':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'JobRelationship':
                    return super().__getitem__(i)
        
            @staticmethod
            def managerIds() -> typing.Type['JobManagerIds']:
                return JobManagerIds
            
            
            class placement(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NORMAL(cls):
                    return cls("NORMAL")
                
                @schemas.classproperty
                def ASSISTANT(cls):
                    return cls("ASSISTANT")
            
            
            class employment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FULL(cls):
                    return cls("FULL")
                
                @schemas.classproperty
                def PART(cls):
                    return cls("PART")
                
                @schemas.classproperty
                def TEMP(cls):
                    return cls("TEMP")
                
                @schemas.classproperty
                def CONTRACT(cls):
                    return cls("CONTRACT")
                
                @schemas.classproperty
                def INTERN(cls):
                    return cls("INTERN")
                
                @schemas.classproperty
                def EXPAT(cls):
                    return cls("EXPAT")
            startDate = schemas.DateSchema
            startDatePlanned = schemas.DateSchema
            personStartDate = schemas.DateSchema
            personEndDate = schemas.DateSchema
            personJobStartDate = schemas.DateSchema
            personJobEndDate = schemas.DateSchema
            personId = schemas.StrSchema
            
            
            class upcoming(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UpcomingChange']:
                        return UpcomingChange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UpcomingChange'], typing.List['UpcomingChange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'upcoming':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UpcomingChange':
                    return super().__getitem__(i)
            scenarioId = schemas.StrSchema
            backfillPersonId = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "jobId": jobId,
                "orgId": orgId,
                "groupIds": groupIds,
                "groupAssignments": groupAssignments,
                "fields": fields,
                "comp": comp,
                "sensitive": sensitive,
                "relationships": relationships,
                "managerIds": managerIds,
                "placement": placement,
                "employment": employment,
                "startDate": startDate,
                "startDatePlanned": startDatePlanned,
                "personStartDate": personStartDate,
                "personEndDate": personEndDate,
                "personJobStartDate": personJobStartDate,
                "personJobEndDate": personJobEndDate,
                "personId": personId,
                "upcoming": upcoming,
                "scenarioId": scenarioId,
                "backfillPersonId": backfillPersonId,
            }
    
    jobId: MetaOapg.properties.jobId
    groupIds: 'JobGroupIds'
    fields: 'JobFields'
    title: MetaOapg.properties.title
    groupAssignments: MetaOapg.properties.groupAssignments
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupIds"]) -> 'JobGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupAssignments"]) -> MetaOapg.properties.groupAssignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'JobFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comp"]) -> 'Comp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitive"]) -> MetaOapg.properties.sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationships"]) -> MetaOapg.properties.relationships: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managerIds"]) -> 'JobManagerIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placement"]) -> MetaOapg.properties.placement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> MetaOapg.properties.employment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDatePlanned"]) -> MetaOapg.properties.startDatePlanned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personStartDate"]) -> MetaOapg.properties.personStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personEndDate"]) -> MetaOapg.properties.personEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personJobStartDate"]) -> MetaOapg.properties.personJobStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personJobEndDate"]) -> MetaOapg.properties.personJobEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upcoming"]) -> MetaOapg.properties.upcoming: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backfillPersonId"]) -> MetaOapg.properties.backfillPersonId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "jobId", "orgId", "groupIds", "groupAssignments", "fields", "comp", "sensitive", "relationships", "managerIds", "placement", "employment", "startDate", "startDatePlanned", "personStartDate", "personEndDate", "personJobStartDate", "personJobEndDate", "personId", "upcoming", "scenarioId", "backfillPersonId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupIds"]) -> 'JobGroupIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupAssignments"]) -> MetaOapg.properties.groupAssignments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> 'JobFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comp"]) -> typing.Union['Comp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitive"]) -> typing.Union[MetaOapg.properties.sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationships"]) -> typing.Union[MetaOapg.properties.relationships, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managerIds"]) -> typing.Union['JobManagerIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placement"]) -> typing.Union[MetaOapg.properties.placement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> typing.Union[MetaOapg.properties.employment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDatePlanned"]) -> typing.Union[MetaOapg.properties.startDatePlanned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personStartDate"]) -> typing.Union[MetaOapg.properties.personStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personEndDate"]) -> typing.Union[MetaOapg.properties.personEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personJobStartDate"]) -> typing.Union[MetaOapg.properties.personJobStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personJobEndDate"]) -> typing.Union[MetaOapg.properties.personJobEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upcoming"]) -> typing.Union[MetaOapg.properties.upcoming, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backfillPersonId"]) -> typing.Union[MetaOapg.properties.backfillPersonId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "jobId", "orgId", "groupIds", "groupAssignments", "fields", "comp", "sensitive", "relationships", "managerIds", "placement", "employment", "startDate", "startDatePlanned", "personStartDate", "personEndDate", "personJobStartDate", "personJobEndDate", "personId", "upcoming", "scenarioId", "backfillPersonId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        groupIds: 'JobGroupIds',
        fields: 'JobFields',
        title: typing.Union[MetaOapg.properties.title, str, ],
        groupAssignments: typing.Union[MetaOapg.properties.groupAssignments, list, tuple, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        comp: typing.Union['Comp', schemas.Unset] = schemas.unset,
        sensitive: typing.Union[MetaOapg.properties.sensitive, str, schemas.Unset] = schemas.unset,
        relationships: typing.Union[MetaOapg.properties.relationships, list, tuple, schemas.Unset] = schemas.unset,
        managerIds: typing.Union['JobManagerIds', schemas.Unset] = schemas.unset,
        placement: typing.Union[MetaOapg.properties.placement, str, schemas.Unset] = schemas.unset,
        employment: typing.Union[MetaOapg.properties.employment, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        startDatePlanned: typing.Union[MetaOapg.properties.startDatePlanned, str, date, schemas.Unset] = schemas.unset,
        personStartDate: typing.Union[MetaOapg.properties.personStartDate, str, date, schemas.Unset] = schemas.unset,
        personEndDate: typing.Union[MetaOapg.properties.personEndDate, str, date, schemas.Unset] = schemas.unset,
        personJobStartDate: typing.Union[MetaOapg.properties.personJobStartDate, str, date, schemas.Unset] = schemas.unset,
        personJobEndDate: typing.Union[MetaOapg.properties.personJobEndDate, str, date, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        upcoming: typing.Union[MetaOapg.properties.upcoming, list, tuple, schemas.Unset] = schemas.unset,
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        backfillPersonId: typing.Union[MetaOapg.properties.backfillPersonId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Job':
        return super().__new__(
            cls,
            *args,
            jobId=jobId,
            groupIds=groupIds,
            fields=fields,
            title=title,
            groupAssignments=groupAssignments,
            orgId=orgId,
            comp=comp,
            sensitive=sensitive,
            relationships=relationships,
            managerIds=managerIds,
            placement=placement,
            employment=employment,
            startDate=startDate,
            startDatePlanned=startDatePlanned,
            personStartDate=personStartDate,
            personEndDate=personEndDate,
            personJobStartDate=personJobStartDate,
            personJobEndDate=personJobEndDate,
            personId=personId,
            upcoming=upcoming,
            scenarioId=scenarioId,
            backfillPersonId=backfillPersonId,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.comp import Comp
from chart_hop_python_sdk.model.group_assignment import GroupAssignment
from chart_hop_python_sdk.model.job_fields import JobFields
from chart_hop_python_sdk.model.job_group_ids import JobGroupIds
from chart_hop_python_sdk.model.job_manager_ids import JobManagerIds
from chart_hop_python_sdk.model.job_relationship import JobRelationship
from chart_hop_python_sdk.model.upcoming_change import UpcomingChange
