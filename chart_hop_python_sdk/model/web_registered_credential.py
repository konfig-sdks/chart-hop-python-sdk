# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class WebRegisteredCredential(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdAt",
            "signatureCount",
            "credentialId",
            "publicKeyBase64",
            "userHandleBase64",
        }
        
        class properties:
            credentialId = schemas.StrSchema
            publicKeyBase64 = schemas.StrSchema
            userHandleBase64 = schemas.StrSchema
            signatureCount = schemas.Int64Schema
            createdAt = schemas.Int64Schema
            __annotations__ = {
                "credentialId": credentialId,
                "publicKeyBase64": publicKeyBase64,
                "userHandleBase64": userHandleBase64,
                "signatureCount": signatureCount,
                "createdAt": createdAt,
            }
    
    createdAt: MetaOapg.properties.createdAt
    signatureCount: MetaOapg.properties.signatureCount
    credentialId: MetaOapg.properties.credentialId
    publicKeyBase64: MetaOapg.properties.publicKeyBase64
    userHandleBase64: MetaOapg.properties.userHandleBase64
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialId"]) -> MetaOapg.properties.credentialId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKeyBase64"]) -> MetaOapg.properties.publicKeyBase64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userHandleBase64"]) -> MetaOapg.properties.userHandleBase64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureCount"]) -> MetaOapg.properties.signatureCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["credentialId", "publicKeyBase64", "userHandleBase64", "signatureCount", "createdAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialId"]) -> MetaOapg.properties.credentialId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKeyBase64"]) -> MetaOapg.properties.publicKeyBase64: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userHandleBase64"]) -> MetaOapg.properties.userHandleBase64: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureCount"]) -> MetaOapg.properties.signatureCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["credentialId", "publicKeyBase64", "userHandleBase64", "signatureCount", "createdAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, ],
        signatureCount: typing.Union[MetaOapg.properties.signatureCount, decimal.Decimal, int, ],
        credentialId: typing.Union[MetaOapg.properties.credentialId, str, ],
        publicKeyBase64: typing.Union[MetaOapg.properties.publicKeyBase64, str, ],
        userHandleBase64: typing.Union[MetaOapg.properties.userHandleBase64, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebRegisteredCredential':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            signatureCount=signatureCount,
            credentialId=credentialId,
            publicKeyBase64=publicKeyBase64,
            userHandleBase64=userHandleBase64,
            _configuration=_configuration,
            **kwargs,
        )
