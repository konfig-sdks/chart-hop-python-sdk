# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportSeriesQuery(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "color",
            "options",
            "y",
            "label",
        }
        
        class properties:
            label = schemas.StrSchema
            color = schemas.StrSchema
            y = schemas.StrSchema
            options = schemas.DictSchema
            x = schemas.StrSchema
            
            
            class groupByConfigs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupByConfig']:
                        return GroupByConfig
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupByConfig'], typing.List['GroupByConfig']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groupByConfigs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupByConfig':
                    return super().__getitem__(i)
            __annotations__ = {
                "label": label,
                "color": color,
                "y": y,
                "options": options,
                "x": x,
                "groupByConfigs": groupByConfigs,
            }
    
    color: MetaOapg.properties.color
    options: MetaOapg.properties.options
    y: MetaOapg.properties.y
    label: MetaOapg.properties.label
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupByConfigs"]) -> MetaOapg.properties.groupByConfigs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "color", "y", "options", "x", "groupByConfigs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupByConfigs"]) -> typing.Union[MetaOapg.properties.groupByConfigs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "color", "y", "options", "x", "groupByConfigs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        color: typing.Union[MetaOapg.properties.color, str, ],
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, ],
        y: typing.Union[MetaOapg.properties.y, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        x: typing.Union[MetaOapg.properties.x, str, schemas.Unset] = schemas.unset,
        groupByConfigs: typing.Union[MetaOapg.properties.groupByConfigs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportSeriesQuery':
        return super().__new__(
            cls,
            *args,
            color=color,
            options=options,
            y=y,
            label=label,
            x=x,
            groupByConfigs=groupByConfigs,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.group_by_config import GroupByConfig
