# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "at",
            "entityType",
            "entityId",
            "id",
            "type",
            "userId",
        }
        
        class properties:
            id = schemas.StrSchema
            userId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def APP(cls):
                    return cls("APP")
                
                @schemas.classproperty
                def APPROVE(cls):
                    return cls("APPROVE")
                
                @schemas.classproperty
                def COMBINE(cls):
                    return cls("COMBINE")
                
                @schemas.classproperty
                def CREATE(cls):
                    return cls("CREATE")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("DONE")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def EXPORT_CSV(cls):
                    return cls("EXPORT_CSV")
                
                @schemas.classproperty
                def EXPORT_ORG_CHART(cls):
                    return cls("EXPORT_ORG_CHART")
                
                @schemas.classproperty
                def GENERATE(cls):
                    return cls("GENERATE")
                
                @schemas.classproperty
                def GEOIP(cls):
                    return cls("GEOIP")
                
                @schemas.classproperty
                def INCOMING(cls):
                    return cls("INCOMING")
                
                @schemas.classproperty
                def INSTALL(cls):
                    return cls("INSTALL")
                
                @schemas.classproperty
                def INVITE(cls):
                    return cls("INVITE")
                
                @schemas.classproperty
                def INBOUND(cls):
                    return cls("INBOUND")
                
                @schemas.classproperty
                def LOGIN(cls):
                    return cls("LOGIN")
                
                @schemas.classproperty
                def MERGE(cls):
                    return cls("MERGE")
                
                @schemas.classproperty
                def OUTBOUND(cls):
                    return cls("OUTBOUND")
                
                @schemas.classproperty
                def PREVIEW_AS(cls):
                    return cls("PREVIEW_AS")
                
                @schemas.classproperty
                def READ(cls):
                    return cls("READ")
                
                @schemas.classproperty
                def READ_SENSITIVE(cls):
                    return cls("READ_SENSITIVE")
                
                @schemas.classproperty
                def READ_ATS(cls):
                    return cls("READ_ATS")
                
                @schemas.classproperty
                def READ_ATS_WEBHOOK(cls):
                    return cls("READ_ATS_WEBHOOK")
                
                @schemas.classproperty
                def READ_FULL_NAME(cls):
                    return cls("READ_FULL_NAME")
                
                @schemas.classproperty
                def READ_FUTURE_DATE(cls):
                    return cls("READ_FUTURE_DATE")
                
                @schemas.classproperty
                def READ_METADATA(cls):
                    return cls("READ_METADATA")
                
                @schemas.classproperty
                def READ_COMP(cls):
                    return cls("READ_COMP")
                
                @schemas.classproperty
                def READ_BILLING(cls):
                    return cls("READ_BILLING")
                
                @schemas.classproperty
                def READ_PENDING(cls):
                    return cls("READ_PENDING")
                
                @schemas.classproperty
                def READ_PAYROLL(cls):
                    return cls("READ_PAYROLL")
                
                @schemas.classproperty
                def READ_SENSITIVE_FILTERS(cls):
                    return cls("READ_SENSITIVE_FILTERS")
                
                @schemas.classproperty
                def REJECT(cls):
                    return cls("REJECT")
                
                @schemas.classproperty
                def REMIND(cls):
                    return cls("REMIND")
                
                @schemas.classproperty
                def REMOVE_PASSWORD(cls):
                    return cls("REMOVE_PASSWORD")
                
                @schemas.classproperty
                def REQUEST(cls):
                    return cls("REQUEST")
                
                @schemas.classproperty
                def RESTORE(cls):
                    return cls("RESTORE")
                
                @schemas.classproperty
                def RESUME(cls):
                    return cls("RESUME")
                
                @schemas.classproperty
                def REVOKE(cls):
                    return cls("REVOKE")
                
                @schemas.classproperty
                def RUN(cls):
                    return cls("RUN")
                
                @schemas.classproperty
                def RUN_ATS(cls):
                    return cls("RUN_ATS")
                
                @schemas.classproperty
                def SECURITY(cls):
                    return cls("SECURITY")
                
                @schemas.classproperty
                def SHOW_DASHBOARD_DAYS_AHEAD(cls):
                    return cls("SHOW_DASHBOARD_DAYS_AHEAD")
                
                @schemas.classproperty
                def SHOW_OPEN_JOBS(cls):
                    return cls("SHOW_OPEN_JOBS")
                
                @schemas.classproperty
                def STEP(cls):
                    return cls("STEP")
                
                @schemas.classproperty
                def SUBMIT(cls):
                    return cls("SUBMIT")
                
                @schemas.classproperty
                def SYNC(cls):
                    return cls("SYNC")
                
                @schemas.classproperty
                def TEST(cls):
                    return cls("TEST")
                
                @schemas.classproperty
                def TOKEN(cls):
                    return cls("TOKEN")
                
                @schemas.classproperty
                def UNINSTALL(cls):
                    return cls("UNINSTALL")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def UPDATE_PASSWORD(cls):
                    return cls("UPDATE_PASSWORD")
                
                @schemas.classproperty
                def UPLOAD_CSV(cls):
                    return cls("UPLOAD_CSV")
                
                @schemas.classproperty
                def WRITE(cls):
                    return cls("WRITE")
                
                @schemas.classproperty
                def VIEW_AS(cls):
                    return cls("VIEW_AS")
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTION(cls):
                    return cls("ACTION")
                
                @schemas.classproperty
                def AGREEMENT(cls):
                    return cls("AGREEMENT")
                
                @schemas.classproperty
                def APP(cls):
                    return cls("APP")
                
                @schemas.classproperty
                def APP_CONFIG(cls):
                    return cls("APP_CONFIG")
                
                @schemas.classproperty
                def APPROVAL_CHAIN(cls):
                    return cls("APPROVAL_CHAIN")
                
                @schemas.classproperty
                def APPROVAL_CHAIN_STAGE(cls):
                    return cls("APPROVAL_CHAIN_STAGE")
                
                @schemas.classproperty
                def APPROVAL_REQUEST(cls):
                    return cls("APPROVAL_REQUEST")
                
                @schemas.classproperty
                def ASSESSMENT(cls):
                    return cls("ASSESSMENT")
                
                @schemas.classproperty
                def BUDGET_POOL(cls):
                    return cls("BUDGET_POOL")
                
                @schemas.classproperty
                def BUNDLE(cls):
                    return cls("BUNDLE")
                
                @schemas.classproperty
                def CATEGORY(cls):
                    return cls("CATEGORY")
                
                @schemas.classproperty
                def CATEGORY_SORT(cls):
                    return cls("CATEGORY_SORT")
                
                @schemas.classproperty
                def CHANGE(cls):
                    return cls("CHANGE")
                
                @schemas.classproperty
                def COMMENT(cls):
                    return cls("COMMENT")
                
                @schemas.classproperty
                def COMP_BAND(cls):
                    return cls("COMP_BAND")
                
                @schemas.classproperty
                def COMP_REVIEW(cls):
                    return cls("COMP_REVIEW")
                
                @schemas.classproperty
                def CONTENT(cls):
                    return cls("CONTENT")
                
                @schemas.classproperty
                def CUSTOMER(cls):
                    return cls("CUSTOMER")
                
                @schemas.classproperty
                def DATA_VIEW(cls):
                    return cls("DATA_VIEW")
                
                @schemas.classproperty
                def EXCHANGE_RATE(cls):
                    return cls("EXCHANGE_RATE")
                
                @schemas.classproperty
                def EMAIL_TEMPLATE(cls):
                    return cls("EMAIL_TEMPLATE")
                
                @schemas.classproperty
                def FIELD(cls):
                    return cls("FIELD")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
                
                @schemas.classproperty
                def FORM(cls):
                    return cls("FORM")
                
                @schemas.classproperty
                def FORM_DRAFT(cls):
                    return cls("FORM_DRAFT")
                
                @schemas.classproperty
                def FORM_RESPONSE(cls):
                    return cls("FORM_RESPONSE")
                
                @schemas.classproperty
                def GEOCODE(cls):
                    return cls("GEOCODE")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def GUIDELINE(cls):
                    return cls("GUIDELINE")
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOB_LEVEL(cls):
                    return cls("JOB_LEVEL")
                
                @schemas.classproperty
                def MEDIA(cls):
                    return cls("MEDIA")
                
                @schemas.classproperty
                def MESSAGE(cls):
                    return cls("MESSAGE")
                
                @schemas.classproperty
                def MULTIPLIER(cls):
                    return cls("MULTIPLIER")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_CONFIG(cls):
                    return cls("ORG_CONFIG")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def PROFILE_TAB(cls):
                    return cls("PROFILE_TAB")
                
                @schemas.classproperty
                def POLICY(cls):
                    return cls("POLICY")
                
                @schemas.classproperty
                def POSITION(cls):
                    return cls("POSITION")
                
                @schemas.classproperty
                def PROCESS(cls):
                    return cls("PROCESS")
                
                @schemas.classproperty
                def PRODUCT(cls):
                    return cls("PRODUCT")
                
                @schemas.classproperty
                def QUERY_TOKEN(cls):
                    return cls("QUERY_TOKEN")
                
                @schemas.classproperty
                def QUESTION(cls):
                    return cls("QUESTION")
                
                @schemas.classproperty
                def REPORT(cls):
                    return cls("REPORT")
                
                @schemas.classproperty
                def REPORT_CHART(cls):
                    return cls("REPORT_CHART")
                
                @schemas.classproperty
                def ROLE(cls):
                    return cls("ROLE")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def STOCK_PRICE(cls):
                    return cls("STOCK_PRICE")
                
                @schemas.classproperty
                def TABLE(cls):
                    return cls("TABLE")
                
                @schemas.classproperty
                def TABLE_ROW(cls):
                    return cls("TABLE_ROW")
                
                @schemas.classproperty
                def TASK_CONFIG(cls):
                    return cls("TASK_CONFIG")
                
                @schemas.classproperty
                def TEMPLATE(cls):
                    return cls("TEMPLATE")
                
                @schemas.classproperty
                def TASK(cls):
                    return cls("TASK")
                
                @schemas.classproperty
                def TOKEN(cls):
                    return cls("TOKEN")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def TRACKED_GROUP(cls):
                    return cls("TRACKED_GROUP")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
            entityId = schemas.StrSchema
            at = schemas.Int64Schema
            orgId = schemas.StrSchema
            tableId = schemas.StrSchema
            jobId = schemas.StrSchema
            personId = schemas.StrSchema
            subtype = schemas.StrSchema
            payload = schemas.DictSchema
            processId = schemas.StrSchema
            date = schemas.DateSchema
            scenarioId = schemas.StrSchema
            parentEntityId = schemas.StrSchema
        
            @staticmethod
            def fields() -> typing.Type['EventFields']:
                return EventFields
            code = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "userId": userId,
                "type": type,
                "entityType": entityType,
                "entityId": entityId,
                "at": at,
                "orgId": orgId,
                "tableId": tableId,
                "jobId": jobId,
                "personId": personId,
                "subtype": subtype,
                "payload": payload,
                "processId": processId,
                "date": date,
                "scenarioId": scenarioId,
                "parentEntityId": parentEntityId,
                "fields": fields,
                "code": code,
            }
    
    at: MetaOapg.properties.at
    entityType: MetaOapg.properties.entityType
    entityId: MetaOapg.properties.entityId
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    userId: MetaOapg.properties.userId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableId"]) -> MetaOapg.properties.tableId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payload"]) -> MetaOapg.properties.payload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processId"]) -> MetaOapg.properties.processId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentEntityId"]) -> MetaOapg.properties.parentEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'EventFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "userId", "type", "entityType", "entityId", "at", "orgId", "tableId", "jobId", "personId", "subtype", "payload", "processId", "date", "scenarioId", "parentEntityId", "fields", "code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableId"]) -> typing.Union[MetaOapg.properties.tableId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union[MetaOapg.properties.subtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payload"]) -> typing.Union[MetaOapg.properties.payload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processId"]) -> typing.Union[MetaOapg.properties.processId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentEntityId"]) -> typing.Union[MetaOapg.properties.parentEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['EventFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "userId", "type", "entityType", "entityId", "at", "orgId", "tableId", "jobId", "personId", "subtype", "payload", "processId", "date", "scenarioId", "parentEntityId", "fields", "code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        at: typing.Union[MetaOapg.properties.at, decimal.Decimal, int, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        tableId: typing.Union[MetaOapg.properties.tableId, str, schemas.Unset] = schemas.unset,
        jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union[MetaOapg.properties.subtype, str, schemas.Unset] = schemas.unset,
        payload: typing.Union[MetaOapg.properties.payload, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        processId: typing.Union[MetaOapg.properties.processId, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        parentEntityId: typing.Union[MetaOapg.properties.parentEntityId, str, schemas.Unset] = schemas.unset,
        fields: typing.Union['EventFields', schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            at=at,
            entityType=entityType,
            entityId=entityId,
            id=id,
            type=type,
            userId=userId,
            orgId=orgId,
            tableId=tableId,
            jobId=jobId,
            personId=personId,
            subtype=subtype,
            payload=payload,
            processId=processId,
            date=date,
            scenarioId=scenarioId,
            parentEntityId=parentEntityId,
            fields=fields,
            code=code,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.event_fields import EventFields
