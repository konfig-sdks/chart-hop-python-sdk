# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CreateApp(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "summary",
            "cronOrder",
            "name",
            "title",
            "type",
            "minAccess",
            "orgId",
        }
        
        class properties:
            summary = schemas.StrSchema
            title = schemas.StrSchema
            orgId = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            cronOrder = schemas.Int32Schema
            
            
            class minAccess(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def VIEW(cls):
                    return cls("VIEW")
                
                @schemas.classproperty
                def LIMITED(cls):
                    return cls("LIMITED")
                
                @schemas.classproperty
                def MEMBER_LIMITED_COMP(cls):
                    return cls("MEMBER_LIMITED_COMP")
                
                @schemas.classproperty
                def MEMBER(cls):
                    return cls("MEMBER")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
                
                @schemas.classproperty
                def TECH_OWNER(cls):
                    return cls("TECH_OWNER")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def CONTACT(cls):
                    return cls("CONTACT")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def COMP_ALL(cls):
                    return cls("COMP_ALL")
                
                @schemas.classproperty
                def RECRUIT_SENSITIVE(cls):
                    return cls("RECRUIT_SENSITIVE")
                
                @schemas.classproperty
                def RECRUIT_PRIMARY(cls):
                    return cls("RECRUIT_PRIMARY")
                
                @schemas.classproperty
                def SENSITIVE_LIMITED_COMP(cls):
                    return cls("SENSITIVE_LIMITED_COMP")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("PRIMARY")
                
                @schemas.classproperty
                def PEOPLE_OPS_ADMIN(cls):
                    return cls("PEOPLE_OPS_ADMIN")
                
                @schemas.classproperty
                def PEOPLE_OPS_ADMIN_NO_COMP_DATA(cls):
                    return cls("PEOPLE_OPS_ADMIN_NO_COMP_DATA")
                
                @schemas.classproperty
                def PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA(cls):
                    return cls("PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("OWNER")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def APP(cls):
                    return cls("APP")
                
                @schemas.classproperty
                def BUNDLE(cls):
                    return cls("BUNDLE")
                
                @schemas.classproperty
                def INTERNAL(cls):
                    return cls("INTERNAL")
        
            @staticmethod
            def tags() -> typing.Type['CreateAppTags']:
                return CreateAppTags
            description = schemas.StrSchema
        
            @staticmethod
            def redirectUris() -> typing.Type['CreateAppRedirectUris']:
                return CreateAppRedirectUris
        
            @staticmethod
            def allowedIps() -> typing.Type['CreateAppAllowedIps']:
                return CreateAppAllowedIps
            
            
            class configFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AppConfigField']:
                        return AppConfigField
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AppConfigField'], typing.List['AppConfigField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'configFields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AppConfigField':
                    return super().__getitem__(i)
            setupInstructions = schemas.StrSchema
            
            
            class cronSchedule(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("DAILY")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("WEEKLY")
            
            
            class cronDayOfWeek(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MONDAY(cls):
                    return cls("MONDAY")
                
                @schemas.classproperty
                def TUESDAY(cls):
                    return cls("TUESDAY")
                
                @schemas.classproperty
                def WEDNESDAY(cls):
                    return cls("WEDNESDAY")
                
                @schemas.classproperty
                def THURSDAY(cls):
                    return cls("THURSDAY")
                
                @schemas.classproperty
                def FRIDAY(cls):
                    return cls("FRIDAY")
                
                @schemas.classproperty
                def SATURDAY(cls):
                    return cls("SATURDAY")
                
                @schemas.classproperty
                def SUNDAY(cls):
                    return cls("SUNDAY")
            
            
            class imagePath(
                schemas.StrSchema
            ):
                pass
            
            
            class wordmarkImagePath(
                schemas.StrSchema
            ):
                pass
            
            
            class poweredByImagePath(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
                
                @schemas.classproperty
                def DEVELOPMENT(cls):
                    return cls("DEVELOPMENT")
            roleId = schemas.StrSchema
            eventNotifyUrl = schemas.StrSchema
        
            @staticmethod
            def payload() -> typing.Type['CreateAppPayload']:
                return CreateAppPayload
        
            @staticmethod
            def events() -> typing.Type['CreateAppEvents']:
                return CreateAppEvents
        
            @staticmethod
            def bundle() -> typing.Type['Bundle']:
                return Bundle
        
            @staticmethod
            def scopes() -> typing.Type['CreateAppScopes']:
                return CreateAppScopes
            __annotations__ = {
                "summary": summary,
                "title": title,
                "orgId": orgId,
                "name": name,
                "cronOrder": cronOrder,
                "minAccess": minAccess,
                "type": type,
                "tags": tags,
                "description": description,
                "redirectUris": redirectUris,
                "allowedIps": allowedIps,
                "configFields": configFields,
                "setupInstructions": setupInstructions,
                "cronSchedule": cronSchedule,
                "cronDayOfWeek": cronDayOfWeek,
                "imagePath": imagePath,
                "wordmarkImagePath": wordmarkImagePath,
                "poweredByImagePath": poweredByImagePath,
                "status": status,
                "roleId": roleId,
                "eventNotifyUrl": eventNotifyUrl,
                "payload": payload,
                "events": events,
                "bundle": bundle,
                "scopes": scopes,
            }
    
    summary: MetaOapg.properties.summary
    cronOrder: MetaOapg.properties.cronOrder
    name: MetaOapg.properties.name
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    minAccess: MetaOapg.properties.minAccess
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cronOrder"]) -> MetaOapg.properties.cronOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minAccess"]) -> MetaOapg.properties.minAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'CreateAppTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUris"]) -> 'CreateAppRedirectUris': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedIps"]) -> 'CreateAppAllowedIps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configFields"]) -> MetaOapg.properties.configFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setupInstructions"]) -> MetaOapg.properties.setupInstructions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cronSchedule"]) -> MetaOapg.properties.cronSchedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cronDayOfWeek"]) -> MetaOapg.properties.cronDayOfWeek: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePath"]) -> MetaOapg.properties.imagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wordmarkImagePath"]) -> MetaOapg.properties.wordmarkImagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poweredByImagePath"]) -> MetaOapg.properties.poweredByImagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleId"]) -> MetaOapg.properties.roleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventNotifyUrl"]) -> MetaOapg.properties.eventNotifyUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payload"]) -> 'CreateAppPayload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'CreateAppEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bundle"]) -> 'Bundle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'CreateAppScopes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "title", "orgId", "name", "cronOrder", "minAccess", "type", "tags", "description", "redirectUris", "allowedIps", "configFields", "setupInstructions", "cronSchedule", "cronDayOfWeek", "imagePath", "wordmarkImagePath", "poweredByImagePath", "status", "roleId", "eventNotifyUrl", "payload", "events", "bundle", "scopes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cronOrder"]) -> MetaOapg.properties.cronOrder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minAccess"]) -> MetaOapg.properties.minAccess: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['CreateAppTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUris"]) -> typing.Union['CreateAppRedirectUris', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedIps"]) -> typing.Union['CreateAppAllowedIps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configFields"]) -> typing.Union[MetaOapg.properties.configFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setupInstructions"]) -> typing.Union[MetaOapg.properties.setupInstructions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cronSchedule"]) -> typing.Union[MetaOapg.properties.cronSchedule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cronDayOfWeek"]) -> typing.Union[MetaOapg.properties.cronDayOfWeek, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePath"]) -> typing.Union[MetaOapg.properties.imagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wordmarkImagePath"]) -> typing.Union[MetaOapg.properties.wordmarkImagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poweredByImagePath"]) -> typing.Union[MetaOapg.properties.poweredByImagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleId"]) -> typing.Union[MetaOapg.properties.roleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventNotifyUrl"]) -> typing.Union[MetaOapg.properties.eventNotifyUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payload"]) -> typing.Union['CreateAppPayload', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union['CreateAppEvents', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bundle"]) -> typing.Union['Bundle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['CreateAppScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "title", "orgId", "name", "cronOrder", "minAccess", "type", "tags", "description", "redirectUris", "allowedIps", "configFields", "setupInstructions", "cronSchedule", "cronDayOfWeek", "imagePath", "wordmarkImagePath", "poweredByImagePath", "status", "roleId", "eventNotifyUrl", "payload", "events", "bundle", "scopes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, ],
        cronOrder: typing.Union[MetaOapg.properties.cronOrder, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        minAccess: typing.Union[MetaOapg.properties.minAccess, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        tags: typing.Union['CreateAppTags', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        redirectUris: typing.Union['CreateAppRedirectUris', schemas.Unset] = schemas.unset,
        allowedIps: typing.Union['CreateAppAllowedIps', schemas.Unset] = schemas.unset,
        configFields: typing.Union[MetaOapg.properties.configFields, list, tuple, schemas.Unset] = schemas.unset,
        setupInstructions: typing.Union[MetaOapg.properties.setupInstructions, str, schemas.Unset] = schemas.unset,
        cronSchedule: typing.Union[MetaOapg.properties.cronSchedule, str, schemas.Unset] = schemas.unset,
        cronDayOfWeek: typing.Union[MetaOapg.properties.cronDayOfWeek, str, schemas.Unset] = schemas.unset,
        imagePath: typing.Union[MetaOapg.properties.imagePath, str, schemas.Unset] = schemas.unset,
        wordmarkImagePath: typing.Union[MetaOapg.properties.wordmarkImagePath, str, schemas.Unset] = schemas.unset,
        poweredByImagePath: typing.Union[MetaOapg.properties.poweredByImagePath, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        roleId: typing.Union[MetaOapg.properties.roleId, str, schemas.Unset] = schemas.unset,
        eventNotifyUrl: typing.Union[MetaOapg.properties.eventNotifyUrl, str, schemas.Unset] = schemas.unset,
        payload: typing.Union['CreateAppPayload', schemas.Unset] = schemas.unset,
        events: typing.Union['CreateAppEvents', schemas.Unset] = schemas.unset,
        bundle: typing.Union['Bundle', schemas.Unset] = schemas.unset,
        scopes: typing.Union['CreateAppScopes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateApp':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            cronOrder=cronOrder,
            name=name,
            title=title,
            type=type,
            minAccess=minAccess,
            orgId=orgId,
            tags=tags,
            description=description,
            redirectUris=redirectUris,
            allowedIps=allowedIps,
            configFields=configFields,
            setupInstructions=setupInstructions,
            cronSchedule=cronSchedule,
            cronDayOfWeek=cronDayOfWeek,
            imagePath=imagePath,
            wordmarkImagePath=wordmarkImagePath,
            poweredByImagePath=poweredByImagePath,
            status=status,
            roleId=roleId,
            eventNotifyUrl=eventNotifyUrl,
            payload=payload,
            events=events,
            bundle=bundle,
            scopes=scopes,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.app_config_field import AppConfigField
from chart_hop_python_sdk.model.bundle import Bundle
from chart_hop_python_sdk.model.create_app_allowed_ips import CreateAppAllowedIps
from chart_hop_python_sdk.model.create_app_events import CreateAppEvents
from chart_hop_python_sdk.model.create_app_payload import CreateAppPayload
from chart_hop_python_sdk.model.create_app_redirect_uris import CreateAppRedirectUris
from chart_hop_python_sdk.model.create_app_scopes import CreateAppScopes
from chart_hop_python_sdk.model.create_app_tags import CreateAppTags
