# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpdateProduct(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            sku = schemas.StrSchema
            salesforceProductId = schemas.StrSchema
            stripeProductId = schemas.StrSchema
        
            @staticmethod
            def features() -> typing.Type['UpdateProductFeatures']:
                return UpdateProductFeatures
        
            @staticmethod
            def featureOptions() -> typing.Type['UpdateProductFeatureOptions']:
                return UpdateProductFeatureOptions
            __annotations__ = {
                "name": name,
                "sku": sku,
                "salesforceProductId": salesforceProductId,
                "stripeProductId": stripeProductId,
                "features": features,
                "featureOptions": featureOptions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesforceProductId"]) -> MetaOapg.properties.salesforceProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeProductId"]) -> MetaOapg.properties.stripeProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> 'UpdateProductFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureOptions"]) -> 'UpdateProductFeatureOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "sku", "salesforceProductId", "stripeProductId", "features", "featureOptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesforceProductId"]) -> typing.Union[MetaOapg.properties.salesforceProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeProductId"]) -> typing.Union[MetaOapg.properties.stripeProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union['UpdateProductFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureOptions"]) -> typing.Union['UpdateProductFeatureOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "sku", "salesforceProductId", "stripeProductId", "features", "featureOptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        salesforceProductId: typing.Union[MetaOapg.properties.salesforceProductId, str, schemas.Unset] = schemas.unset,
        stripeProductId: typing.Union[MetaOapg.properties.stripeProductId, str, schemas.Unset] = schemas.unset,
        features: typing.Union['UpdateProductFeatures', schemas.Unset] = schemas.unset,
        featureOptions: typing.Union['UpdateProductFeatureOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateProduct':
        return super().__new__(
            cls,
            *args,
            name=name,
            sku=sku,
            salesforceProductId=salesforceProductId,
            stripeProductId=stripeProductId,
            features=features,
            featureOptions=featureOptions,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.update_product_feature_options import UpdateProductFeatureOptions
from chart_hop_python_sdk.model.update_product_features import UpdateProductFeatures
