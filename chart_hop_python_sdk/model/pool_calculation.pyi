# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PoolCalculation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "budgetPoolId",
            "label",
            "scenarios",
            "allocated",
        }
        
        class properties:
            budgetPoolId = schemas.StrSchema
            label = schemas.StrSchema
            allocated = schemas.DictSchema
            
            
            class scenarios(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ScenarioCalculation']:
                        return ScenarioCalculation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ScenarioCalculation'], typing.List['ScenarioCalculation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scenarios':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ScenarioCalculation':
                    return super().__getitem__(i)
            used = schemas.DictSchema
            __annotations__ = {
                "budgetPoolId": budgetPoolId,
                "label": label,
                "allocated": allocated,
                "scenarios": scenarios,
                "used": used,
            }
    
    budgetPoolId: MetaOapg.properties.budgetPoolId
    label: MetaOapg.properties.label
    scenarios: MetaOapg.properties.scenarios
    allocated: MetaOapg.properties.allocated
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budgetPoolId"]) -> MetaOapg.properties.budgetPoolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated"]) -> MetaOapg.properties.allocated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarios"]) -> MetaOapg.properties.scenarios: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["used"]) -> MetaOapg.properties.used: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["budgetPoolId", "label", "allocated", "scenarios", "used", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budgetPoolId"]) -> MetaOapg.properties.budgetPoolId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated"]) -> MetaOapg.properties.allocated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarios"]) -> MetaOapg.properties.scenarios: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["used"]) -> typing.Union[MetaOapg.properties.used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["budgetPoolId", "label", "allocated", "scenarios", "used", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        budgetPoolId: typing.Union[MetaOapg.properties.budgetPoolId, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        scenarios: typing.Union[MetaOapg.properties.scenarios, list, tuple, ],
        allocated: typing.Union[MetaOapg.properties.allocated, dict, frozendict.frozendict, ],
        used: typing.Union[MetaOapg.properties.used, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PoolCalculation':
        return super().__new__(
            cls,
            *args,
            budgetPoolId=budgetPoolId,
            label=label,
            scenarios=scenarios,
            allocated=allocated,
            used=used,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.scenario_calculation import ScenarioCalculation
