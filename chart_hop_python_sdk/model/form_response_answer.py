# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class FormResponseAnswer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "questionId",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            questionId = schemas.StrSchema
            value = schemas.DictSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDRESS": "ADDRESS",
                        "BOOLEAN": "BOOLEAN",
                        "COMP": "COMP",
                        "COMPOUND": "COMPOUND",
                        "COMP_BAND": "COMP_BAND",
                        "CONTACTS": "CONTACTS",
                        "CURRENCY": "CURRENCY",
                        "DATE": "DATE",
                        "DECIMAL": "DECIMAL",
                        "ELAPSED_DAYS": "ELAPSED_DAYS",
                        "ELAPSED_MONTHS": "ELAPSED_MONTHS",
                        "ELAPSED_YEARS": "ELAPSED_YEARS",
                        "EMAIL": "EMAIL",
                        "ENUM": "ENUM",
                        "ENUM_EXPR": "ENUM_EXPR",
                        "ENUM_MULTI": "ENUM_MULTI",
                        "ENUM_SCALE": "ENUM_SCALE",
                        "EXPR": "EXPR",
                        "FILE": "FILE",
                        "GROUP": "GROUP",
                        "GROUPS": "GROUPS",
                        "GROUP_ASSIGNMENTS": "GROUP_ASSIGNMENTS",
                        "GROUP_TYPE": "GROUP_TYPE",
                        "IMAGE": "IMAGE",
                        "INTEGER": "INTEGER",
                        "JOB": "JOB",
                        "JOBS": "JOBS",
                        "JOB_TIER": "JOB_TIER",
                        "LIST": "LIST",
                        "MONEY": "MONEY",
                        "NAME": "NAME",
                        "OBJECT": "OBJECT",
                        "PAY_INTERVAL": "PAY_INTERVAL",
                        "PERCENT": "PERCENT",
                        "PERSON": "PERSON",
                        "PERSONS": "PERSONS",
                        "PHONE": "PHONE",
                        "STOCKGRANT": "STOCKGRANT",
                        "STRING": "STRING",
                        "TABLE_REF": "TABLE_REF",
                        "TEXT": "TEXT",
                        "TIMEOFF": "TIMEOFF",
                        "TIMESTAMP": "TIMESTAMP",
                        "TRACKED_GROUP": "TRACKED_GROUP",
                        "URL": "URL",
                        "USER": "USER",
                        "VARIABLE_COMP": "VARIABLE_COMP",
                        "VARIABLE_COMPS": "VARIABLE_COMPS",
                    }
                
                @schemas.classproperty
                def ADDRESS(cls):
                    return cls("ADDRESS")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def COMP(cls):
                    return cls("COMP")
                
                @schemas.classproperty
                def COMPOUND(cls):
                    return cls("COMPOUND")
                
                @schemas.classproperty
                def COMP_BAND(cls):
                    return cls("COMP_BAND")
                
                @schemas.classproperty
                def CONTACTS(cls):
                    return cls("CONTACTS")
                
                @schemas.classproperty
                def CURRENCY(cls):
                    return cls("CURRENCY")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("DECIMAL")
                
                @schemas.classproperty
                def ELAPSED_DAYS(cls):
                    return cls("ELAPSED_DAYS")
                
                @schemas.classproperty
                def ELAPSED_MONTHS(cls):
                    return cls("ELAPSED_MONTHS")
                
                @schemas.classproperty
                def ELAPSED_YEARS(cls):
                    return cls("ELAPSED_YEARS")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def ENUM(cls):
                    return cls("ENUM")
                
                @schemas.classproperty
                def ENUM_EXPR(cls):
                    return cls("ENUM_EXPR")
                
                @schemas.classproperty
                def ENUM_MULTI(cls):
                    return cls("ENUM_MULTI")
                
                @schemas.classproperty
                def ENUM_SCALE(cls):
                    return cls("ENUM_SCALE")
                
                @schemas.classproperty
                def EXPR(cls):
                    return cls("EXPR")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def GROUPS(cls):
                    return cls("GROUPS")
                
                @schemas.classproperty
                def GROUP_ASSIGNMENTS(cls):
                    return cls("GROUP_ASSIGNMENTS")
                
                @schemas.classproperty
                def GROUP_TYPE(cls):
                    return cls("GROUP_TYPE")
                
                @schemas.classproperty
                def IMAGE(cls):
                    return cls("IMAGE")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("INTEGER")
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOBS(cls):
                    return cls("JOBS")
                
                @schemas.classproperty
                def JOB_TIER(cls):
                    return cls("JOB_TIER")
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("LIST")
                
                @schemas.classproperty
                def MONEY(cls):
                    return cls("MONEY")
                
                @schemas.classproperty
                def NAME(cls):
                    return cls("NAME")
                
                @schemas.classproperty
                def OBJECT(cls):
                    return cls("OBJECT")
                
                @schemas.classproperty
                def PAY_INTERVAL(cls):
                    return cls("PAY_INTERVAL")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("PERCENT")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def PERSONS(cls):
                    return cls("PERSONS")
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("PHONE")
                
                @schemas.classproperty
                def STOCKGRANT(cls):
                    return cls("STOCKGRANT")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def TABLE_REF(cls):
                    return cls("TABLE_REF")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def TIMESTAMP(cls):
                    return cls("TIMESTAMP")
                
                @schemas.classproperty
                def TRACKED_GROUP(cls):
                    return cls("TRACKED_GROUP")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def VARIABLE_COMP(cls):
                    return cls("VARIABLE_COMP")
                
                @schemas.classproperty
                def VARIABLE_COMPS(cls):
                    return cls("VARIABLE_COMPS")
            
            
            class plural(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SINGLE": "SINGLE",
                        "LIST": "LIST",
                        "SET": "SET",
                    }
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("SINGLE")
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("LIST")
                
                @schemas.classproperty
                def SET(cls):
                    return cls("SET")
            __annotations__ = {
                "id": id,
                "questionId": questionId,
                "value": value,
                "type": type,
                "plural": plural,
            }
    
    questionId: MetaOapg.properties.questionId
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questionId"]) -> MetaOapg.properties.questionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plural"]) -> MetaOapg.properties.plural: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "questionId", "value", "type", "plural", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questionId"]) -> MetaOapg.properties.questionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plural"]) -> typing.Union[MetaOapg.properties.plural, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "questionId", "value", "type", "plural", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        questionId: typing.Union[MetaOapg.properties.questionId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        plural: typing.Union[MetaOapg.properties.plural, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormResponseAnswer':
        return super().__new__(
            cls,
            *args,
            questionId=questionId,
            id=id,
            value=value,
            type=type,
            plural=plural,
            _configuration=_configuration,
            **kwargs,
        )
