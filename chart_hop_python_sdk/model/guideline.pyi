# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Guideline(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "calculationType",
            "flagMode",
            "appliedField",
            "basisType",
            "updateAt",
            "label",
            "createAt",
            "orgId",
            "enablePopulateValue",
            "sourceField",
            "updateId",
            "createId",
            "compReviewId",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            compReviewId = schemas.StrSchema
            label = schemas.StrSchema
            appliedField = schemas.StrSchema
            sourceField = schemas.StrSchema
            
            
            class calculationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RANGE(cls):
                    return cls("RANGE")
                
                @schemas.classproperty
                def TARGET(cls):
                    return cls("TARGET")
            
            
            class flagMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEVIATION_THRESHOLD(cls):
                    return cls("DEVIATION_THRESHOLD")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
            enablePopulateValue = schemas.BoolSchema
            
            
            class basisType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
                
                @schemas.classproperty
                def FIXED(cls):
                    return cls("FIXED")
                
                @schemas.classproperty
                def CUSTOM_FIXED(cls):
                    return cls("CUSTOM_FIXED")
                
                @schemas.classproperty
                def PERCENTAGE(cls):
                    return cls("PERCENTAGE")
                
                @schemas.classproperty
                def CUSTOM_PERCENTAGE(cls):
                    return cls("CUSTOM_PERCENTAGE")
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            budgetPoolId = schemas.StrSchema
            participantsExpr = schemas.StrSchema
            flagDeviationThreshold = schemas.NumberSchema
            basisExpr = schemas.StrSchema
        
            @staticmethod
            def basisFieldMatrix() -> typing.Type['BasisFieldMatrix']:
                return BasisFieldMatrix
        
            @staticmethod
            def fixedAmountRange() -> typing.Type['MoneyRange']:
                return MoneyRange
        
            @staticmethod
            def fixedValueRange() -> typing.Type['ValueRange']:
                return ValueRange
            deleteId = schemas.StrSchema
            deleteAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "compReviewId": compReviewId,
                "label": label,
                "appliedField": appliedField,
                "sourceField": sourceField,
                "calculationType": calculationType,
                "flagMode": flagMode,
                "enablePopulateValue": enablePopulateValue,
                "basisType": basisType,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "budgetPoolId": budgetPoolId,
                "participantsExpr": participantsExpr,
                "flagDeviationThreshold": flagDeviationThreshold,
                "basisExpr": basisExpr,
                "basisFieldMatrix": basisFieldMatrix,
                "fixedAmountRange": fixedAmountRange,
                "fixedValueRange": fixedValueRange,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    calculationType: MetaOapg.properties.calculationType
    flagMode: MetaOapg.properties.flagMode
    appliedField: MetaOapg.properties.appliedField
    basisType: MetaOapg.properties.basisType
    updateAt: MetaOapg.properties.updateAt
    label: MetaOapg.properties.label
    createAt: MetaOapg.properties.createAt
    orgId: MetaOapg.properties.orgId
    enablePopulateValue: MetaOapg.properties.enablePopulateValue
    sourceField: MetaOapg.properties.sourceField
    updateId: MetaOapg.properties.updateId
    createId: MetaOapg.properties.createId
    compReviewId: MetaOapg.properties.compReviewId
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedField"]) -> MetaOapg.properties.appliedField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceField"]) -> MetaOapg.properties.sourceField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculationType"]) -> MetaOapg.properties.calculationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flagMode"]) -> MetaOapg.properties.flagMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enablePopulateValue"]) -> MetaOapg.properties.enablePopulateValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basisType"]) -> MetaOapg.properties.basisType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budgetPoolId"]) -> MetaOapg.properties.budgetPoolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participantsExpr"]) -> MetaOapg.properties.participantsExpr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flagDeviationThreshold"]) -> MetaOapg.properties.flagDeviationThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basisExpr"]) -> MetaOapg.properties.basisExpr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basisFieldMatrix"]) -> 'BasisFieldMatrix': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixedAmountRange"]) -> 'MoneyRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixedValueRange"]) -> 'ValueRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "compReviewId", "label", "appliedField", "sourceField", "calculationType", "flagMode", "enablePopulateValue", "basisType", "createId", "createAt", "updateId", "updateAt", "budgetPoolId", "participantsExpr", "flagDeviationThreshold", "basisExpr", "basisFieldMatrix", "fixedAmountRange", "fixedValueRange", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compReviewId"]) -> MetaOapg.properties.compReviewId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedField"]) -> MetaOapg.properties.appliedField: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceField"]) -> MetaOapg.properties.sourceField: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculationType"]) -> MetaOapg.properties.calculationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flagMode"]) -> MetaOapg.properties.flagMode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enablePopulateValue"]) -> MetaOapg.properties.enablePopulateValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basisType"]) -> MetaOapg.properties.basisType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budgetPoolId"]) -> typing.Union[MetaOapg.properties.budgetPoolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participantsExpr"]) -> typing.Union[MetaOapg.properties.participantsExpr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flagDeviationThreshold"]) -> typing.Union[MetaOapg.properties.flagDeviationThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basisExpr"]) -> typing.Union[MetaOapg.properties.basisExpr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basisFieldMatrix"]) -> typing.Union['BasisFieldMatrix', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixedAmountRange"]) -> typing.Union['MoneyRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixedValueRange"]) -> typing.Union['ValueRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "compReviewId", "label", "appliedField", "sourceField", "calculationType", "flagMode", "enablePopulateValue", "basisType", "createId", "createAt", "updateId", "updateAt", "budgetPoolId", "participantsExpr", "flagDeviationThreshold", "basisExpr", "basisFieldMatrix", "fixedAmountRange", "fixedValueRange", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        calculationType: typing.Union[MetaOapg.properties.calculationType, str, ],
        flagMode: typing.Union[MetaOapg.properties.flagMode, str, ],
        appliedField: typing.Union[MetaOapg.properties.appliedField, str, ],
        basisType: typing.Union[MetaOapg.properties.basisType, str, ],
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        enablePopulateValue: typing.Union[MetaOapg.properties.enablePopulateValue, bool, ],
        sourceField: typing.Union[MetaOapg.properties.sourceField, str, ],
        updateId: typing.Union[MetaOapg.properties.updateId, str, ],
        createId: typing.Union[MetaOapg.properties.createId, str, ],
        compReviewId: typing.Union[MetaOapg.properties.compReviewId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        budgetPoolId: typing.Union[MetaOapg.properties.budgetPoolId, str, schemas.Unset] = schemas.unset,
        participantsExpr: typing.Union[MetaOapg.properties.participantsExpr, str, schemas.Unset] = schemas.unset,
        flagDeviationThreshold: typing.Union[MetaOapg.properties.flagDeviationThreshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        basisExpr: typing.Union[MetaOapg.properties.basisExpr, str, schemas.Unset] = schemas.unset,
        basisFieldMatrix: typing.Union['BasisFieldMatrix', schemas.Unset] = schemas.unset,
        fixedAmountRange: typing.Union['MoneyRange', schemas.Unset] = schemas.unset,
        fixedValueRange: typing.Union['ValueRange', schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Guideline':
        return super().__new__(
            cls,
            *args,
            calculationType=calculationType,
            flagMode=flagMode,
            appliedField=appliedField,
            basisType=basisType,
            updateAt=updateAt,
            label=label,
            createAt=createAt,
            orgId=orgId,
            enablePopulateValue=enablePopulateValue,
            sourceField=sourceField,
            updateId=updateId,
            createId=createId,
            compReviewId=compReviewId,
            id=id,
            budgetPoolId=budgetPoolId,
            participantsExpr=participantsExpr,
            flagDeviationThreshold=flagDeviationThreshold,
            basisExpr=basisExpr,
            basisFieldMatrix=basisFieldMatrix,
            fixedAmountRange=fixedAmountRange,
            fixedValueRange=fixedValueRange,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.basis_field_matrix import BasisFieldMatrix
from chart_hop_python_sdk.model.money_range import MoneyRange
from chart_hop_python_sdk.model.value_range import ValueRange
