# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class NotificationRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "jobData",
            "templateName",
            "toUserIds",
        }
        
        class properties:
            templateName = schemas.StrSchema
        
            @staticmethod
            def toUserIds() -> typing.Type['NotificationRequestToUserIds']:
                return NotificationRequestToUserIds
        
            @staticmethod
            def jobData() -> typing.Type['NotificationJobData']:
                return NotificationJobData
            atsName = schemas.StrSchema
            orgName = schemas.StrSchema
            userName = schemas.StrSchema
            syncSummary = schemas.StrSchema
            processId = schemas.StrSchema
            __annotations__ = {
                "templateName": templateName,
                "toUserIds": toUserIds,
                "jobData": jobData,
                "atsName": atsName,
                "orgName": orgName,
                "userName": userName,
                "syncSummary": syncSummary,
                "processId": processId,
            }
    
    jobData: 'NotificationJobData'
    templateName: MetaOapg.properties.templateName
    toUserIds: 'NotificationRequestToUserIds'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateName"]) -> MetaOapg.properties.templateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toUserIds"]) -> 'NotificationRequestToUserIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobData"]) -> 'NotificationJobData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsName"]) -> MetaOapg.properties.atsName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncSummary"]) -> MetaOapg.properties.syncSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processId"]) -> MetaOapg.properties.processId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["templateName", "toUserIds", "jobData", "atsName", "orgName", "userName", "syncSummary", "processId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateName"]) -> MetaOapg.properties.templateName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toUserIds"]) -> 'NotificationRequestToUserIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobData"]) -> 'NotificationJobData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsName"]) -> typing.Union[MetaOapg.properties.atsName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgName"]) -> typing.Union[MetaOapg.properties.orgName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncSummary"]) -> typing.Union[MetaOapg.properties.syncSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processId"]) -> typing.Union[MetaOapg.properties.processId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["templateName", "toUserIds", "jobData", "atsName", "orgName", "userName", "syncSummary", "processId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobData: 'NotificationJobData',
        templateName: typing.Union[MetaOapg.properties.templateName, str, ],
        toUserIds: 'NotificationRequestToUserIds',
        atsName: typing.Union[MetaOapg.properties.atsName, str, schemas.Unset] = schemas.unset,
        orgName: typing.Union[MetaOapg.properties.orgName, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        syncSummary: typing.Union[MetaOapg.properties.syncSummary, str, schemas.Unset] = schemas.unset,
        processId: typing.Union[MetaOapg.properties.processId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationRequest':
        return super().__new__(
            cls,
            *args,
            jobData=jobData,
            templateName=templateName,
            toUserIds=toUserIds,
            atsName=atsName,
            orgName=orgName,
            userName=userName,
            syncSummary=syncSummary,
            processId=processId,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.notification_job_data import NotificationJobData
from chart_hop_python_sdk.model.notification_request_to_user_ids import NotificationRequestToUserIds
