# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PreloadResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "compBands",
            "org",
            "jobs",
            "questions",
            "groups",
            "scenarios",
            "users",
            "persons",
            "featureAccess",
            "categories",
            "orgs",
            "fields",
            "user",
            "forms",
        }
        
        class properties:
        
            @staticmethod
            def org() -> typing.Type['Org']:
                return Org
            
            
            class orgs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Org']:
                        return Org
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Org'], typing.List['Org']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orgs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Org':
                    return super().__getitem__(i)
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
        
            @staticmethod
            def groups() -> typing.Type['PreloadResponseGroups']:
                return PreloadResponseGroups
            
            
            class scenarios(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Scenario']:
                        return Scenario
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Scenario'], typing.List['Scenario']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scenarios':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Scenario':
                    return super().__getitem__(i)
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['User']:
                        return User
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['User'], typing.List['User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'User':
                    return super().__getitem__(i)
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Field']:
                        return Field
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Field'], typing.List['Field']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Field':
                    return super().__getitem__(i)
            
            
            class forms(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Form']:
                        return Form
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Form'], typing.List['Form']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'forms':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Form':
                    return super().__getitem__(i)
        
            @staticmethod
            def featureAccess() -> typing.Type['PreloadResponseFeatureAccess']:
                return PreloadResponseFeatureAccess
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Category']:
                        return Category
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Category'], typing.List['Category']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Category':
                    return super().__getitem__(i)
        
            @staticmethod
            def jobs() -> typing.Type['PreloadResponseJobs']:
                return PreloadResponseJobs
            
            
            class persons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Person']:
                        return Person
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Person'], typing.List['Person']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'persons':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Person':
                    return super().__getitem__(i)
            
            
            class compBands(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CompBand']:
                        return CompBand
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CompBand'], typing.List['CompBand']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'compBands':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CompBand':
                    return super().__getitem__(i)
            
            
            class questions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Question']:
                        return Question
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Question'], typing.List['Question']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'questions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Question':
                    return super().__getitem__(i)
        
            @staticmethod
            def role() -> typing.Type['Role']:
                return Role
        
            @staticmethod
            def viewUser() -> typing.Type['User']:
                return User
        
            @staticmethod
            def viewRole() -> typing.Type['Role']:
                return Role
        
            @staticmethod
            def exchangeRate() -> typing.Type['ExchangeRate']:
                return ExchangeRate
        
            @staticmethod
            def stock() -> typing.Type['OrgStockData']:
                return OrgStockData
        
            @staticmethod
            def job() -> typing.Type['Job']:
                return Job
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
        
            @staticmethod
            def customerDetails() -> typing.Type['CustomerDetails']:
                return CustomerDetails
            
            
            class enabledFeatureOptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FeatureAccessOption']:
                        return FeatureAccessOption
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FeatureAccessOption'], typing.List['FeatureAccessOption']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enabledFeatureOptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FeatureAccessOption':
                    return super().__getitem__(i)
        
            @staticmethod
            def categorySort() -> typing.Type['CategorySort']:
                return CategorySort
        
            @staticmethod
            def orgConfig() -> typing.Type['OrgConfig']:
                return OrgConfig
        
            @staticmethod
            def uiAccess() -> typing.Type['PreloadResponseUiAccess']:
                return PreloadResponseUiAccess
            __annotations__ = {
                "org": org,
                "orgs": orgs,
                "user": user,
                "groups": groups,
                "scenarios": scenarios,
                "users": users,
                "fields": fields,
                "forms": forms,
                "featureAccess": featureAccess,
                "categories": categories,
                "jobs": jobs,
                "persons": persons,
                "compBands": compBands,
                "questions": questions,
                "role": role,
                "viewUser": viewUser,
                "viewRole": viewRole,
                "exchangeRate": exchangeRate,
                "stock": stock,
                "job": job,
                "customer": customer,
                "customerDetails": customerDetails,
                "enabledFeatureOptions": enabledFeatureOptions,
                "categorySort": categorySort,
                "orgConfig": orgConfig,
                "uiAccess": uiAccess,
            }
    
    compBands: MetaOapg.properties.compBands
    org: 'Org'
    jobs: 'PreloadResponseJobs'
    questions: MetaOapg.properties.questions
    groups: 'PreloadResponseGroups'
    scenarios: MetaOapg.properties.scenarios
    users: MetaOapg.properties.users
    persons: MetaOapg.properties.persons
    featureAccess: 'PreloadResponseFeatureAccess'
    categories: MetaOapg.properties.categories
    orgs: MetaOapg.properties.orgs
    fields: MetaOapg.properties.fields
    user: 'User'
    forms: MetaOapg.properties.forms
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org"]) -> 'Org': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgs"]) -> MetaOapg.properties.orgs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> 'PreloadResponseGroups': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarios"]) -> MetaOapg.properties.scenarios: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forms"]) -> MetaOapg.properties.forms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureAccess"]) -> 'PreloadResponseFeatureAccess': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> 'PreloadResponseJobs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compBands"]) -> MetaOapg.properties.compBands: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> 'Role': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewUser"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewRole"]) -> 'Role': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeRate"]) -> 'ExchangeRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stock"]) -> 'OrgStockData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Job': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerDetails"]) -> 'CustomerDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabledFeatureOptions"]) -> MetaOapg.properties.enabledFeatureOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categorySort"]) -> 'CategorySort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgConfig"]) -> 'OrgConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uiAccess"]) -> 'PreloadResponseUiAccess': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["org", "orgs", "user", "groups", "scenarios", "users", "fields", "forms", "featureAccess", "categories", "jobs", "persons", "compBands", "questions", "role", "viewUser", "viewRole", "exchangeRate", "stock", "job", "customer", "customerDetails", "enabledFeatureOptions", "categorySort", "orgConfig", "uiAccess", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org"]) -> 'Org': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgs"]) -> MetaOapg.properties.orgs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> 'PreloadResponseGroups': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarios"]) -> MetaOapg.properties.scenarios: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forms"]) -> MetaOapg.properties.forms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureAccess"]) -> 'PreloadResponseFeatureAccess': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> 'PreloadResponseJobs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compBands"]) -> MetaOapg.properties.compBands: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union['Role', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewUser"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewRole"]) -> typing.Union['Role', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeRate"]) -> typing.Union['ExchangeRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stock"]) -> typing.Union['OrgStockData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Job', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerDetails"]) -> typing.Union['CustomerDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabledFeatureOptions"]) -> typing.Union[MetaOapg.properties.enabledFeatureOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categorySort"]) -> typing.Union['CategorySort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgConfig"]) -> typing.Union['OrgConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uiAccess"]) -> typing.Union['PreloadResponseUiAccess', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["org", "orgs", "user", "groups", "scenarios", "users", "fields", "forms", "featureAccess", "categories", "jobs", "persons", "compBands", "questions", "role", "viewUser", "viewRole", "exchangeRate", "stock", "job", "customer", "customerDetails", "enabledFeatureOptions", "categorySort", "orgConfig", "uiAccess", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        compBands: typing.Union[MetaOapg.properties.compBands, list, tuple, ],
        org: 'Org',
        jobs: 'PreloadResponseJobs',
        questions: typing.Union[MetaOapg.properties.questions, list, tuple, ],
        groups: 'PreloadResponseGroups',
        scenarios: typing.Union[MetaOapg.properties.scenarios, list, tuple, ],
        users: typing.Union[MetaOapg.properties.users, list, tuple, ],
        persons: typing.Union[MetaOapg.properties.persons, list, tuple, ],
        featureAccess: 'PreloadResponseFeatureAccess',
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        orgs: typing.Union[MetaOapg.properties.orgs, list, tuple, ],
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, ],
        user: 'User',
        forms: typing.Union[MetaOapg.properties.forms, list, tuple, ],
        role: typing.Union['Role', schemas.Unset] = schemas.unset,
        viewUser: typing.Union['User', schemas.Unset] = schemas.unset,
        viewRole: typing.Union['Role', schemas.Unset] = schemas.unset,
        exchangeRate: typing.Union['ExchangeRate', schemas.Unset] = schemas.unset,
        stock: typing.Union['OrgStockData', schemas.Unset] = schemas.unset,
        job: typing.Union['Job', schemas.Unset] = schemas.unset,
        customer: typing.Union['Customer', schemas.Unset] = schemas.unset,
        customerDetails: typing.Union['CustomerDetails', schemas.Unset] = schemas.unset,
        enabledFeatureOptions: typing.Union[MetaOapg.properties.enabledFeatureOptions, list, tuple, schemas.Unset] = schemas.unset,
        categorySort: typing.Union['CategorySort', schemas.Unset] = schemas.unset,
        orgConfig: typing.Union['OrgConfig', schemas.Unset] = schemas.unset,
        uiAccess: typing.Union['PreloadResponseUiAccess', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PreloadResponse':
        return super().__new__(
            cls,
            *args,
            compBands=compBands,
            org=org,
            jobs=jobs,
            questions=questions,
            groups=groups,
            scenarios=scenarios,
            users=users,
            persons=persons,
            featureAccess=featureAccess,
            categories=categories,
            orgs=orgs,
            fields=fields,
            user=user,
            forms=forms,
            role=role,
            viewUser=viewUser,
            viewRole=viewRole,
            exchangeRate=exchangeRate,
            stock=stock,
            job=job,
            customer=customer,
            customerDetails=customerDetails,
            enabledFeatureOptions=enabledFeatureOptions,
            categorySort=categorySort,
            orgConfig=orgConfig,
            uiAccess=uiAccess,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.category import Category
from chart_hop_python_sdk.model.category_sort import CategorySort
from chart_hop_python_sdk.model.comp_band import CompBand
from chart_hop_python_sdk.model.customer import Customer
from chart_hop_python_sdk.model.customer_details import CustomerDetails
from chart_hop_python_sdk.model.exchange_rate import ExchangeRate
from chart_hop_python_sdk.model.feature_access_option import FeatureAccessOption
from chart_hop_python_sdk.model.field import Field
from chart_hop_python_sdk.model.form import Form
from chart_hop_python_sdk.model.job import Job
from chart_hop_python_sdk.model.org import Org
from chart_hop_python_sdk.model.org_config import OrgConfig
from chart_hop_python_sdk.model.org_stock_data import OrgStockData
from chart_hop_python_sdk.model.person import Person
from chart_hop_python_sdk.model.preload_response_feature_access import PreloadResponseFeatureAccess
from chart_hop_python_sdk.model.preload_response_groups import PreloadResponseGroups
from chart_hop_python_sdk.model.preload_response_jobs import PreloadResponseJobs
from chart_hop_python_sdk.model.preload_response_ui_access import PreloadResponseUiAccess
from chart_hop_python_sdk.model.question import Question
from chart_hop_python_sdk.model.role import Role
from chart_hop_python_sdk.model.scenario import Scenario
from chart_hop_python_sdk.model.user import User
