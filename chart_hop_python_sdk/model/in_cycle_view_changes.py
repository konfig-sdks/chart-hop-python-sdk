# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class InCycleViewChanges(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "changeMap",
        }
        
        class properties:
        
            @staticmethod
            def changeMap() -> typing.Type['InCycleViewChangesChangeMap']:
                return InCycleViewChangesChangeMap
        
            @staticmethod
            def guidelinesMap() -> typing.Type['InCycleViewChangesGuidelinesMap']:
                return InCycleViewChangesGuidelinesMap
            __annotations__ = {
                "changeMap": changeMap,
                "guidelinesMap": guidelinesMap,
            }
    
    changeMap: 'InCycleViewChangesChangeMap'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeMap"]) -> 'InCycleViewChangesChangeMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guidelinesMap"]) -> 'InCycleViewChangesGuidelinesMap': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["changeMap", "guidelinesMap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeMap"]) -> 'InCycleViewChangesChangeMap': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guidelinesMap"]) -> typing.Union['InCycleViewChangesGuidelinesMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["changeMap", "guidelinesMap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        changeMap: 'InCycleViewChangesChangeMap',
        guidelinesMap: typing.Union['InCycleViewChangesGuidelinesMap', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InCycleViewChanges':
        return super().__new__(
            cls,
            *args,
            changeMap=changeMap,
            guidelinesMap=guidelinesMap,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.in_cycle_view_changes_change_map import InCycleViewChangesChangeMap
from chart_hop_python_sdk.model.in_cycle_view_changes_guidelines_map import InCycleViewChangesGuidelinesMap
