# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpdateApprovalChain(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            isPreview = schemas.BoolSchema
            fallbackApproverJobId = schemas.StrSchema
            fallbackApproverJobError = schemas.StrSchema
        
            @staticmethod
            def approvalNotifierUserIds() -> typing.Type['UpdateApprovalChainApprovalNotifierUserIds']:
                return UpdateApprovalChainApprovalNotifierUserIds
            __annotations__ = {
                "name": name,
                "isPreview": isPreview,
                "fallbackApproverJobId": fallbackApproverJobId,
                "fallbackApproverJobError": fallbackApproverJobError,
                "approvalNotifierUserIds": approvalNotifierUserIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPreview"]) -> MetaOapg.properties.isPreview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallbackApproverJobId"]) -> MetaOapg.properties.fallbackApproverJobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallbackApproverJobError"]) -> MetaOapg.properties.fallbackApproverJobError: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalNotifierUserIds"]) -> 'UpdateApprovalChainApprovalNotifierUserIds': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "isPreview", "fallbackApproverJobId", "fallbackApproverJobError", "approvalNotifierUserIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPreview"]) -> typing.Union[MetaOapg.properties.isPreview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallbackApproverJobId"]) -> typing.Union[MetaOapg.properties.fallbackApproverJobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallbackApproverJobError"]) -> typing.Union[MetaOapg.properties.fallbackApproverJobError, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalNotifierUserIds"]) -> typing.Union['UpdateApprovalChainApprovalNotifierUserIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "isPreview", "fallbackApproverJobId", "fallbackApproverJobError", "approvalNotifierUserIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        isPreview: typing.Union[MetaOapg.properties.isPreview, bool, schemas.Unset] = schemas.unset,
        fallbackApproverJobId: typing.Union[MetaOapg.properties.fallbackApproverJobId, str, schemas.Unset] = schemas.unset,
        fallbackApproverJobError: typing.Union[MetaOapg.properties.fallbackApproverJobError, str, schemas.Unset] = schemas.unset,
        approvalNotifierUserIds: typing.Union['UpdateApprovalChainApprovalNotifierUserIds', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateApprovalChain':
        return super().__new__(
            cls,
            *args,
            name=name,
            isPreview=isPreview,
            fallbackApproverJobId=fallbackApproverJobId,
            fallbackApproverJobError=fallbackApproverJobError,
            approvalNotifierUserIds=approvalNotifierUserIds,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.update_approval_chain_approval_notifier_user_ids import UpdateApprovalChainApprovalNotifierUserIds
