# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class FormRender(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rerenderQuestionIds",
            "responseSensitive",
            "blocks",
            "options",
            "id",
            "label",
        }
        
        class properties:
            id = schemas.StrSchema
            label = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['FormRenderOptions']:
                return FormRenderOptions
            
            
            class blocks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FormRenderBlock']:
                        return FormRenderBlock
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FormRenderBlock'], typing.List['FormRenderBlock']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'blocks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FormRenderBlock':
                    return super().__getitem__(i)
        
            @staticmethod
            def rerenderQuestionIds() -> typing.Type['FormRenderRerenderQuestionIds']:
                return FormRenderRerenderQuestionIds
            
            
            class responseSensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            
            
            class authorSensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANONYMOUS(cls):
                    return cls("ANONYMOUS")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
            __annotations__ = {
                "id": id,
                "label": label,
                "options": options,
                "blocks": blocks,
                "rerenderQuestionIds": rerenderQuestionIds,
                "responseSensitive": responseSensitive,
                "authorSensitive": authorSensitive,
            }
    
    rerenderQuestionIds: 'FormRenderRerenderQuestionIds'
    responseSensitive: MetaOapg.properties.responseSensitive
    blocks: MetaOapg.properties.blocks
    options: 'FormRenderOptions'
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'FormRenderOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocks"]) -> MetaOapg.properties.blocks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rerenderQuestionIds"]) -> 'FormRenderRerenderQuestionIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responseSensitive"]) -> MetaOapg.properties.responseSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorSensitive"]) -> MetaOapg.properties.authorSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "label", "options", "blocks", "rerenderQuestionIds", "responseSensitive", "authorSensitive", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> 'FormRenderOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocks"]) -> MetaOapg.properties.blocks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rerenderQuestionIds"]) -> 'FormRenderRerenderQuestionIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responseSensitive"]) -> MetaOapg.properties.responseSensitive: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorSensitive"]) -> typing.Union[MetaOapg.properties.authorSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "label", "options", "blocks", "rerenderQuestionIds", "responseSensitive", "authorSensitive", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rerenderQuestionIds: 'FormRenderRerenderQuestionIds',
        responseSensitive: typing.Union[MetaOapg.properties.responseSensitive, str, ],
        blocks: typing.Union[MetaOapg.properties.blocks, list, tuple, ],
        options: 'FormRenderOptions',
        id: typing.Union[MetaOapg.properties.id, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        authorSensitive: typing.Union[MetaOapg.properties.authorSensitive, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormRender':
        return super().__new__(
            cls,
            *args,
            rerenderQuestionIds=rerenderQuestionIds,
            responseSensitive=responseSensitive,
            blocks=blocks,
            options=options,
            id=id,
            label=label,
            authorSensitive=authorSensitive,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.form_render_block import FormRenderBlock
from chart_hop_python_sdk.model.form_render_options import FormRenderOptions
from chart_hop_python_sdk.model.form_render_rerender_question_ids import FormRenderRerenderQuestionIds
