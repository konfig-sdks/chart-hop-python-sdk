# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class VariableComp(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    variable compensation
Implementations: VariableCompPercent, VariableCompPercent
    """


    class MetaOapg:
        required = {
            "interval",
            "type",
        }
        
        @staticmethod
        def discriminator():
            return {
                'compType': {
                    'VariableCompAmount': VariableCompAmount,
                    'VariableCompPercent': VariableCompPercent,
                }
            }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BONUS": "BONUS",
                        "COMMISSION": "COMMISSION",
                    }
                
                @schemas.classproperty
                def BONUS(cls):
                    return cls("BONUS")
                
                @schemas.classproperty
                def COMMISSION(cls):
                    return cls("COMMISSION")
            
            
            class interval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "YEARLY": "YEARLY",
                    }
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("YEARLY")
            __annotations__ = {
                "type": type,
                "interval": interval,
            }
    
    interval: MetaOapg.properties.interval
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "interval", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "interval", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        interval: typing.Union[MetaOapg.properties.interval, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VariableComp':
        return super().__new__(
            cls,
            *args,
            interval=interval,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.variable_comp_amount import VariableCompAmount
from chart_hop_python_sdk.model.variable_comp_percent import VariableCompPercent
