# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class TaskFormSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "submitCount",
            "pendingCount",
            "peopleIncludedCount",
            "taskList",
            "approveCount",
            "skippedCount",
            "expiredCount",
        }
        
        class properties:
            submitCount = schemas.Int32Schema
            approveCount = schemas.Int32Schema
            pendingCount = schemas.Int32Schema
            skippedCount = schemas.Int32Schema
            expiredCount = schemas.Int32Schema
            peopleIncludedCount = schemas.Int32Schema
            
            
            class taskList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Task']:
                        return Task
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Task'], typing.List['Task']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taskList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Task':
                    return super().__getitem__(i)
            __annotations__ = {
                "submitCount": submitCount,
                "approveCount": approveCount,
                "pendingCount": pendingCount,
                "skippedCount": skippedCount,
                "expiredCount": expiredCount,
                "peopleIncludedCount": peopleIncludedCount,
                "taskList": taskList,
            }
    
    submitCount: MetaOapg.properties.submitCount
    pendingCount: MetaOapg.properties.pendingCount
    peopleIncludedCount: MetaOapg.properties.peopleIncludedCount
    taskList: MetaOapg.properties.taskList
    approveCount: MetaOapg.properties.approveCount
    skippedCount: MetaOapg.properties.skippedCount
    expiredCount: MetaOapg.properties.expiredCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitCount"]) -> MetaOapg.properties.submitCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approveCount"]) -> MetaOapg.properties.approveCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingCount"]) -> MetaOapg.properties.pendingCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skippedCount"]) -> MetaOapg.properties.skippedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiredCount"]) -> MetaOapg.properties.expiredCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["peopleIncludedCount"]) -> MetaOapg.properties.peopleIncludedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskList"]) -> MetaOapg.properties.taskList: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["submitCount", "approveCount", "pendingCount", "skippedCount", "expiredCount", "peopleIncludedCount", "taskList", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitCount"]) -> MetaOapg.properties.submitCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approveCount"]) -> MetaOapg.properties.approveCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingCount"]) -> MetaOapg.properties.pendingCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skippedCount"]) -> MetaOapg.properties.skippedCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiredCount"]) -> MetaOapg.properties.expiredCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["peopleIncludedCount"]) -> MetaOapg.properties.peopleIncludedCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskList"]) -> MetaOapg.properties.taskList: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["submitCount", "approveCount", "pendingCount", "skippedCount", "expiredCount", "peopleIncludedCount", "taskList", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        submitCount: typing.Union[MetaOapg.properties.submitCount, decimal.Decimal, int, ],
        pendingCount: typing.Union[MetaOapg.properties.pendingCount, decimal.Decimal, int, ],
        peopleIncludedCount: typing.Union[MetaOapg.properties.peopleIncludedCount, decimal.Decimal, int, ],
        taskList: typing.Union[MetaOapg.properties.taskList, list, tuple, ],
        approveCount: typing.Union[MetaOapg.properties.approveCount, decimal.Decimal, int, ],
        skippedCount: typing.Union[MetaOapg.properties.skippedCount, decimal.Decimal, int, ],
        expiredCount: typing.Union[MetaOapg.properties.expiredCount, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskFormSummary':
        return super().__new__(
            cls,
            *args,
            submitCount=submitCount,
            pendingCount=pendingCount,
            peopleIncludedCount=peopleIncludedCount,
            taskList=taskList,
            approveCount=approveCount,
            skippedCount=skippedCount,
            expiredCount=expiredCount,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.task import Task
