# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class NotificationJobData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            jobId = schemas.StrSchema
            jobUrl = schemas.StrSchema
            jobProfileUrl = schemas.StrSchema
            atsJobUrl = schemas.StrSchema
            atsJobId = schemas.StrSchema
            atsJobReq = schemas.StrSchema
            atsJobReqField = schemas.StrSchema
            openJobsUrl = schemas.StrSchema
            department = schemas.StrSchema
            location = schemas.StrSchema
            manager = schemas.StrSchema
            backfill = schemas.StrSchema
            hireMgr = schemas.StrSchema
            recruiter = schemas.StrSchema
            recruitPriority = schemas.StrSchema
            recruit = schemas.StrSchema
            sensitive = schemas.StrSchema
            startDate = schemas.DateSchema
            estStartDate = schemas.DateSchema
            announceDate = schemas.DateSchema
            hireName = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "jobId": jobId,
                "jobUrl": jobUrl,
                "jobProfileUrl": jobProfileUrl,
                "atsJobUrl": atsJobUrl,
                "atsJobId": atsJobId,
                "atsJobReq": atsJobReq,
                "atsJobReqField": atsJobReqField,
                "openJobsUrl": openJobsUrl,
                "department": department,
                "location": location,
                "manager": manager,
                "backfill": backfill,
                "hireMgr": hireMgr,
                "recruiter": recruiter,
                "recruitPriority": recruitPriority,
                "recruit": recruit,
                "sensitive": sensitive,
                "startDate": startDate,
                "estStartDate": estStartDate,
                "announceDate": announceDate,
                "hireName": hireName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobUrl"]) -> MetaOapg.properties.jobUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobProfileUrl"]) -> MetaOapg.properties.jobProfileUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsJobUrl"]) -> MetaOapg.properties.atsJobUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsJobId"]) -> MetaOapg.properties.atsJobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsJobReq"]) -> MetaOapg.properties.atsJobReq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsJobReqField"]) -> MetaOapg.properties.atsJobReqField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openJobsUrl"]) -> MetaOapg.properties.openJobsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manager"]) -> MetaOapg.properties.manager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backfill"]) -> MetaOapg.properties.backfill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireMgr"]) -> MetaOapg.properties.hireMgr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruiter"]) -> MetaOapg.properties.recruiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruitPriority"]) -> MetaOapg.properties.recruitPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruit"]) -> MetaOapg.properties.recruit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitive"]) -> MetaOapg.properties.sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estStartDate"]) -> MetaOapg.properties.estStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announceDate"]) -> MetaOapg.properties.announceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireName"]) -> MetaOapg.properties.hireName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "jobId", "jobUrl", "jobProfileUrl", "atsJobUrl", "atsJobId", "atsJobReq", "atsJobReqField", "openJobsUrl", "department", "location", "manager", "backfill", "hireMgr", "recruiter", "recruitPriority", "recruit", "sensitive", "startDate", "estStartDate", "announceDate", "hireName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobUrl"]) -> typing.Union[MetaOapg.properties.jobUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobProfileUrl"]) -> typing.Union[MetaOapg.properties.jobProfileUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsJobUrl"]) -> typing.Union[MetaOapg.properties.atsJobUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsJobId"]) -> typing.Union[MetaOapg.properties.atsJobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsJobReq"]) -> typing.Union[MetaOapg.properties.atsJobReq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsJobReqField"]) -> typing.Union[MetaOapg.properties.atsJobReqField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openJobsUrl"]) -> typing.Union[MetaOapg.properties.openJobsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manager"]) -> typing.Union[MetaOapg.properties.manager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backfill"]) -> typing.Union[MetaOapg.properties.backfill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireMgr"]) -> typing.Union[MetaOapg.properties.hireMgr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruiter"]) -> typing.Union[MetaOapg.properties.recruiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruitPriority"]) -> typing.Union[MetaOapg.properties.recruitPriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruit"]) -> typing.Union[MetaOapg.properties.recruit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitive"]) -> typing.Union[MetaOapg.properties.sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estStartDate"]) -> typing.Union[MetaOapg.properties.estStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announceDate"]) -> typing.Union[MetaOapg.properties.announceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireName"]) -> typing.Union[MetaOapg.properties.hireName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "jobId", "jobUrl", "jobProfileUrl", "atsJobUrl", "atsJobId", "atsJobReq", "atsJobReqField", "openJobsUrl", "department", "location", "manager", "backfill", "hireMgr", "recruiter", "recruitPriority", "recruit", "sensitive", "startDate", "estStartDate", "announceDate", "hireName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
        jobUrl: typing.Union[MetaOapg.properties.jobUrl, str, schemas.Unset] = schemas.unset,
        jobProfileUrl: typing.Union[MetaOapg.properties.jobProfileUrl, str, schemas.Unset] = schemas.unset,
        atsJobUrl: typing.Union[MetaOapg.properties.atsJobUrl, str, schemas.Unset] = schemas.unset,
        atsJobId: typing.Union[MetaOapg.properties.atsJobId, str, schemas.Unset] = schemas.unset,
        atsJobReq: typing.Union[MetaOapg.properties.atsJobReq, str, schemas.Unset] = schemas.unset,
        atsJobReqField: typing.Union[MetaOapg.properties.atsJobReqField, str, schemas.Unset] = schemas.unset,
        openJobsUrl: typing.Union[MetaOapg.properties.openJobsUrl, str, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        manager: typing.Union[MetaOapg.properties.manager, str, schemas.Unset] = schemas.unset,
        backfill: typing.Union[MetaOapg.properties.backfill, str, schemas.Unset] = schemas.unset,
        hireMgr: typing.Union[MetaOapg.properties.hireMgr, str, schemas.Unset] = schemas.unset,
        recruiter: typing.Union[MetaOapg.properties.recruiter, str, schemas.Unset] = schemas.unset,
        recruitPriority: typing.Union[MetaOapg.properties.recruitPriority, str, schemas.Unset] = schemas.unset,
        recruit: typing.Union[MetaOapg.properties.recruit, str, schemas.Unset] = schemas.unset,
        sensitive: typing.Union[MetaOapg.properties.sensitive, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        estStartDate: typing.Union[MetaOapg.properties.estStartDate, str, date, schemas.Unset] = schemas.unset,
        announceDate: typing.Union[MetaOapg.properties.announceDate, str, date, schemas.Unset] = schemas.unset,
        hireName: typing.Union[MetaOapg.properties.hireName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationJobData':
        return super().__new__(
            cls,
            *args,
            title=title,
            jobId=jobId,
            jobUrl=jobUrl,
            jobProfileUrl=jobProfileUrl,
            atsJobUrl=atsJobUrl,
            atsJobId=atsJobId,
            atsJobReq=atsJobReq,
            atsJobReqField=atsJobReqField,
            openJobsUrl=openJobsUrl,
            department=department,
            location=location,
            manager=manager,
            backfill=backfill,
            hireMgr=hireMgr,
            recruiter=recruiter,
            recruitPriority=recruitPriority,
            recruit=recruit,
            sensitive=sensitive,
            startDate=startDate,
            estStartDate=estStartDate,
            announceDate=announceDate,
            hireName=hireName,
            _configuration=_configuration,
            **kwargs,
        )
