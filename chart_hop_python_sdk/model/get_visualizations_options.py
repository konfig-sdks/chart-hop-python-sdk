# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GetVisualizationsOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "isCollabicientView",
        }
        
        class properties:
            isCollabicientView = schemas.BoolSchema
        
            @staticmethod
            def changeIds() -> typing.Type['GetVisualizationsOptionsChangeIds']:
                return GetVisualizationsOptionsChangeIds
            viewInCurrency = schemas.StrSchema
            includeCollaborators = schemas.BoolSchema
            __annotations__ = {
                "isCollabicientView": isCollabicientView,
                "changeIds": changeIds,
                "viewInCurrency": viewInCurrency,
                "includeCollaborators": includeCollaborators,
            }
    
    isCollabicientView: MetaOapg.properties.isCollabicientView
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCollabicientView"]) -> MetaOapg.properties.isCollabicientView: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeIds"]) -> 'GetVisualizationsOptionsChangeIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewInCurrency"]) -> MetaOapg.properties.viewInCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeCollaborators"]) -> MetaOapg.properties.includeCollaborators: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isCollabicientView", "changeIds", "viewInCurrency", "includeCollaborators", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCollabicientView"]) -> MetaOapg.properties.isCollabicientView: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeIds"]) -> typing.Union['GetVisualizationsOptionsChangeIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewInCurrency"]) -> typing.Union[MetaOapg.properties.viewInCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeCollaborators"]) -> typing.Union[MetaOapg.properties.includeCollaborators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isCollabicientView", "changeIds", "viewInCurrency", "includeCollaborators", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isCollabicientView: typing.Union[MetaOapg.properties.isCollabicientView, bool, ],
        changeIds: typing.Union['GetVisualizationsOptionsChangeIds', schemas.Unset] = schemas.unset,
        viewInCurrency: typing.Union[MetaOapg.properties.viewInCurrency, str, schemas.Unset] = schemas.unset,
        includeCollaborators: typing.Union[MetaOapg.properties.includeCollaborators, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetVisualizationsOptions':
        return super().__new__(
            cls,
            *args,
            isCollabicientView=isCollabicientView,
            changeIds=changeIds,
            viewInCurrency=viewInCurrency,
            includeCollaborators=includeCollaborators,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.get_visualizations_options_change_ids import GetVisualizationsOptionsChangeIds
