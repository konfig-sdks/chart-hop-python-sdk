# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ApprovalRequestCompReviewResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "approvalChainId",
            "stageOverrides",
            "entityType",
            "entityId",
            "id",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CANCELED": "CANCELED",
                        "REJECTED": "REJECTED",
                        "PENDING": "PENDING",
                        "ACTIVE": "ACTIVE",
                        "REVIEWED": "REVIEWED",
                        "APPROVED": "APPROVED",
                        "SKIPPED": "SKIPPED",
                        "SUBMITTED": "SUBMITTED",
                    }
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("CANCELED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def REVIEWED(cls):
                    return cls("REVIEWED")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("APPROVED")
                
                @schemas.classproperty
                def SKIPPED(cls):
                    return cls("SKIPPED")
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("SUBMITTED")
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "COMP_REVIEW": "COMP_REVIEW",
                        "SCENARIO": "SCENARIO",
                        "TIMEOFF": "TIMEOFF",
                    }
                
                @schemas.classproperty
                def COMP_REVIEW(cls):
                    return cls("COMP_REVIEW")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
            entityId = schemas.StrSchema
            approvalChainId = schemas.StrSchema
            
            
            class stageOverrides(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApprovalChainStageOverride']:
                        return ApprovalChainStageOverride
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApprovalChainStageOverride'], typing.List['ApprovalChainStageOverride']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stageOverrides':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApprovalChainStageOverride':
                    return super().__getitem__(i)
            
            
            class parentStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CANCELED": "CANCELED",
                        "REJECTED": "REJECTED",
                        "PENDING": "PENDING",
                        "ACTIVE": "ACTIVE",
                        "REVIEWED": "REVIEWED",
                        "APPROVED": "APPROVED",
                        "SKIPPED": "SKIPPED",
                        "SUBMITTED": "SUBMITTED",
                    }
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("CANCELED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def REVIEWED(cls):
                    return cls("REVIEWED")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("APPROVED")
                
                @schemas.classproperty
                def SKIPPED(cls):
                    return cls("SKIPPED")
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("SUBMITTED")
            isFullySubmitted = schemas.BoolSchema
            createId = schemas.StrSchema
            createAt = schemas.Int64Schema
            updateId = schemas.StrSchema
            updateAt = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "status": status,
                "entityType": entityType,
                "entityId": entityId,
                "approvalChainId": approvalChainId,
                "stageOverrides": stageOverrides,
                "parentStatus": parentStatus,
                "isFullySubmitted": isFullySubmitted,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
            }
    
    approvalChainId: MetaOapg.properties.approvalChainId
    stageOverrides: MetaOapg.properties.stageOverrides
    entityType: MetaOapg.properties.entityType
    entityId: MetaOapg.properties.entityId
    id: MetaOapg.properties.id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stageOverrides"]) -> MetaOapg.properties.stageOverrides: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentStatus"]) -> MetaOapg.properties.parentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFullySubmitted"]) -> MetaOapg.properties.isFullySubmitted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "entityType", "entityId", "approvalChainId", "stageOverrides", "parentStatus", "isFullySubmitted", "createId", "createAt", "updateId", "updateAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stageOverrides"]) -> MetaOapg.properties.stageOverrides: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentStatus"]) -> typing.Union[MetaOapg.properties.parentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFullySubmitted"]) -> typing.Union[MetaOapg.properties.isFullySubmitted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> typing.Union[MetaOapg.properties.updateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> typing.Union[MetaOapg.properties.updateAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "entityType", "entityId", "approvalChainId", "stageOverrides", "parentStatus", "isFullySubmitted", "createId", "createAt", "updateId", "updateAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approvalChainId: typing.Union[MetaOapg.properties.approvalChainId, str, ],
        stageOverrides: typing.Union[MetaOapg.properties.stageOverrides, list, tuple, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        parentStatus: typing.Union[MetaOapg.properties.parentStatus, str, schemas.Unset] = schemas.unset,
        isFullySubmitted: typing.Union[MetaOapg.properties.isFullySubmitted, bool, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updateId: typing.Union[MetaOapg.properties.updateId, str, schemas.Unset] = schemas.unset,
        updateAt: typing.Union[MetaOapg.properties.updateAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApprovalRequestCompReviewResponse':
        return super().__new__(
            cls,
            *args,
            approvalChainId=approvalChainId,
            stageOverrides=stageOverrides,
            entityType=entityType,
            entityId=entityId,
            id=id,
            status=status,
            parentStatus=parentStatus,
            isFullySubmitted=isFullySubmitted,
            createId=createId,
            createAt=createAt,
            updateId=updateId,
            updateAt=updateAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.approval_chain_stage_override import ApprovalChainStageOverride
