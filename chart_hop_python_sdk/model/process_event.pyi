# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ProcessEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "at",
            "type",
            "updates",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HIRE(cls):
                    return cls("HIRE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def CREATE_PERSON(cls):
                    return cls("CREATE_PERSON")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def INBOUND(cls):
                    return cls("INBOUND")
                
                @schemas.classproperty
                def CHANGE(cls):
                    return cls("CHANGE")
                
                @schemas.classproperty
                def OUTBOUND_CREATE(cls):
                    return cls("OUTBOUND_CREATE")
                
                @schemas.classproperty
                def OUTBOUND_UPDATE(cls):
                    return cls("OUTBOUND_UPDATE")
                
                @schemas.classproperty
                def OUTBOUND_DELETE(cls):
                    return cls("OUTBOUND_DELETE")
                
                @schemas.classproperty
                def INITIATING_CREATE(cls):
                    return cls("INITIATING_CREATE")
                
                @schemas.classproperty
                def INITIATING_UPDATE(cls):
                    return cls("INITIATING_UPDATE")
                
                @schemas.classproperty
                def INITIATING_DELETE(cls):
                    return cls("INITIATING_DELETE")
            
            
            class updates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProcessEventUpdate']:
                        return ProcessEventUpdate
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProcessEventUpdate'], typing.List['ProcessEventUpdate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProcessEventUpdate':
                    return super().__getitem__(i)
            at = schemas.Int64Schema
            id = schemas.StrSchema
        
            @staticmethod
            def entityData() -> typing.Type['ProcessEventEntityData']:
                return ProcessEventEntityData
            __annotations__ = {
                "type": type,
                "updates": updates,
                "at": at,
                "id": id,
                "entityData": entityData,
            }
    
    at: MetaOapg.properties.at
    type: MetaOapg.properties.type
    updates: MetaOapg.properties.updates
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updates"]) -> MetaOapg.properties.updates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityData"]) -> 'ProcessEventEntityData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "updates", "at", "id", "entityData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updates"]) -> MetaOapg.properties.updates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityData"]) -> typing.Union['ProcessEventEntityData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "updates", "at", "id", "entityData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        at: typing.Union[MetaOapg.properties.at, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        updates: typing.Union[MetaOapg.properties.updates, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        entityData: typing.Union['ProcessEventEntityData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessEvent':
        return super().__new__(
            cls,
            *args,
            at=at,
            type=type,
            updates=updates,
            id=id,
            entityData=entityData,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.process_event_entity_data import ProcessEventEntityData
from chart_hop_python_sdk.model.process_event_update import ProcessEventUpdate
