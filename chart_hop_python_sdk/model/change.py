# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Change(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "jobId",
            "id",
            "type",
            "orgId",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            jobId = schemas.StrSchema
            orgId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HIRE": "HIRE",
                        "DEPART": "DEPART",
                        "MOVE": "MOVE",
                        "UPCOMING": "UPCOMING",
                        "CREATE": "CREATE",
                        "UPDATE": "UPDATE",
                        "DATA": "DATA",
                        "DELETE": "DELETE",
                        "RELATE": "RELATE",
                        "BACKFILL": "BACKFILL",
                    }
                
                @schemas.classproperty
                def HIRE(cls):
                    return cls("HIRE")
                
                @schemas.classproperty
                def DEPART(cls):
                    return cls("DEPART")
                
                @schemas.classproperty
                def MOVE(cls):
                    return cls("MOVE")
                
                @schemas.classproperty
                def UPCOMING(cls):
                    return cls("UPCOMING")
                
                @schemas.classproperty
                def CREATE(cls):
                    return cls("CREATE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def DATA(cls):
                    return cls("DATA")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
                
                @schemas.classproperty
                def RELATE(cls):
                    return cls("RELATE")
                
                @schemas.classproperty
                def BACKFILL(cls):
                    return cls("BACKFILL")
            date = schemas.DateSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTIVE": "ACTIVE",
                        "STRUCK": "STRUCK",
                        "CONFLICT": "CONFLICT",
                        "INACTIVE": "INACTIVE",
                        "PROPOSED": "PROPOSED",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def STRUCK(cls):
                    return cls("STRUCK")
                
                @schemas.classproperty
                def CONFLICT(cls):
                    return cls("CONFLICT")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
                
                @schemas.classproperty
                def PROPOSED(cls):
                    return cls("PROPOSED")
            scenarioId = schemas.StrSchema
            mergeScenarioId = schemas.StrSchema
            parentChangeId = schemas.StrSchema
            priorStateChangeId = schemas.StrSchema
            sort = schemas.Int64Schema
            announceDate = schemas.DateSchema
            personId = schemas.StrSchema
            otherJobId = schemas.StrSchema
            otherPersonId = schemas.StrSchema
            
            
            class departType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VOLUNTARY": "VOLUNTARY",
                        "INVOLUNTARY": "INVOLUNTARY",
                    }
                
                @schemas.classproperty
                def VOLUNTARY(cls):
                    return cls("VOLUNTARY")
                
                @schemas.classproperty
                def INVOLUNTARY(cls):
                    return cls("INVOLUNTARY")
            
            
            class departRegret(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "REGRET": "REGRET",
                        "NONREGRET": "NONREGRET",
                    }
                
                @schemas.classproperty
                def REGRET(cls):
                    return cls("REGRET")
                
                @schemas.classproperty
                def NONREGRET(cls):
                    return cls("NONREGRET")
            
            
            class promotionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROMOTION": "PROMOTION",
                        "DEMOTION": "DEMOTION",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def PROMOTION(cls):
                    return cls("PROMOTION")
                
                @schemas.classproperty
                def DEMOTION(cls):
                    return cls("DEMOTION")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
            reason = schemas.StrSchema
            
            
            class relateType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MANAGER": "MANAGER",
                        "DIRECT": "DIRECT",
                        "INDIRECT_MANAGER": "INDIRECT_MANAGER",
                        "INDIRECT": "INDIRECT",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def INDIRECT_MANAGER(cls):
                    return cls("INDIRECT_MANAGER")
                
                @schemas.classproperty
                def INDIRECT(cls):
                    return cls("INDIRECT")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
        
            @staticmethod
            def refs() -> typing.Type['ChangeRefs']:
                return ChangeRefs
        
            @staticmethod
            def job() -> typing.Type['PartialJob']:
                return PartialJob
        
            @staticmethod
            def otherJob() -> typing.Type['PartialJob']:
                return PartialJob
            formId = schemas.StrSchema
            assessmentId = schemas.StrSchema
        
            @staticmethod
            def update() -> typing.Type['JobUpdate']:
                return JobUpdate
        
            @staticmethod
            def items() -> typing.Type['UpcomingChange']:
                return UpcomingChange
            conflict = schemas.StrSchema
            note = schemas.StrSchema
            createId = schemas.StrSchema
            mergeId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateAt = schemas.StrSchema
            updateId = schemas.StrSchema
            statusAt = schemas.StrSchema
            approvalAt = schemas.StrSchema
            approvalId = schemas.StrSchema
            approvalNote = schemas.StrSchema
            
            
            class approval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MANAGER": "MANAGER",
                        "GRAND_MANAGER": "GRAND_MANAGER",
                    }
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
            
            
            class authorSensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "GLOBAL": "GLOBAL",
                        "ORG": "ORG",
                        "ORG_OTHER": "ORG_OTHER",
                        "PERSONAL_DEMOG": "PERSONAL_DEMOG",
                        "PERSONAL_BIRTH": "PERSONAL_BIRTH",
                        "PERSONAL_CONTACT": "PERSONAL_CONTACT",
                        "PERSONAL_PRIVATE": "PERSONAL_PRIVATE",
                        "SENSITIVE_BIRTH": "SENSITIVE_BIRTH",
                        "SENSITIVE_CONTACT": "SENSITIVE_CONTACT",
                        "TIMEOFF": "TIMEOFF",
                        "COMP_CASH": "COMP_CASH",
                        "COMP_EQUITY": "COMP_EQUITY",
                        "SENSITIVE": "SENSITIVE",
                        "PERSONAL": "PERSONAL",
                        "MANAGER": "MANAGER",
                        "GRAND_MANAGER": "GRAND_MANAGER",
                        "DIRECT": "DIRECT",
                        "PEERS": "PEERS",
                        "HIGH": "HIGH",
                        "PRIVATE": "PRIVATE",
                    }
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            canEdit = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "jobId": jobId,
                "orgId": orgId,
                "type": type,
                "date": date,
                "status": status,
                "scenarioId": scenarioId,
                "mergeScenarioId": mergeScenarioId,
                "parentChangeId": parentChangeId,
                "priorStateChangeId": priorStateChangeId,
                "sort": sort,
                "announceDate": announceDate,
                "personId": personId,
                "otherJobId": otherJobId,
                "otherPersonId": otherPersonId,
                "departType": departType,
                "departRegret": departRegret,
                "promotionType": promotionType,
                "reason": reason,
                "relateType": relateType,
                "refs": refs,
                "job": job,
                "otherJob": otherJob,
                "formId": formId,
                "assessmentId": assessmentId,
                "update": update,
                "items": items,
                "conflict": conflict,
                "note": note,
                "createId": createId,
                "mergeId": mergeId,
                "createAt": createAt,
                "updateAt": updateAt,
                "updateId": updateId,
                "statusAt": statusAt,
                "approvalAt": approvalAt,
                "approvalId": approvalId,
                "approvalNote": approvalNote,
                "approval": approval,
                "authorSensitive": authorSensitive,
                "canEdit": canEdit,
            }
    
    date: MetaOapg.properties.date
    jobId: MetaOapg.properties.jobId
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    orgId: MetaOapg.properties.orgId
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergeScenarioId"]) -> MetaOapg.properties.mergeScenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentChangeId"]) -> MetaOapg.properties.parentChangeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorStateChangeId"]) -> MetaOapg.properties.priorStateChangeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announceDate"]) -> MetaOapg.properties.announceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherJobId"]) -> MetaOapg.properties.otherJobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPersonId"]) -> MetaOapg.properties.otherPersonId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departType"]) -> MetaOapg.properties.departType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departRegret"]) -> MetaOapg.properties.departRegret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promotionType"]) -> MetaOapg.properties.promotionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relateType"]) -> MetaOapg.properties.relateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refs"]) -> 'ChangeRefs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'PartialJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherJob"]) -> 'PartialJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessmentId"]) -> MetaOapg.properties.assessmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update"]) -> 'JobUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'UpcomingChange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conflict"]) -> MetaOapg.properties.conflict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergeId"]) -> MetaOapg.properties.mergeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusAt"]) -> MetaOapg.properties.statusAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalAt"]) -> MetaOapg.properties.approvalAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalId"]) -> MetaOapg.properties.approvalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalNote"]) -> MetaOapg.properties.approvalNote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval"]) -> MetaOapg.properties.approval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorSensitive"]) -> MetaOapg.properties.authorSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canEdit"]) -> MetaOapg.properties.canEdit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "jobId", "orgId", "type", "date", "status", "scenarioId", "mergeScenarioId", "parentChangeId", "priorStateChangeId", "sort", "announceDate", "personId", "otherJobId", "otherPersonId", "departType", "departRegret", "promotionType", "reason", "relateType", "refs", "job", "otherJob", "formId", "assessmentId", "update", "items", "conflict", "note", "createId", "mergeId", "createAt", "updateAt", "updateId", "statusAt", "approvalAt", "approvalId", "approvalNote", "approval", "authorSensitive", "canEdit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergeScenarioId"]) -> typing.Union[MetaOapg.properties.mergeScenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentChangeId"]) -> typing.Union[MetaOapg.properties.parentChangeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorStateChangeId"]) -> typing.Union[MetaOapg.properties.priorStateChangeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> typing.Union[MetaOapg.properties.sort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announceDate"]) -> typing.Union[MetaOapg.properties.announceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherJobId"]) -> typing.Union[MetaOapg.properties.otherJobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPersonId"]) -> typing.Union[MetaOapg.properties.otherPersonId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departType"]) -> typing.Union[MetaOapg.properties.departType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departRegret"]) -> typing.Union[MetaOapg.properties.departRegret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promotionType"]) -> typing.Union[MetaOapg.properties.promotionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relateType"]) -> typing.Union[MetaOapg.properties.relateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refs"]) -> typing.Union['ChangeRefs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['PartialJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherJob"]) -> typing.Union['PartialJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formId"]) -> typing.Union[MetaOapg.properties.formId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessmentId"]) -> typing.Union[MetaOapg.properties.assessmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update"]) -> typing.Union['JobUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['UpcomingChange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conflict"]) -> typing.Union[MetaOapg.properties.conflict, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergeId"]) -> typing.Union[MetaOapg.properties.mergeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> typing.Union[MetaOapg.properties.updateAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> typing.Union[MetaOapg.properties.updateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusAt"]) -> typing.Union[MetaOapg.properties.statusAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalAt"]) -> typing.Union[MetaOapg.properties.approvalAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalId"]) -> typing.Union[MetaOapg.properties.approvalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalNote"]) -> typing.Union[MetaOapg.properties.approvalNote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval"]) -> typing.Union[MetaOapg.properties.approval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorSensitive"]) -> typing.Union[MetaOapg.properties.authorSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canEdit"]) -> typing.Union[MetaOapg.properties.canEdit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "jobId", "orgId", "type", "date", "status", "scenarioId", "mergeScenarioId", "parentChangeId", "priorStateChangeId", "sort", "announceDate", "personId", "otherJobId", "otherPersonId", "departType", "departRegret", "promotionType", "reason", "relateType", "refs", "job", "otherJob", "formId", "assessmentId", "update", "items", "conflict", "note", "createId", "mergeId", "createAt", "updateAt", "updateId", "statusAt", "approvalAt", "approvalId", "approvalNote", "approval", "authorSensitive", "canEdit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        mergeScenarioId: typing.Union[MetaOapg.properties.mergeScenarioId, str, schemas.Unset] = schemas.unset,
        parentChangeId: typing.Union[MetaOapg.properties.parentChangeId, str, schemas.Unset] = schemas.unset,
        priorStateChangeId: typing.Union[MetaOapg.properties.priorStateChangeId, str, schemas.Unset] = schemas.unset,
        sort: typing.Union[MetaOapg.properties.sort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        announceDate: typing.Union[MetaOapg.properties.announceDate, str, date, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        otherJobId: typing.Union[MetaOapg.properties.otherJobId, str, schemas.Unset] = schemas.unset,
        otherPersonId: typing.Union[MetaOapg.properties.otherPersonId, str, schemas.Unset] = schemas.unset,
        departType: typing.Union[MetaOapg.properties.departType, str, schemas.Unset] = schemas.unset,
        departRegret: typing.Union[MetaOapg.properties.departRegret, str, schemas.Unset] = schemas.unset,
        promotionType: typing.Union[MetaOapg.properties.promotionType, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        relateType: typing.Union[MetaOapg.properties.relateType, str, schemas.Unset] = schemas.unset,
        refs: typing.Union['ChangeRefs', schemas.Unset] = schemas.unset,
        job: typing.Union['PartialJob', schemas.Unset] = schemas.unset,
        otherJob: typing.Union['PartialJob', schemas.Unset] = schemas.unset,
        formId: typing.Union[MetaOapg.properties.formId, str, schemas.Unset] = schemas.unset,
        assessmentId: typing.Union[MetaOapg.properties.assessmentId, str, schemas.Unset] = schemas.unset,
        update: typing.Union['JobUpdate', schemas.Unset] = schemas.unset,
        items: typing.Union['UpcomingChange', schemas.Unset] = schemas.unset,
        conflict: typing.Union[MetaOapg.properties.conflict, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        mergeId: typing.Union[MetaOapg.properties.mergeId, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, str, schemas.Unset] = schemas.unset,
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, schemas.Unset] = schemas.unset,
        updateId: typing.Union[MetaOapg.properties.updateId, str, schemas.Unset] = schemas.unset,
        statusAt: typing.Union[MetaOapg.properties.statusAt, str, schemas.Unset] = schemas.unset,
        approvalAt: typing.Union[MetaOapg.properties.approvalAt, str, schemas.Unset] = schemas.unset,
        approvalId: typing.Union[MetaOapg.properties.approvalId, str, schemas.Unset] = schemas.unset,
        approvalNote: typing.Union[MetaOapg.properties.approvalNote, str, schemas.Unset] = schemas.unset,
        approval: typing.Union[MetaOapg.properties.approval, str, schemas.Unset] = schemas.unset,
        authorSensitive: typing.Union[MetaOapg.properties.authorSensitive, str, schemas.Unset] = schemas.unset,
        canEdit: typing.Union[MetaOapg.properties.canEdit, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Change':
        return super().__new__(
            cls,
            *args,
            date=date,
            jobId=jobId,
            id=id,
            type=type,
            orgId=orgId,
            status=status,
            scenarioId=scenarioId,
            mergeScenarioId=mergeScenarioId,
            parentChangeId=parentChangeId,
            priorStateChangeId=priorStateChangeId,
            sort=sort,
            announceDate=announceDate,
            personId=personId,
            otherJobId=otherJobId,
            otherPersonId=otherPersonId,
            departType=departType,
            departRegret=departRegret,
            promotionType=promotionType,
            reason=reason,
            relateType=relateType,
            refs=refs,
            job=job,
            otherJob=otherJob,
            formId=formId,
            assessmentId=assessmentId,
            update=update,
            items=items,
            conflict=conflict,
            note=note,
            createId=createId,
            mergeId=mergeId,
            createAt=createAt,
            updateAt=updateAt,
            updateId=updateId,
            statusAt=statusAt,
            approvalAt=approvalAt,
            approvalId=approvalId,
            approvalNote=approvalNote,
            approval=approval,
            authorSensitive=authorSensitive,
            canEdit=canEdit,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.change_refs import ChangeRefs
from chart_hop_python_sdk.model.job_update import JobUpdate
from chart_hop_python_sdk.model.partial_job import PartialJob
from chart_hop_python_sdk.model.upcoming_change import UpcomingChange
