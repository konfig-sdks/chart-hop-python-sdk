# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class BudgetCalculation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "pools",
            "allocated",
        }
        
        class properties:
            allocated = schemas.DictSchema
            
            
            class pools(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PoolCalculation']:
                        return PoolCalculation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PoolCalculation'], typing.List['PoolCalculation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pools':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PoolCalculation':
                    return super().__getitem__(i)
            used = schemas.DictSchema
        
            @staticmethod
            def jobBudgetMap() -> typing.Type['BudgetCalculationJobBudgetMap']:
                return BudgetCalculationJobBudgetMap
            __annotations__ = {
                "allocated": allocated,
                "pools": pools,
                "used": used,
                "jobBudgetMap": jobBudgetMap,
            }
    
    pools: MetaOapg.properties.pools
    allocated: MetaOapg.properties.allocated
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated"]) -> MetaOapg.properties.allocated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pools"]) -> MetaOapg.properties.pools: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["used"]) -> MetaOapg.properties.used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobBudgetMap"]) -> 'BudgetCalculationJobBudgetMap': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allocated", "pools", "used", "jobBudgetMap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated"]) -> MetaOapg.properties.allocated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pools"]) -> MetaOapg.properties.pools: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["used"]) -> typing.Union[MetaOapg.properties.used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobBudgetMap"]) -> typing.Union['BudgetCalculationJobBudgetMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allocated", "pools", "used", "jobBudgetMap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pools: typing.Union[MetaOapg.properties.pools, list, tuple, ],
        allocated: typing.Union[MetaOapg.properties.allocated, dict, frozendict.frozendict, ],
        used: typing.Union[MetaOapg.properties.used, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        jobBudgetMap: typing.Union['BudgetCalculationJobBudgetMap', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BudgetCalculation':
        return super().__new__(
            cls,
            *args,
            pools=pools,
            allocated=allocated,
            used=used,
            jobBudgetMap=jobBudgetMap,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.budget_calculation_job_budget_map import BudgetCalculationJobBudgetMap
from chart_hop_python_sdk.model.pool_calculation import PoolCalculation
