# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ExportField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "dataType",
            "inUse",
            "name",
            "appliesTo",
            "dated",
            "label",
            "sensitivity",
            "category",
        }
        
        class properties:
            label = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            dataType = schemas.StrSchema
            appliesTo = schemas.StrSchema
            dated = schemas.StrSchema
            sensitivity = schemas.StrSchema
            category = schemas.StrSchema
            inUse = schemas.StrSchema
            __annotations__ = {
                "label": label,
                "name": name,
                "dataType": dataType,
                "appliesTo": appliesTo,
                "dated": dated,
                "sensitivity": sensitivity,
                "category": category,
                "inUse": inUse,
            }
    
    dataType: MetaOapg.properties.dataType
    inUse: MetaOapg.properties.inUse
    name: MetaOapg.properties.name
    appliesTo: MetaOapg.properties.appliesTo
    dated: MetaOapg.properties.dated
    label: MetaOapg.properties.label
    sensitivity: MetaOapg.properties.sensitivity
    category: MetaOapg.properties.category
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliesTo"]) -> MetaOapg.properties.appliesTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dated"]) -> MetaOapg.properties.dated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitivity"]) -> MetaOapg.properties.sensitivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inUse"]) -> MetaOapg.properties.inUse: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "name", "dataType", "appliesTo", "dated", "sensitivity", "category", "inUse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliesTo"]) -> MetaOapg.properties.appliesTo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dated"]) -> MetaOapg.properties.dated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitivity"]) -> MetaOapg.properties.sensitivity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inUse"]) -> MetaOapg.properties.inUse: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "name", "dataType", "appliesTo", "dated", "sensitivity", "category", "inUse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataType: typing.Union[MetaOapg.properties.dataType, str, ],
        inUse: typing.Union[MetaOapg.properties.inUse, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        appliesTo: typing.Union[MetaOapg.properties.appliesTo, str, ],
        dated: typing.Union[MetaOapg.properties.dated, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        sensitivity: typing.Union[MetaOapg.properties.sensitivity, str, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExportField':
        return super().__new__(
            cls,
            *args,
            dataType=dataType,
            inUse=inUse,
            name=name,
            appliesTo=appliesTo,
            dated=dated,
            label=label,
            sensitivity=sensitivity,
            category=category,
            _configuration=_configuration,
            **kwargs,
        )
