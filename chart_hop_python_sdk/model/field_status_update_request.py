# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class FieldStatusUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "reservedFieldNames",
            "updateStatus",
            "fieldIds",
        }
        
        class properties:
            
            
            class updateStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTIVE": "ACTIVE",
                        "HIDDEN": "HIDDEN",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def HIDDEN(cls):
                    return cls("HIDDEN")
        
            @staticmethod
            def fieldIds() -> typing.Type['FieldStatusUpdateRequestFieldIds']:
                return FieldStatusUpdateRequestFieldIds
        
            @staticmethod
            def reservedFieldNames() -> typing.Type['FieldStatusUpdateRequestReservedFieldNames']:
                return FieldStatusUpdateRequestReservedFieldNames
            __annotations__ = {
                "updateStatus": updateStatus,
                "fieldIds": fieldIds,
                "reservedFieldNames": reservedFieldNames,
            }
    
    reservedFieldNames: 'FieldStatusUpdateRequestReservedFieldNames'
    updateStatus: MetaOapg.properties.updateStatus
    fieldIds: 'FieldStatusUpdateRequestFieldIds'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateStatus"]) -> MetaOapg.properties.updateStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldIds"]) -> 'FieldStatusUpdateRequestFieldIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reservedFieldNames"]) -> 'FieldStatusUpdateRequestReservedFieldNames': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["updateStatus", "fieldIds", "reservedFieldNames", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateStatus"]) -> MetaOapg.properties.updateStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldIds"]) -> 'FieldStatusUpdateRequestFieldIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reservedFieldNames"]) -> 'FieldStatusUpdateRequestReservedFieldNames': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["updateStatus", "fieldIds", "reservedFieldNames", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reservedFieldNames: 'FieldStatusUpdateRequestReservedFieldNames',
        updateStatus: typing.Union[MetaOapg.properties.updateStatus, str, ],
        fieldIds: 'FieldStatusUpdateRequestFieldIds',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FieldStatusUpdateRequest':
        return super().__new__(
            cls,
            *args,
            reservedFieldNames=reservedFieldNames,
            updateStatus=updateStatus,
            fieldIds=fieldIds,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.field_status_update_request_field_ids import FieldStatusUpdateRequestFieldIds
from chart_hop_python_sdk.model.field_status_update_request_reserved_field_names import FieldStatusUpdateRequestReservedFieldNames
