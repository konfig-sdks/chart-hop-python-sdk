# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompBand(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "color",
            "baseInterval",
            "id",
            "label",
            "orgId",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            label = schemas.StrSchema
            color = schemas.StrSchema
        
            @staticmethod
            def baseInterval() -> typing.Type['EnumValue']:
                return EnumValue
        
            @staticmethod
            def baseCompMax() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def baseCompMid() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def baseCompMin() -> typing.Type['Money']:
                return Money
            baseSpread = schemas.NumberSchema
        
            @staticmethod
            def baseTargetPay() -> typing.Type['Money']:
                return Money
            baseTargetPayPercentile = schemas.NumberSchema
        
            @staticmethod
            def jobTierOneField() -> typing.Type['JobTierField']:
                return JobTierField
        
            @staticmethod
            def jobTierTwoField() -> typing.Type['JobTierField']:
                return JobTierField
        
            @staticmethod
            def jobTierThreeField() -> typing.Type['JobTierField']:
                return JobTierField
        
            @staticmethod
            def jobLevel() -> typing.Type['TableRowRef']:
                return TableRowRef
            equityTargetShares = schemas.NumberSchema
            equityTargetPercentOfBase = schemas.NumberSchema
            equityTargetValue = schemas.NumberSchema
        
            @staticmethod
            def variableValue() -> typing.Type['Money']:
                return Money
            variablePercentOfBase = schemas.NumberSchema
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            deleteId = schemas.StrSchema
            deleteAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "label": label,
                "color": color,
                "baseInterval": baseInterval,
                "baseCompMax": baseCompMax,
                "baseCompMid": baseCompMid,
                "baseCompMin": baseCompMin,
                "baseSpread": baseSpread,
                "baseTargetPay": baseTargetPay,
                "baseTargetPayPercentile": baseTargetPayPercentile,
                "jobTierOneField": jobTierOneField,
                "jobTierTwoField": jobTierTwoField,
                "jobTierThreeField": jobTierThreeField,
                "jobLevel": jobLevel,
                "equityTargetShares": equityTargetShares,
                "equityTargetPercentOfBase": equityTargetPercentOfBase,
                "equityTargetValue": equityTargetValue,
                "variableValue": variableValue,
                "variablePercentOfBase": variablePercentOfBase,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    color: MetaOapg.properties.color
    baseInterval: 'EnumValue'
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseInterval"]) -> 'EnumValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseCompMax"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseCompMid"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseCompMin"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseSpread"]) -> MetaOapg.properties.baseSpread: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseTargetPay"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseTargetPayPercentile"]) -> MetaOapg.properties.baseTargetPayPercentile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTierOneField"]) -> 'JobTierField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTierTwoField"]) -> 'JobTierField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTierThreeField"]) -> 'JobTierField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobLevel"]) -> 'TableRowRef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equityTargetShares"]) -> MetaOapg.properties.equityTargetShares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equityTargetPercentOfBase"]) -> MetaOapg.properties.equityTargetPercentOfBase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equityTargetValue"]) -> MetaOapg.properties.equityTargetValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variableValue"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variablePercentOfBase"]) -> MetaOapg.properties.variablePercentOfBase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "label", "color", "baseInterval", "baseCompMax", "baseCompMid", "baseCompMin", "baseSpread", "baseTargetPay", "baseTargetPayPercentile", "jobTierOneField", "jobTierTwoField", "jobTierThreeField", "jobLevel", "equityTargetShares", "equityTargetPercentOfBase", "equityTargetValue", "variableValue", "variablePercentOfBase", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseInterval"]) -> 'EnumValue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseCompMax"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseCompMid"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseCompMin"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseSpread"]) -> typing.Union[MetaOapg.properties.baseSpread, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseTargetPay"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseTargetPayPercentile"]) -> typing.Union[MetaOapg.properties.baseTargetPayPercentile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTierOneField"]) -> typing.Union['JobTierField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTierTwoField"]) -> typing.Union['JobTierField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTierThreeField"]) -> typing.Union['JobTierField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobLevel"]) -> typing.Union['TableRowRef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equityTargetShares"]) -> typing.Union[MetaOapg.properties.equityTargetShares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equityTargetPercentOfBase"]) -> typing.Union[MetaOapg.properties.equityTargetPercentOfBase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equityTargetValue"]) -> typing.Union[MetaOapg.properties.equityTargetValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variableValue"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variablePercentOfBase"]) -> typing.Union[MetaOapg.properties.variablePercentOfBase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> typing.Union[MetaOapg.properties.updateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> typing.Union[MetaOapg.properties.updateAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "label", "color", "baseInterval", "baseCompMax", "baseCompMid", "baseCompMin", "baseSpread", "baseTargetPay", "baseTargetPayPercentile", "jobTierOneField", "jobTierTwoField", "jobTierThreeField", "jobLevel", "equityTargetShares", "equityTargetPercentOfBase", "equityTargetValue", "variableValue", "variablePercentOfBase", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        color: typing.Union[MetaOapg.properties.color, str, ],
        baseInterval: 'EnumValue',
        id: typing.Union[MetaOapg.properties.id, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        baseCompMax: typing.Union['Money', schemas.Unset] = schemas.unset,
        baseCompMid: typing.Union['Money', schemas.Unset] = schemas.unset,
        baseCompMin: typing.Union['Money', schemas.Unset] = schemas.unset,
        baseSpread: typing.Union[MetaOapg.properties.baseSpread, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        baseTargetPay: typing.Union['Money', schemas.Unset] = schemas.unset,
        baseTargetPayPercentile: typing.Union[MetaOapg.properties.baseTargetPayPercentile, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jobTierOneField: typing.Union['JobTierField', schemas.Unset] = schemas.unset,
        jobTierTwoField: typing.Union['JobTierField', schemas.Unset] = schemas.unset,
        jobTierThreeField: typing.Union['JobTierField', schemas.Unset] = schemas.unset,
        jobLevel: typing.Union['TableRowRef', schemas.Unset] = schemas.unset,
        equityTargetShares: typing.Union[MetaOapg.properties.equityTargetShares, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        equityTargetPercentOfBase: typing.Union[MetaOapg.properties.equityTargetPercentOfBase, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        equityTargetValue: typing.Union[MetaOapg.properties.equityTargetValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        variableValue: typing.Union['Money', schemas.Unset] = schemas.unset,
        variablePercentOfBase: typing.Union[MetaOapg.properties.variablePercentOfBase, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, str, schemas.Unset] = schemas.unset,
        updateId: typing.Union[MetaOapg.properties.updateId, str, schemas.Unset] = schemas.unset,
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompBand':
        return super().__new__(
            cls,
            *args,
            color=color,
            baseInterval=baseInterval,
            id=id,
            label=label,
            orgId=orgId,
            baseCompMax=baseCompMax,
            baseCompMid=baseCompMid,
            baseCompMin=baseCompMin,
            baseSpread=baseSpread,
            baseTargetPay=baseTargetPay,
            baseTargetPayPercentile=baseTargetPayPercentile,
            jobTierOneField=jobTierOneField,
            jobTierTwoField=jobTierTwoField,
            jobTierThreeField=jobTierThreeField,
            jobLevel=jobLevel,
            equityTargetShares=equityTargetShares,
            equityTargetPercentOfBase=equityTargetPercentOfBase,
            equityTargetValue=equityTargetValue,
            variableValue=variableValue,
            variablePercentOfBase=variablePercentOfBase,
            createId=createId,
            createAt=createAt,
            updateId=updateId,
            updateAt=updateAt,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.enum_value import EnumValue
from chart_hop_python_sdk.model.job_tier_field import JobTierField
from chart_hop_python_sdk.model.money import Money
from chart_hop_python_sdk.model.table_row_ref import TableRowRef
