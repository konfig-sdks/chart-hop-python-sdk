# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportQuery(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "options",
        }
        
        class properties:
            options = schemas.DictSchema
            
            
            class series(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportSeriesQuery']:
                        return ReportSeriesQuery
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportSeriesQuery'], typing.List['ReportSeriesQuery']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'series':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportSeriesQuery':
                    return super().__getitem__(i)
            
            
            class filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportFilter']:
                        return ReportFilter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportFilter'], typing.List['ReportFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportFilter':
                    return super().__getitem__(i)
            content = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
            
            
            class interval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DAY": "DAY",
                        "WEEK": "WEEK",
                        "MONTH": "MONTH",
                        "QUARTER": "QUARTER",
                        "FISCAL_QUARTER": "FISCAL_QUARTER",
                        "YEAR": "YEAR",
                        "FISCAL_YEAR": "FISCAL_YEAR",
                    }
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("DAY")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("WEEK")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
                
                @schemas.classproperty
                def QUARTER(cls):
                    return cls("QUARTER")
                
                @schemas.classproperty
                def FISCAL_QUARTER(cls):
                    return cls("FISCAL_QUARTER")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("YEAR")
                
                @schemas.classproperty
                def FISCAL_YEAR(cls):
                    return cls("FISCAL_YEAR")
        
            @staticmethod
            def intervalDates() -> typing.Type['ReportQueryIntervalDates']:
                return ReportQueryIntervalDates
            __annotations__ = {
                "options": options,
                "series": series,
                "filters": filters,
                "content": content,
                "startDate": startDate,
                "endDate": endDate,
                "interval": interval,
                "intervalDates": intervalDates,
            }
    
    options: MetaOapg.properties.options
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["series"]) -> MetaOapg.properties.series: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalDates"]) -> 'ReportQueryIntervalDates': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["options", "series", "filters", "content", "startDate", "endDate", "interval", "intervalDates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["series"]) -> typing.Union[MetaOapg.properties.series, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union[MetaOapg.properties.filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> typing.Union[MetaOapg.properties.interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalDates"]) -> typing.Union['ReportQueryIntervalDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["options", "series", "filters", "content", "startDate", "endDate", "interval", "intervalDates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, ],
        series: typing.Union[MetaOapg.properties.series, list, tuple, schemas.Unset] = schemas.unset,
        filters: typing.Union[MetaOapg.properties.filters, list, tuple, schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        interval: typing.Union[MetaOapg.properties.interval, str, schemas.Unset] = schemas.unset,
        intervalDates: typing.Union['ReportQueryIntervalDates', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportQuery':
        return super().__new__(
            cls,
            *args,
            options=options,
            series=series,
            filters=filters,
            content=content,
            startDate=startDate,
            endDate=endDate,
            interval=interval,
            intervalDates=intervalDates,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.report_filter import ReportFilter
from chart_hop_python_sdk.model.report_query_interval_dates import ReportQueryIntervalDates
from chart_hop_python_sdk.model.report_series_query import ReportSeriesQuery
