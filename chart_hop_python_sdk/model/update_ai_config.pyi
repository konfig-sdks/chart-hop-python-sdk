# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpdateAiConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def formResponseSummaryConfig() -> typing.Type['AiModelConfig']:
                return AiModelConfig
        
            @staticmethod
            def formResponseCombineSummaryConfig() -> typing.Type['AiModelConfig']:
                return AiModelConfig
        
            @staticmethod
            def reportResultSummaryConfig() -> typing.Type['AiModelConfig']:
                return AiModelConfig
            __annotations__ = {
                "formResponseSummaryConfig": formResponseSummaryConfig,
                "formResponseCombineSummaryConfig": formResponseCombineSummaryConfig,
                "reportResultSummaryConfig": reportResultSummaryConfig,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formResponseSummaryConfig"]) -> 'AiModelConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formResponseCombineSummaryConfig"]) -> 'AiModelConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportResultSummaryConfig"]) -> 'AiModelConfig': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["formResponseSummaryConfig", "formResponseCombineSummaryConfig", "reportResultSummaryConfig", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formResponseSummaryConfig"]) -> typing.Union['AiModelConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formResponseCombineSummaryConfig"]) -> typing.Union['AiModelConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportResultSummaryConfig"]) -> typing.Union['AiModelConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formResponseSummaryConfig", "formResponseCombineSummaryConfig", "reportResultSummaryConfig", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formResponseSummaryConfig: typing.Union['AiModelConfig', schemas.Unset] = schemas.unset,
        formResponseCombineSummaryConfig: typing.Union['AiModelConfig', schemas.Unset] = schemas.unset,
        reportResultSummaryConfig: typing.Union['AiModelConfig', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateAiConfig':
        return super().__new__(
            cls,
            *args,
            formResponseSummaryConfig=formResponseSummaryConfig,
            formResponseCombineSummaryConfig=formResponseCombineSummaryConfig,
            reportResultSummaryConfig=reportResultSummaryConfig,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.ai_model_config import AiModelConfig
