# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportMetricsReturnType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "result",
            "metricCollection",
        }
        
        class properties:
        
            @staticmethod
            def result() -> typing.Type['ReportResult']:
                return ReportResult
        
            @staticmethod
            def metricCollection() -> typing.Type['ReportMetricsReturnTypeMetricCollection']:
                return ReportMetricsReturnTypeMetricCollection
            __annotations__ = {
                "result": result,
                "metricCollection": metricCollection,
            }
    
    result: 'ReportResult'
    metricCollection: 'ReportMetricsReturnTypeMetricCollection'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> 'ReportResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricCollection"]) -> 'ReportMetricsReturnTypeMetricCollection': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["result", "metricCollection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> 'ReportResult': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricCollection"]) -> 'ReportMetricsReturnTypeMetricCollection': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["result", "metricCollection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        result: 'ReportResult',
        metricCollection: 'ReportMetricsReturnTypeMetricCollection',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportMetricsReturnType':
        return super().__new__(
            cls,
            *args,
            result=result,
            metricCollection=metricCollection,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.report_metrics_return_type_metric_collection import ReportMetricsReturnTypeMetricCollection
from chart_hop_python_sdk.model.report_result import ReportResult
