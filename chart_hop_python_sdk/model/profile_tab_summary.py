# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ProfileTabSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "label",
            "isBuiltin",
        }
        
        class properties:
            id = schemas.StrSchema
            label = schemas.StrSchema
            isBuiltin = schemas.BoolSchema
            isSensitive = schemas.BoolSchema
            
            
            class blocks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Block']:
                        return Block
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Block'], typing.List['Block']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'blocks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Block':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "label": label,
                "isBuiltin": isBuiltin,
                "isSensitive": isSensitive,
                "blocks": blocks,
            }
    
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    isBuiltin: MetaOapg.properties.isBuiltin
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBuiltin"]) -> MetaOapg.properties.isBuiltin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSensitive"]) -> MetaOapg.properties.isSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocks"]) -> MetaOapg.properties.blocks: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "label", "isBuiltin", "isSensitive", "blocks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBuiltin"]) -> MetaOapg.properties.isBuiltin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSensitive"]) -> typing.Union[MetaOapg.properties.isSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocks"]) -> typing.Union[MetaOapg.properties.blocks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "label", "isBuiltin", "isSensitive", "blocks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        isBuiltin: typing.Union[MetaOapg.properties.isBuiltin, bool, ],
        isSensitive: typing.Union[MetaOapg.properties.isSensitive, bool, schemas.Unset] = schemas.unset,
        blocks: typing.Union[MetaOapg.properties.blocks, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProfileTabSummary':
        return super().__new__(
            cls,
            *args,
            id=id,
            label=label,
            isBuiltin=isBuiltin,
            isSensitive=isSensitive,
            blocks=blocks,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.block import Block
