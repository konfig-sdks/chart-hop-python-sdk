# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class AppConfigField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "label",
            "type",
        }
        
        class properties:
            name = schemas.StrSchema
            label = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def SUBDOMAIN(cls):
                    return cls("SUBDOMAIN")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def SECRET(cls):
                    return cls("SECRET")
                
                @schemas.classproperty
                def XML(cls):
                    return cls("XML")
                
                @schemas.classproperty
                def OAUTH(cls):
                    return cls("OAUTH")
                
                @schemas.classproperty
                def INSTRUCTION(cls):
                    return cls("INSTRUCTION")
            details = schemas.StrSchema
            subdomain = schemas.StrSchema
            optional = schemas.BoolSchema
            configSection = schemas.StrSchema
            oauthUrl = schemas.StrSchema
        
            @staticmethod
            def requiredFields() -> typing.Type['AppConfigFieldRequiredFields']:
                return AppConfigFieldRequiredFields
            __annotations__ = {
                "name": name,
                "label": label,
                "type": type,
                "details": details,
                "subdomain": subdomain,
                "optional": optional,
                "configSection": configSection,
                "oauthUrl": oauthUrl,
                "requiredFields": requiredFields,
            }
    
    name: MetaOapg.properties.name
    label: MetaOapg.properties.label
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subdomain"]) -> MetaOapg.properties.subdomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optional"]) -> MetaOapg.properties.optional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configSection"]) -> MetaOapg.properties.configSection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthUrl"]) -> MetaOapg.properties.oauthUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredFields"]) -> 'AppConfigFieldRequiredFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "label", "type", "details", "subdomain", "optional", "configSection", "oauthUrl", "requiredFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subdomain"]) -> typing.Union[MetaOapg.properties.subdomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optional"]) -> typing.Union[MetaOapg.properties.optional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configSection"]) -> typing.Union[MetaOapg.properties.configSection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthUrl"]) -> typing.Union[MetaOapg.properties.oauthUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredFields"]) -> typing.Union['AppConfigFieldRequiredFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "label", "type", "details", "subdomain", "optional", "configSection", "oauthUrl", "requiredFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        details: typing.Union[MetaOapg.properties.details, str, schemas.Unset] = schemas.unset,
        subdomain: typing.Union[MetaOapg.properties.subdomain, str, schemas.Unset] = schemas.unset,
        optional: typing.Union[MetaOapg.properties.optional, bool, schemas.Unset] = schemas.unset,
        configSection: typing.Union[MetaOapg.properties.configSection, str, schemas.Unset] = schemas.unset,
        oauthUrl: typing.Union[MetaOapg.properties.oauthUrl, str, schemas.Unset] = schemas.unset,
        requiredFields: typing.Union['AppConfigFieldRequiredFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AppConfigField':
        return super().__new__(
            cls,
            *args,
            name=name,
            label=label,
            type=type,
            details=details,
            subdomain=subdomain,
            optional=optional,
            configSection=configSection,
            oauthUrl=oauthUrl,
            requiredFields=requiredFields,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.app_config_field_required_fields import AppConfigFieldRequiredFields
