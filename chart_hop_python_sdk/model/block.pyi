# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Block(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            label = schemas.StrSchema
            targetFilter = schemas.StrSchema
            readFilter = schemas.StrSchema
        
            @staticmethod
            def fields() -> typing.Type['BlockFields']:
                return BlockFields
            content = schemas.StrSchema
            __annotations__ = {
                "label": label,
                "targetFilter": targetFilter,
                "readFilter": readFilter,
                "fields": fields,
                "content": content,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetFilter"]) -> MetaOapg.properties.targetFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readFilter"]) -> MetaOapg.properties.readFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'BlockFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "targetFilter", "readFilter", "fields", "content", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetFilter"]) -> typing.Union[MetaOapg.properties.targetFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readFilter"]) -> typing.Union[MetaOapg.properties.readFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['BlockFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "targetFilter", "readFilter", "fields", "content", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        targetFilter: typing.Union[MetaOapg.properties.targetFilter, str, schemas.Unset] = schemas.unset,
        readFilter: typing.Union[MetaOapg.properties.readFilter, str, schemas.Unset] = schemas.unset,
        fields: typing.Union['BlockFields', schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Block':
        return super().__new__(
            cls,
            *args,
            label=label,
            targetFilter=targetFilter,
            readFilter=readFilter,
            fields=fields,
            content=content,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.block_fields import BlockFields
