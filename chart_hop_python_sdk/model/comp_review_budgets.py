# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewBudgets(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "visualizationType",
            "allocationType",
        }
        
        class properties:
            
            
            class allocationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROPORTIONAL": "PROPORTIONAL",
                        "SEQUENTIAL": "SEQUENTIAL",
                    }
                
                @schemas.classproperty
                def PROPORTIONAL(cls):
                    return cls("PROPORTIONAL")
                
                @schemas.classproperty
                def SEQUENTIAL(cls):
                    return cls("SEQUENTIAL")
            
            
            class visualizationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ALL": "ALL",
                        "ONLY_APPLICABLE": "ONLY_APPLICABLE",
                    }
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("ALL")
                
                @schemas.classproperty
                def ONLY_APPLICABLE(cls):
                    return cls("ONLY_APPLICABLE")
            __annotations__ = {
                "allocationType": allocationType,
                "visualizationType": visualizationType,
            }
    
    visualizationType: MetaOapg.properties.visualizationType
    allocationType: MetaOapg.properties.allocationType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocationType"]) -> MetaOapg.properties.allocationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualizationType"]) -> MetaOapg.properties.visualizationType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allocationType", "visualizationType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocationType"]) -> MetaOapg.properties.allocationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualizationType"]) -> MetaOapg.properties.visualizationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allocationType", "visualizationType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        visualizationType: typing.Union[MetaOapg.properties.visualizationType, str, ],
        allocationType: typing.Union[MetaOapg.properties.allocationType, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewBudgets':
        return super().__new__(
            cls,
            *args,
            visualizationType=visualizationType,
            allocationType=allocationType,
            _configuration=_configuration,
            **kwargs,
        )
