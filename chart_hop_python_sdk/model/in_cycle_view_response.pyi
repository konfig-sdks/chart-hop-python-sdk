# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class InCycleViewResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class reviews(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApprovalRequestCompReviewResponse']:
                        return ApprovalRequestCompReviewResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApprovalRequestCompReviewResponse'], typing.List['ApprovalRequestCompReviewResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reviews':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApprovalRequestCompReviewResponse':
                    return super().__getitem__(i)
        
            @staticmethod
            def proposal() -> typing.Type['ApprovalRequestCompReviewResponse']:
                return ApprovalRequestCompReviewResponse
        
            @staticmethod
            def scenarioMap() -> typing.Type['InCycleViewResponseScenarioMap']:
                return InCycleViewResponseScenarioMap
        
            @staticmethod
            def parentReviewsMap() -> typing.Type['InCycleViewResponseParentReviewsMap']:
                return InCycleViewResponseParentReviewsMap
        
            @staticmethod
            def collaboratingWithJobIds() -> typing.Type['InCycleViewResponseCollaboratingWithJobIds']:
                return InCycleViewResponseCollaboratingWithJobIds
            
            
            class visibleColumns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CompReviewWorkbookColumn']:
                        return CompReviewWorkbookColumn
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CompReviewWorkbookColumn'], typing.List['CompReviewWorkbookColumn']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'visibleColumns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CompReviewWorkbookColumn':
                    return super().__getitem__(i)
        
            @staticmethod
            def error() -> typing.Type['InCycleViewResponseError']:
                return InCycleViewResponseError
        
            @staticmethod
            def features() -> typing.Type['InCycleViewFeatures']:
                return InCycleViewFeatures
            __annotations__ = {
                "reviews": reviews,
                "proposal": proposal,
                "scenarioMap": scenarioMap,
                "parentReviewsMap": parentReviewsMap,
                "collaboratingWithJobIds": collaboratingWithJobIds,
                "visibleColumns": visibleColumns,
                "error": error,
                "features": features,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviews"]) -> MetaOapg.properties.reviews: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> 'ApprovalRequestCompReviewResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioMap"]) -> 'InCycleViewResponseScenarioMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentReviewsMap"]) -> 'InCycleViewResponseParentReviewsMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaboratingWithJobIds"]) -> 'InCycleViewResponseCollaboratingWithJobIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibleColumns"]) -> MetaOapg.properties.visibleColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'InCycleViewResponseError': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> 'InCycleViewFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reviews", "proposal", "scenarioMap", "parentReviewsMap", "collaboratingWithJobIds", "visibleColumns", "error", "features", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviews"]) -> typing.Union[MetaOapg.properties.reviews, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> typing.Union['ApprovalRequestCompReviewResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioMap"]) -> typing.Union['InCycleViewResponseScenarioMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentReviewsMap"]) -> typing.Union['InCycleViewResponseParentReviewsMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaboratingWithJobIds"]) -> typing.Union['InCycleViewResponseCollaboratingWithJobIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibleColumns"]) -> typing.Union[MetaOapg.properties.visibleColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['InCycleViewResponseError', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union['InCycleViewFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reviews", "proposal", "scenarioMap", "parentReviewsMap", "collaboratingWithJobIds", "visibleColumns", "error", "features", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reviews: typing.Union[MetaOapg.properties.reviews, list, tuple, schemas.Unset] = schemas.unset,
        proposal: typing.Union['ApprovalRequestCompReviewResponse', schemas.Unset] = schemas.unset,
        scenarioMap: typing.Union['InCycleViewResponseScenarioMap', schemas.Unset] = schemas.unset,
        parentReviewsMap: typing.Union['InCycleViewResponseParentReviewsMap', schemas.Unset] = schemas.unset,
        collaboratingWithJobIds: typing.Union['InCycleViewResponseCollaboratingWithJobIds', schemas.Unset] = schemas.unset,
        visibleColumns: typing.Union[MetaOapg.properties.visibleColumns, list, tuple, schemas.Unset] = schemas.unset,
        error: typing.Union['InCycleViewResponseError', schemas.Unset] = schemas.unset,
        features: typing.Union['InCycleViewFeatures', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InCycleViewResponse':
        return super().__new__(
            cls,
            *args,
            reviews=reviews,
            proposal=proposal,
            scenarioMap=scenarioMap,
            parentReviewsMap=parentReviewsMap,
            collaboratingWithJobIds=collaboratingWithJobIds,
            visibleColumns=visibleColumns,
            error=error,
            features=features,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.approval_request_comp_review_response import ApprovalRequestCompReviewResponse
from chart_hop_python_sdk.model.comp_review_workbook_column import CompReviewWorkbookColumn
from chart_hop_python_sdk.model.in_cycle_view_features import InCycleViewFeatures
from chart_hop_python_sdk.model.in_cycle_view_response_collaborating_with_job_ids import InCycleViewResponseCollaboratingWithJobIds
from chart_hop_python_sdk.model.in_cycle_view_response_error import InCycleViewResponseError
from chart_hop_python_sdk.model.in_cycle_view_response_parent_reviews_map import InCycleViewResponseParentReviewsMap
from chart_hop_python_sdk.model.in_cycle_view_response_scenario_map import InCycleViewResponseScenarioMap
