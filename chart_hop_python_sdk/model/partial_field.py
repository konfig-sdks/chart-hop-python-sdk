# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PartialField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z][a-zA-Z0-9_]+$',
                    }]
            label = schemas.StrSchema
            question = schemas.StrSchema
            inUse = schemas.BoolSchema
            expr = schemas.StrSchema
            
            
            class exprType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDRESS": "ADDRESS",
                        "BOOLEAN": "BOOLEAN",
                        "COMP": "COMP",
                        "COMPOUND": "COMPOUND",
                        "COMP_BAND": "COMP_BAND",
                        "CONTACTS": "CONTACTS",
                        "CURRENCY": "CURRENCY",
                        "DATE": "DATE",
                        "DECIMAL": "DECIMAL",
                        "ELAPSED_DAYS": "ELAPSED_DAYS",
                        "ELAPSED_MONTHS": "ELAPSED_MONTHS",
                        "ELAPSED_YEARS": "ELAPSED_YEARS",
                        "EMAIL": "EMAIL",
                        "ENUM": "ENUM",
                        "ENUM_EXPR": "ENUM_EXPR",
                        "ENUM_MULTI": "ENUM_MULTI",
                        "ENUM_SCALE": "ENUM_SCALE",
                        "EXPR": "EXPR",
                        "FILE": "FILE",
                        "GROUP": "GROUP",
                        "GROUPS": "GROUPS",
                        "GROUP_ASSIGNMENTS": "GROUP_ASSIGNMENTS",
                        "GROUP_TYPE": "GROUP_TYPE",
                        "IMAGE": "IMAGE",
                        "INTEGER": "INTEGER",
                        "JOB": "JOB",
                        "JOBS": "JOBS",
                        "JOB_TIER": "JOB_TIER",
                        "LIST": "LIST",
                        "MONEY": "MONEY",
                        "NAME": "NAME",
                        "OBJECT": "OBJECT",
                        "PAY_INTERVAL": "PAY_INTERVAL",
                        "PERCENT": "PERCENT",
                        "PERSON": "PERSON",
                        "PERSONS": "PERSONS",
                        "PHONE": "PHONE",
                        "STOCKGRANT": "STOCKGRANT",
                        "STRING": "STRING",
                        "TABLE_REF": "TABLE_REF",
                        "TEXT": "TEXT",
                        "TIMEOFF": "TIMEOFF",
                        "TIMESTAMP": "TIMESTAMP",
                        "TRACKED_GROUP": "TRACKED_GROUP",
                        "URL": "URL",
                        "USER": "USER",
                        "VARIABLE_COMP": "VARIABLE_COMP",
                        "VARIABLE_COMPS": "VARIABLE_COMPS",
                    }
                
                @schemas.classproperty
                def ADDRESS(cls):
                    return cls("ADDRESS")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def COMP(cls):
                    return cls("COMP")
                
                @schemas.classproperty
                def COMPOUND(cls):
                    return cls("COMPOUND")
                
                @schemas.classproperty
                def COMP_BAND(cls):
                    return cls("COMP_BAND")
                
                @schemas.classproperty
                def CONTACTS(cls):
                    return cls("CONTACTS")
                
                @schemas.classproperty
                def CURRENCY(cls):
                    return cls("CURRENCY")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("DECIMAL")
                
                @schemas.classproperty
                def ELAPSED_DAYS(cls):
                    return cls("ELAPSED_DAYS")
                
                @schemas.classproperty
                def ELAPSED_MONTHS(cls):
                    return cls("ELAPSED_MONTHS")
                
                @schemas.classproperty
                def ELAPSED_YEARS(cls):
                    return cls("ELAPSED_YEARS")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def ENUM(cls):
                    return cls("ENUM")
                
                @schemas.classproperty
                def ENUM_EXPR(cls):
                    return cls("ENUM_EXPR")
                
                @schemas.classproperty
                def ENUM_MULTI(cls):
                    return cls("ENUM_MULTI")
                
                @schemas.classproperty
                def ENUM_SCALE(cls):
                    return cls("ENUM_SCALE")
                
                @schemas.classproperty
                def EXPR(cls):
                    return cls("EXPR")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def GROUPS(cls):
                    return cls("GROUPS")
                
                @schemas.classproperty
                def GROUP_ASSIGNMENTS(cls):
                    return cls("GROUP_ASSIGNMENTS")
                
                @schemas.classproperty
                def GROUP_TYPE(cls):
                    return cls("GROUP_TYPE")
                
                @schemas.classproperty
                def IMAGE(cls):
                    return cls("IMAGE")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("INTEGER")
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOBS(cls):
                    return cls("JOBS")
                
                @schemas.classproperty
                def JOB_TIER(cls):
                    return cls("JOB_TIER")
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("LIST")
                
                @schemas.classproperty
                def MONEY(cls):
                    return cls("MONEY")
                
                @schemas.classproperty
                def NAME(cls):
                    return cls("NAME")
                
                @schemas.classproperty
                def OBJECT(cls):
                    return cls("OBJECT")
                
                @schemas.classproperty
                def PAY_INTERVAL(cls):
                    return cls("PAY_INTERVAL")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("PERCENT")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def PERSONS(cls):
                    return cls("PERSONS")
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("PHONE")
                
                @schemas.classproperty
                def STOCKGRANT(cls):
                    return cls("STOCKGRANT")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def TABLE_REF(cls):
                    return cls("TABLE_REF")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def TIMESTAMP(cls):
                    return cls("TIMESTAMP")
                
                @schemas.classproperty
                def TRACKED_GROUP(cls):
                    return cls("TRACKED_GROUP")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def VARIABLE_COMP(cls):
                    return cls("VARIABLE_COMP")
                
                @schemas.classproperty
                def VARIABLE_COMPS(cls):
                    return cls("VARIABLE_COMPS")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDRESS": "ADDRESS",
                        "BOOLEAN": "BOOLEAN",
                        "COMP": "COMP",
                        "COMPOUND": "COMPOUND",
                        "COMP_BAND": "COMP_BAND",
                        "CONTACTS": "CONTACTS",
                        "CURRENCY": "CURRENCY",
                        "DATE": "DATE",
                        "DECIMAL": "DECIMAL",
                        "ELAPSED_DAYS": "ELAPSED_DAYS",
                        "ELAPSED_MONTHS": "ELAPSED_MONTHS",
                        "ELAPSED_YEARS": "ELAPSED_YEARS",
                        "EMAIL": "EMAIL",
                        "ENUM": "ENUM",
                        "ENUM_EXPR": "ENUM_EXPR",
                        "ENUM_MULTI": "ENUM_MULTI",
                        "ENUM_SCALE": "ENUM_SCALE",
                        "EXPR": "EXPR",
                        "FILE": "FILE",
                        "GROUP": "GROUP",
                        "GROUPS": "GROUPS",
                        "GROUP_ASSIGNMENTS": "GROUP_ASSIGNMENTS",
                        "GROUP_TYPE": "GROUP_TYPE",
                        "IMAGE": "IMAGE",
                        "INTEGER": "INTEGER",
                        "JOB": "JOB",
                        "JOBS": "JOBS",
                        "JOB_TIER": "JOB_TIER",
                        "LIST": "LIST",
                        "MONEY": "MONEY",
                        "NAME": "NAME",
                        "OBJECT": "OBJECT",
                        "PAY_INTERVAL": "PAY_INTERVAL",
                        "PERCENT": "PERCENT",
                        "PERSON": "PERSON",
                        "PERSONS": "PERSONS",
                        "PHONE": "PHONE",
                        "STOCKGRANT": "STOCKGRANT",
                        "STRING": "STRING",
                        "TABLE_REF": "TABLE_REF",
                        "TEXT": "TEXT",
                        "TIMEOFF": "TIMEOFF",
                        "TIMESTAMP": "TIMESTAMP",
                        "TRACKED_GROUP": "TRACKED_GROUP",
                        "URL": "URL",
                        "USER": "USER",
                        "VARIABLE_COMP": "VARIABLE_COMP",
                        "VARIABLE_COMPS": "VARIABLE_COMPS",
                    }
                
                @schemas.classproperty
                def ADDRESS(cls):
                    return cls("ADDRESS")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def COMP(cls):
                    return cls("COMP")
                
                @schemas.classproperty
                def COMPOUND(cls):
                    return cls("COMPOUND")
                
                @schemas.classproperty
                def COMP_BAND(cls):
                    return cls("COMP_BAND")
                
                @schemas.classproperty
                def CONTACTS(cls):
                    return cls("CONTACTS")
                
                @schemas.classproperty
                def CURRENCY(cls):
                    return cls("CURRENCY")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("DECIMAL")
                
                @schemas.classproperty
                def ELAPSED_DAYS(cls):
                    return cls("ELAPSED_DAYS")
                
                @schemas.classproperty
                def ELAPSED_MONTHS(cls):
                    return cls("ELAPSED_MONTHS")
                
                @schemas.classproperty
                def ELAPSED_YEARS(cls):
                    return cls("ELAPSED_YEARS")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def ENUM(cls):
                    return cls("ENUM")
                
                @schemas.classproperty
                def ENUM_EXPR(cls):
                    return cls("ENUM_EXPR")
                
                @schemas.classproperty
                def ENUM_MULTI(cls):
                    return cls("ENUM_MULTI")
                
                @schemas.classproperty
                def ENUM_SCALE(cls):
                    return cls("ENUM_SCALE")
                
                @schemas.classproperty
                def EXPR(cls):
                    return cls("EXPR")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def GROUPS(cls):
                    return cls("GROUPS")
                
                @schemas.classproperty
                def GROUP_ASSIGNMENTS(cls):
                    return cls("GROUP_ASSIGNMENTS")
                
                @schemas.classproperty
                def GROUP_TYPE(cls):
                    return cls("GROUP_TYPE")
                
                @schemas.classproperty
                def IMAGE(cls):
                    return cls("IMAGE")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("INTEGER")
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOBS(cls):
                    return cls("JOBS")
                
                @schemas.classproperty
                def JOB_TIER(cls):
                    return cls("JOB_TIER")
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("LIST")
                
                @schemas.classproperty
                def MONEY(cls):
                    return cls("MONEY")
                
                @schemas.classproperty
                def NAME(cls):
                    return cls("NAME")
                
                @schemas.classproperty
                def OBJECT(cls):
                    return cls("OBJECT")
                
                @schemas.classproperty
                def PAY_INTERVAL(cls):
                    return cls("PAY_INTERVAL")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("PERCENT")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def PERSONS(cls):
                    return cls("PERSONS")
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("PHONE")
                
                @schemas.classproperty
                def STOCKGRANT(cls):
                    return cls("STOCKGRANT")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def TABLE_REF(cls):
                    return cls("TABLE_REF")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def TIMESTAMP(cls):
                    return cls("TIMESTAMP")
                
                @schemas.classproperty
                def TRACKED_GROUP(cls):
                    return cls("TRACKED_GROUP")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def VARIABLE_COMP(cls):
                    return cls("VARIABLE_COMP")
                
                @schemas.classproperty
                def VARIABLE_COMPS(cls):
                    return cls("VARIABLE_COMPS")
            
            
            class plural(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SINGLE": "SINGLE",
                        "LIST": "LIST",
                        "SET": "SET",
                    }
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("SINGLE")
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("LIST")
                
                @schemas.classproperty
                def SET(cls):
                    return cls("SET")
            
            
            class values(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EnumValue']:
                        return EnumValue
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EnumValue'], typing.List['EnumValue']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'values':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EnumValue':
                    return super().__getitem__(i)
            defaultValue = schemas.DictSchema
            options = schemas.DictSchema
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "JOB": "JOB",
                        "JOB_OPEN": "JOB_OPEN",
                        "JOB_FILLED": "JOB_FILLED",
                        "PERSON": "PERSON",
                        "CHANGE": "CHANGE",
                        "TABLE": "TABLE",
                        "ORG": "ORG",
                        "USER": "USER",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOB_OPEN(cls):
                    return cls("JOB_OPEN")
                
                @schemas.classproperty
                def JOB_FILLED(cls):
                    return cls("JOB_FILLED")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def CHANGE(cls):
                    return cls("CHANGE")
                
                @schemas.classproperty
                def TABLE(cls):
                    return cls("TABLE")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
            
            
            class sensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "GLOBAL": "GLOBAL",
                        "ORG": "ORG",
                        "ORG_OTHER": "ORG_OTHER",
                        "PERSONAL_DEMOG": "PERSONAL_DEMOG",
                        "PERSONAL_BIRTH": "PERSONAL_BIRTH",
                        "PERSONAL_CONTACT": "PERSONAL_CONTACT",
                        "PERSONAL_PRIVATE": "PERSONAL_PRIVATE",
                        "SENSITIVE_BIRTH": "SENSITIVE_BIRTH",
                        "SENSITIVE_CONTACT": "SENSITIVE_CONTACT",
                        "TIMEOFF": "TIMEOFF",
                        "COMP_CASH": "COMP_CASH",
                        "COMP_EQUITY": "COMP_EQUITY",
                        "SENSITIVE": "SENSITIVE",
                        "PERSONAL": "PERSONAL",
                        "MANAGER": "MANAGER",
                        "GRAND_MANAGER": "GRAND_MANAGER",
                        "DIRECT": "DIRECT",
                        "PEERS": "PEERS",
                        "HIGH": "HIGH",
                        "PRIVATE": "PRIVATE",
                    }
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            hideExpr = schemas.BoolSchema
            
            
            class expireDays(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 1
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTIVE": "ACTIVE",
                        "HIDDEN": "HIDDEN",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def HIDDEN(cls):
                    return cls("HIDDEN")
            tableId = schemas.StrSchema
        
            @staticmethod
            def tableRef() -> typing.Type['TableRef']:
                return TableRef
            isUnique = schemas.BoolSchema
            isRequired = schemas.BoolSchema
            isEffectiveDated = schemas.BoolSchema
        
            @staticmethod
            def dataFetchTypes() -> typing.Type['PartialFieldDataFetchTypes']:
                return PartialFieldDataFetchTypes
        
            @staticmethod
            def aliases() -> typing.Type['PartialFieldAliases']:
                return PartialFieldAliases
            
            
            class calc(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDRESS": "ADDRESS",
                        "AGE": "AGE",
                        "ANNIVERSARY": "ANNIVERSARY",
                        "ANNUAL_BASE_MONEY": "ANNUAL_BASE_MONEY",
                        "BACKFILL": "BACKFILL",
                        "BAND": "BAND",
                        "BAND_RANGE": "BAND_RANGE",
                        "BASE": "BASE",
                        "BASE_CAL_YEAR_PRORATED": "BASE_CAL_YEAR_PRORATED",
                        "BASE_CAL_YTD": "BASE_CAL_YTD",
                        "BASE_COMP": "BASE_COMP",
                        "BASE_COMP_AMOUNT": "BASE_COMP_AMOUNT",
                        "BASE_COMP_ANNUALIZED": "BASE_COMP_ANNUALIZED",
                        "BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY": "BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY",
                        "BASE_COMP_AS_ORG_CURRENCY": "BASE_COMP_AS_ORG_CURRENCY",
                        "BASE_COMP_CHANGES": "BASE_COMP_CHANGES",
                        "BASE_COMP_CURRENCY": "BASE_COMP_CURRENCY",
                        "BASE_COMP_HOURS_PER_WEEK": "BASE_COMP_HOURS_PER_WEEK",
                        "BASE_COMP_INTERVAL": "BASE_COMP_INTERVAL",
                        "BASE_COMP_LAST_RAISE_DATE": "BASE_COMP_LAST_RAISE_DATE",
                        "BASE_COMP_LAST_RAISE_MONTHS_SINCE": "BASE_COMP_LAST_RAISE_MONTHS_SINCE",
                        "BASE_COMP_LAST_RAISE_PAY": "BASE_COMP_LAST_RAISE_PAY",
                        "BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY": "BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY",
                        "BASE_COMP_LAST_RAISE_PERCENT": "BASE_COMP_LAST_RAISE_PERCENT",
                        "BASE_COMP_LAST_RAISE_TYPE": "BASE_COMP_LAST_RAISE_TYPE",
                        "BASE_COMP_PAY": "BASE_COMP_PAY",
                        "BASE_COMP_PAY_AS_ORG_CURRENCY": "BASE_COMP_PAY_AS_ORG_CURRENCY",
                        "BASE_COMP_WEEKS_PER_YEAR": "BASE_COMP_WEEKS_PER_YEAR",
                        "BASE_FISCAL_YEAR_PRORATED": "BASE_FISCAL_YEAR_PRORATED",
                        "BASE_FISCAL_YTD": "BASE_FISCAL_YTD",
                        "BASE_PRIMARY": "BASE_PRIMARY",
                        "BASE_RAISE_AMOUNT": "BASE_RAISE_AMOUNT",
                        "BASE_RAISE_DATE": "BASE_RAISE_DATE",
                        "BASE_RAISE_PERCENT": "BASE_RAISE_PERCENT",
                        "BIRTH_DATE": "BIRTH_DATE",
                        "BIRTHDAY": "BIRTHDAY",
                        "BONUS_TARGET": "BONUS_TARGET",
                        "BUDGET_COST": "BUDGET_COST",
                        "BUSINESS_UNITS": "BUSINESS_UNITS",
                        "CAL_YEAR_VEST_SHARES": "CAL_YEAR_VEST_SHARES",
                        "CAL_YEAR_VEST_VALUE": "CAL_YEAR_VEST_VALUE",
                        "CAN_APPROVE_CHANGE": "CAN_APPROVE_CHANGE",
                        "CAN_EDIT_JOB": "CAN_EDIT_JOB",
                        "CASH_COMP": "CASH_COMP",
                        "CASH_COMP_LOCAL": "CASH_COMP_LOCAL",
                        "CHANGE": "CHANGE",
                        "CHANGE_ID": "CHANGE_ID",
                        "COMMISSION_TARGET": "COMMISSION_TARGET",
                        "COMP": "COMP",
                        "COMP_CHANGE_PERCENT": "COMP_CHANGE_PERCENT",
                        "COMPA_RATIO_MID": "COMPA_RATIO_MID",
                        "COMPA_RATIO_TARGET": "COMPA_RATIO_TARGET",
                        "CONTACT": "CONTACT",
                        "COST": "COST",
                        "CREATE_DATE": "CREATE_DATE",
                        "CURRENCY": "CURRENCY",
                        "DATA": "DATA",
                        "DATE": "DATE",
                        "DATE_OF": "DATE_OF",
                        "DAYS_ACTIVE": "DAYS_ACTIVE",
                        "DAYS_OFF": "DAYS_OFF",
                        "DAYS_OFF_TAKEN": "DAYS_OFF_TAKEN",
                        "DAYS_OFF_UPCOMING": "DAYS_OFF_UPCOMING",
                        "DAYS_OPEN": "DAYS_OPEN",
                        "DB": "DB",
                        "DEPART": "DEPART",
                        "DEPARTMENT": "DEPARTMENT",
                        "DEPARTMENT_FUNC": "DEPARTMENT_FUNC",
                        "DIRECT_JOBS": "DIRECT_JOBS",
                        "DIRECT_JOB_COUNT": "DIRECT_JOB_COUNT",
                        "DIRECT_PERSON_COUNT": "DIRECT_PERSON_COUNT",
                        "EMPLOYMENT": "EMPLOYMENT",
                        "END_DATE_JOB": "END_DATE_JOB",
                        "END_DATE_ORG": "END_DATE_ORG",
                        "ETHNICITY": "ETHNICITY",
                        "FISCAL_YEAR_COST": "FISCAL_YEAR_COST",
                        "GENDER": "GENDER",
                        "GEOIP": "GEOIP",
                        "GEOIP_ADDRESS": "GEOIP_ADDRESS",
                        "GRAND_MANAGER": "GRAND_MANAGER",
                        "GRANT_SHARES": "GRANT_SHARES",
                        "GRANT_TYPE": "GRANT_TYPE",
                        "GRANT_VALUE": "GRANT_VALUE",
                        "GRANTS": "GRANTS",
                        "GROUP_IDS": "GROUP_IDS",
                        "HEADCOUNT": "HEADCOUNT",
                        "HISTORIC_BACKFILL": "HISTORIC_BACKFILL",
                        "HOUR": "HOUR",
                        "HOURLY": "HOURLY",
                        "HOURLY_PRIMARY": "HOURLY_PRIMARY",
                        "HOURS_PER_WEEK": "HOURS_PER_WEEK",
                        "IMAGE": "IMAGE",
                        "INDIRECT": "INDIRECT",
                        "INDIRECT_JOBS": "INDIRECT_JOBS",
                        "JOB": "JOB",
                        "JOB_ID": "JOB_ID",
                        "JOB_CODE": "JOB_CODE",
                        "JOBCOUNT": "JOBCOUNT",
                        "LAST_GRANT": "LAST_GRANT",
                        "LAST_GRANT_DATE": "LAST_GRANT_DATE",
                        "LAST_GRANT_ORIGINAL_VALUE": "LAST_GRANT_ORIGINAL_VALUE",
                        "LOCATION": "LOCATION",
                        "MANAGE_JOBS": "MANAGE_JOBS",
                        "MANAGE_PERSONS": "MANAGE_PERSONS",
                        "MANAGER": "MANAGER",
                        "MANAGER_COUNT": "MANAGER_COUNT",
                        "MANAGER_FILLED": "MANAGER_FILLED",
                        "MANAGER_ID": "MANAGER_ID",
                        "MANAGERS": "MANAGERS",
                        "MANAGER_PERSON": "MANAGER_PERSON",
                        "MANAGER_PERSONS": "MANAGER_PERSONS",
                        "ME": "ME",
                        "MERGE_SCENARIO_ID": "MERGE_SCENARIO_ID",
                        "NAME": "NAME",
                        "NAME_AUDIO": "NAME_AUDIO",
                        "NAME_TITLE": "NAME_TITLE",
                        "NEXT_DAY_OFF": "NEXT_DAY_OFF",
                        "NEXT_TIME_OFF": "NEXT_TIME_OFF",
                        "NEXT_YEAR_VEST_SHARES": "NEXT_YEAR_VEST_SHARES",
                        "NEXT_YEAR_VEST_VALUE": "NEXT_YEAR_VEST_VALUE",
                        "NOTE": "NOTE",
                        "NOOP": "NOOP",
                        "OPEN": "OPEN",
                        "ORG": "ORG",
                        "PERSON": "PERSON",
                        "PERSON_ID": "PERSON_ID",
                        "PLACEMENT": "PLACEMENT",
                        "PREV_DAY_OFF": "PREV_DAY_OFF",
                        "PREV_TIME_OFF": "PREV_TIME_OFF",
                        "PROMOTION": "PROMOTION",
                        "PROMOTION_DATE": "PROMOTION_DATE",
                        "PROPOSED": "PROPOSED",
                        "Q": "Q",
                        "RAISE_AMOUNT": "RAISE_AMOUNT",
                        "RAISE_DATE": "RAISE_DATE",
                        "RAISE_PERCENT": "RAISE_PERCENT",
                        "RAISE_PROMOTION_DATE": "RAISE_PROMOTION_DATE",
                        "REASON": "REASON",
                        "REGRET": "REGRET",
                        "RELATIONSHIPS": "RELATIONSHIPS",
                        "REMOTE_WORK_ADDRESS": "REMOTE_WORK_ADDRESS",
                        "SCENARIO": "SCENARIO",
                        "SCENARIO_CHANGED": "SCENARIO_CHANGED",
                        "SENSITIVE": "SENSITIVE",
                        "SENSITIVE_FIELDS": "SENSITIVE_FIELDS",
                        "START_DATE": "START_DATE",
                        "START_DATE_JOB": "START_DATE_JOB",
                        "START_DATE_ORG": "START_DATE_ORG",
                        "START_DATE_PLANNED": "START_DATE_PLANNED",
                        "STATE": "STATE",
                        "STRIKE_PRICE": "STRIKE_PRICE",
                        "TARGET_HOURS_PER_WEEK": "TARGET_HOURS_PER_WEEK",
                        "TARGET_WEEKS_PER_YEAR": "TARGET_WEEKS_PER_YEAR",
                        "TEAM": "TEAM",
                        "TENURE_JOB": "TENURE_JOB",
                        "TENURE_ORG": "TENURE_ORG",
                        "TIMEZONE_OFFSET": "TIMEZONE_OFFSET",
                        "TITLE": "TITLE",
                        "TITLE_DATE": "TITLE_DATE",
                        "TODAY": "TODAY",
                        "TOTAL_COMP": "TOTAL_COMP",
                        "TOTAL_COMP_LOCAL": "TOTAL_COMP_LOCAL",
                        "TOTAL_ORG_SHARES": "TOTAL_ORG_SHARES",
                        "TOTAL_SHARES": "TOTAL_SHARES",
                        "TOTAL_SHARES_VALUE": "TOTAL_SHARES_VALUE",
                        "UNDER": "UNDER",
                        "UNDER_INCLUDING": "UNDER_INCLUDING",
                        "UNDER_JOBS": "UNDER_JOBS",
                        "UNVESTED_SHARES": "UNVESTED_SHARES",
                        "UNVESTED_VALUE": "UNVESTED_VALUE",
                        "UPDATE": "UPDATE",
                        "USER_ACTIVE_DAYS": "USER_ACTIVE_DAYS",
                        "USER_CAN_EDIT_COMP_FOR_JOB": "USER_CAN_EDIT_COMP_FOR_JOB",
                        "USER": "USER",
                        "VARIABLE": "VARIABLE",
                        "VARIABLE_AMOUNT": "VARIABLE_AMOUNT",
                        "VARIABLE_INTERVAL": "VARIABLE_INTERVAL",
                        "VARIABLE_PERCENT": "VARIABLE_PERCENT",
                        "VARIABLE_PRIMARY": "VARIABLE_PRIMARY",
                        "VARIABLE_TARGET": "VARIABLE_TARGET",
                        "VARIABLE_TARGET_AMOUNT": "VARIABLE_TARGET_AMOUNT",
                        "VARIABLE_TARGET_ANNUALIZED": "VARIABLE_TARGET_ANNUALIZED",
                        "VARIABLE_TARGET_CURRENCY": "VARIABLE_TARGET_CURRENCY",
                        "VARIABLE_TARGET_PERCENT": "VARIABLE_TARGET_PERCENT",
                        "VARIABLE_TARGET_TYPE": "VARIABLE_TARGET_TYPE",
                        "VARIABLE_TARGETS": "VARIABLE_TARGETS",
                        "VARIABLE_TARGETS_LAST_RAISE_DATE": "VARIABLE_TARGETS_LAST_RAISE_DATE",
                        "VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE": "VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE",
                        "VARIABLE_TARGETS_LAST_RAISE_PAY": "VARIABLE_TARGETS_LAST_RAISE_PAY",
                        "VARIABLE_TARGETS_LAST_RAISE_PERCENT": "VARIABLE_TARGETS_LAST_RAISE_PERCENT",
                        "VARIABLE_TYPE": "VARIABLE_TYPE",
                        "VESTED_DATE": "VESTED_DATE",
                        "VESTED_SHARES": "VESTED_SHARES",
                        "VESTED_VALUE": "VESTED_VALUE",
                        "WEEKS_PER_YEAR": "WEEKS_PER_YEAR",
                        "WORK_ADDRESS": "WORK_ADDRESS",
                    }
                
                @schemas.classproperty
                def ADDRESS(cls):
                    return cls("ADDRESS")
                
                @schemas.classproperty
                def AGE(cls):
                    return cls("AGE")
                
                @schemas.classproperty
                def ANNIVERSARY(cls):
                    return cls("ANNIVERSARY")
                
                @schemas.classproperty
                def ANNUAL_BASE_MONEY(cls):
                    return cls("ANNUAL_BASE_MONEY")
                
                @schemas.classproperty
                def BACKFILL(cls):
                    return cls("BACKFILL")
                
                @schemas.classproperty
                def BAND(cls):
                    return cls("BAND")
                
                @schemas.classproperty
                def BAND_RANGE(cls):
                    return cls("BAND_RANGE")
                
                @schemas.classproperty
                def BASE(cls):
                    return cls("BASE")
                
                @schemas.classproperty
                def BASE_CAL_YEAR_PRORATED(cls):
                    return cls("BASE_CAL_YEAR_PRORATED")
                
                @schemas.classproperty
                def BASE_CAL_YTD(cls):
                    return cls("BASE_CAL_YTD")
                
                @schemas.classproperty
                def BASE_COMP(cls):
                    return cls("BASE_COMP")
                
                @schemas.classproperty
                def BASE_COMP_AMOUNT(cls):
                    return cls("BASE_COMP_AMOUNT")
                
                @schemas.classproperty
                def BASE_COMP_ANNUALIZED(cls):
                    return cls("BASE_COMP_ANNUALIZED")
                
                @schemas.classproperty
                def BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY(cls):
                    return cls("BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY")
                
                @schemas.classproperty
                def BASE_COMP_AS_ORG_CURRENCY(cls):
                    return cls("BASE_COMP_AS_ORG_CURRENCY")
                
                @schemas.classproperty
                def BASE_COMP_CHANGES(cls):
                    return cls("BASE_COMP_CHANGES")
                
                @schemas.classproperty
                def BASE_COMP_CURRENCY(cls):
                    return cls("BASE_COMP_CURRENCY")
                
                @schemas.classproperty
                def BASE_COMP_HOURS_PER_WEEK(cls):
                    return cls("BASE_COMP_HOURS_PER_WEEK")
                
                @schemas.classproperty
                def BASE_COMP_INTERVAL(cls):
                    return cls("BASE_COMP_INTERVAL")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_DATE(cls):
                    return cls("BASE_COMP_LAST_RAISE_DATE")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_MONTHS_SINCE(cls):
                    return cls("BASE_COMP_LAST_RAISE_MONTHS_SINCE")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_PAY(cls):
                    return cls("BASE_COMP_LAST_RAISE_PAY")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY(cls):
                    return cls("BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_PERCENT(cls):
                    return cls("BASE_COMP_LAST_RAISE_PERCENT")
                
                @schemas.classproperty
                def BASE_COMP_LAST_RAISE_TYPE(cls):
                    return cls("BASE_COMP_LAST_RAISE_TYPE")
                
                @schemas.classproperty
                def BASE_COMP_PAY(cls):
                    return cls("BASE_COMP_PAY")
                
                @schemas.classproperty
                def BASE_COMP_PAY_AS_ORG_CURRENCY(cls):
                    return cls("BASE_COMP_PAY_AS_ORG_CURRENCY")
                
                @schemas.classproperty
                def BASE_COMP_WEEKS_PER_YEAR(cls):
                    return cls("BASE_COMP_WEEKS_PER_YEAR")
                
                @schemas.classproperty
                def BASE_FISCAL_YEAR_PRORATED(cls):
                    return cls("BASE_FISCAL_YEAR_PRORATED")
                
                @schemas.classproperty
                def BASE_FISCAL_YTD(cls):
                    return cls("BASE_FISCAL_YTD")
                
                @schemas.classproperty
                def BASE_PRIMARY(cls):
                    return cls("BASE_PRIMARY")
                
                @schemas.classproperty
                def BASE_RAISE_AMOUNT(cls):
                    return cls("BASE_RAISE_AMOUNT")
                
                @schemas.classproperty
                def BASE_RAISE_DATE(cls):
                    return cls("BASE_RAISE_DATE")
                
                @schemas.classproperty
                def BASE_RAISE_PERCENT(cls):
                    return cls("BASE_RAISE_PERCENT")
                
                @schemas.classproperty
                def BIRTH_DATE(cls):
                    return cls("BIRTH_DATE")
                
                @schemas.classproperty
                def BIRTHDAY(cls):
                    return cls("BIRTHDAY")
                
                @schemas.classproperty
                def BONUS_TARGET(cls):
                    return cls("BONUS_TARGET")
                
                @schemas.classproperty
                def BUDGET_COST(cls):
                    return cls("BUDGET_COST")
                
                @schemas.classproperty
                def BUSINESS_UNITS(cls):
                    return cls("BUSINESS_UNITS")
                
                @schemas.classproperty
                def CAL_YEAR_VEST_SHARES(cls):
                    return cls("CAL_YEAR_VEST_SHARES")
                
                @schemas.classproperty
                def CAL_YEAR_VEST_VALUE(cls):
                    return cls("CAL_YEAR_VEST_VALUE")
                
                @schemas.classproperty
                def CAN_APPROVE_CHANGE(cls):
                    return cls("CAN_APPROVE_CHANGE")
                
                @schemas.classproperty
                def CAN_EDIT_JOB(cls):
                    return cls("CAN_EDIT_JOB")
                
                @schemas.classproperty
                def CASH_COMP(cls):
                    return cls("CASH_COMP")
                
                @schemas.classproperty
                def CASH_COMP_LOCAL(cls):
                    return cls("CASH_COMP_LOCAL")
                
                @schemas.classproperty
                def CHANGE(cls):
                    return cls("CHANGE")
                
                @schemas.classproperty
                def CHANGE_ID(cls):
                    return cls("CHANGE_ID")
                
                @schemas.classproperty
                def COMMISSION_TARGET(cls):
                    return cls("COMMISSION_TARGET")
                
                @schemas.classproperty
                def COMP(cls):
                    return cls("COMP")
                
                @schemas.classproperty
                def COMP_CHANGE_PERCENT(cls):
                    return cls("COMP_CHANGE_PERCENT")
                
                @schemas.classproperty
                def COMPA_RATIO_MID(cls):
                    return cls("COMPA_RATIO_MID")
                
                @schemas.classproperty
                def COMPA_RATIO_TARGET(cls):
                    return cls("COMPA_RATIO_TARGET")
                
                @schemas.classproperty
                def CONTACT(cls):
                    return cls("CONTACT")
                
                @schemas.classproperty
                def COST(cls):
                    return cls("COST")
                
                @schemas.classproperty
                def CREATE_DATE(cls):
                    return cls("CREATE_DATE")
                
                @schemas.classproperty
                def CURRENCY(cls):
                    return cls("CURRENCY")
                
                @schemas.classproperty
                def DATA(cls):
                    return cls("DATA")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def DATE_OF(cls):
                    return cls("DATE_OF")
                
                @schemas.classproperty
                def DAYS_ACTIVE(cls):
                    return cls("DAYS_ACTIVE")
                
                @schemas.classproperty
                def DAYS_OFF(cls):
                    return cls("DAYS_OFF")
                
                @schemas.classproperty
                def DAYS_OFF_TAKEN(cls):
                    return cls("DAYS_OFF_TAKEN")
                
                @schemas.classproperty
                def DAYS_OFF_UPCOMING(cls):
                    return cls("DAYS_OFF_UPCOMING")
                
                @schemas.classproperty
                def DAYS_OPEN(cls):
                    return cls("DAYS_OPEN")
                
                @schemas.classproperty
                def DB(cls):
                    return cls("DB")
                
                @schemas.classproperty
                def DEPART(cls):
                    return cls("DEPART")
                
                @schemas.classproperty
                def DEPARTMENT(cls):
                    return cls("DEPARTMENT")
                
                @schemas.classproperty
                def DEPARTMENT_FUNC(cls):
                    return cls("DEPARTMENT_FUNC")
                
                @schemas.classproperty
                def DIRECT_JOBS(cls):
                    return cls("DIRECT_JOBS")
                
                @schemas.classproperty
                def DIRECT_JOB_COUNT(cls):
                    return cls("DIRECT_JOB_COUNT")
                
                @schemas.classproperty
                def DIRECT_PERSON_COUNT(cls):
                    return cls("DIRECT_PERSON_COUNT")
                
                @schemas.classproperty
                def EMPLOYMENT(cls):
                    return cls("EMPLOYMENT")
                
                @schemas.classproperty
                def END_DATE_JOB(cls):
                    return cls("END_DATE_JOB")
                
                @schemas.classproperty
                def END_DATE_ORG(cls):
                    return cls("END_DATE_ORG")
                
                @schemas.classproperty
                def ETHNICITY(cls):
                    return cls("ETHNICITY")
                
                @schemas.classproperty
                def FISCAL_YEAR_COST(cls):
                    return cls("FISCAL_YEAR_COST")
                
                @schemas.classproperty
                def GENDER(cls):
                    return cls("GENDER")
                
                @schemas.classproperty
                def GEOIP(cls):
                    return cls("GEOIP")
                
                @schemas.classproperty
                def GEOIP_ADDRESS(cls):
                    return cls("GEOIP_ADDRESS")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def GRANT_SHARES(cls):
                    return cls("GRANT_SHARES")
                
                @schemas.classproperty
                def GRANT_TYPE(cls):
                    return cls("GRANT_TYPE")
                
                @schemas.classproperty
                def GRANT_VALUE(cls):
                    return cls("GRANT_VALUE")
                
                @schemas.classproperty
                def GRANTS(cls):
                    return cls("GRANTS")
                
                @schemas.classproperty
                def GROUP_IDS(cls):
                    return cls("GROUP_IDS")
                
                @schemas.classproperty
                def HEADCOUNT(cls):
                    return cls("HEADCOUNT")
                
                @schemas.classproperty
                def HISTORIC_BACKFILL(cls):
                    return cls("HISTORIC_BACKFILL")
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("HOUR")
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("HOURLY")
                
                @schemas.classproperty
                def HOURLY_PRIMARY(cls):
                    return cls("HOURLY_PRIMARY")
                
                @schemas.classproperty
                def HOURS_PER_WEEK(cls):
                    return cls("HOURS_PER_WEEK")
                
                @schemas.classproperty
                def IMAGE(cls):
                    return cls("IMAGE")
                
                @schemas.classproperty
                def INDIRECT(cls):
                    return cls("INDIRECT")
                
                @schemas.classproperty
                def INDIRECT_JOBS(cls):
                    return cls("INDIRECT_JOBS")
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def JOB_ID(cls):
                    return cls("JOB_ID")
                
                @schemas.classproperty
                def JOB_CODE(cls):
                    return cls("JOB_CODE")
                
                @schemas.classproperty
                def JOBCOUNT(cls):
                    return cls("JOBCOUNT")
                
                @schemas.classproperty
                def LAST_GRANT(cls):
                    return cls("LAST_GRANT")
                
                @schemas.classproperty
                def LAST_GRANT_DATE(cls):
                    return cls("LAST_GRANT_DATE")
                
                @schemas.classproperty
                def LAST_GRANT_ORIGINAL_VALUE(cls):
                    return cls("LAST_GRANT_ORIGINAL_VALUE")
                
                @schemas.classproperty
                def LOCATION(cls):
                    return cls("LOCATION")
                
                @schemas.classproperty
                def MANAGE_JOBS(cls):
                    return cls("MANAGE_JOBS")
                
                @schemas.classproperty
                def MANAGE_PERSONS(cls):
                    return cls("MANAGE_PERSONS")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def MANAGER_COUNT(cls):
                    return cls("MANAGER_COUNT")
                
                @schemas.classproperty
                def MANAGER_FILLED(cls):
                    return cls("MANAGER_FILLED")
                
                @schemas.classproperty
                def MANAGER_ID(cls):
                    return cls("MANAGER_ID")
                
                @schemas.classproperty
                def MANAGERS(cls):
                    return cls("MANAGERS")
                
                @schemas.classproperty
                def MANAGER_PERSON(cls):
                    return cls("MANAGER_PERSON")
                
                @schemas.classproperty
                def MANAGER_PERSONS(cls):
                    return cls("MANAGER_PERSONS")
                
                @schemas.classproperty
                def ME(cls):
                    return cls("ME")
                
                @schemas.classproperty
                def MERGE_SCENARIO_ID(cls):
                    return cls("MERGE_SCENARIO_ID")
                
                @schemas.classproperty
                def NAME(cls):
                    return cls("NAME")
                
                @schemas.classproperty
                def NAME_AUDIO(cls):
                    return cls("NAME_AUDIO")
                
                @schemas.classproperty
                def NAME_TITLE(cls):
                    return cls("NAME_TITLE")
                
                @schemas.classproperty
                def NEXT_DAY_OFF(cls):
                    return cls("NEXT_DAY_OFF")
                
                @schemas.classproperty
                def NEXT_TIME_OFF(cls):
                    return cls("NEXT_TIME_OFF")
                
                @schemas.classproperty
                def NEXT_YEAR_VEST_SHARES(cls):
                    return cls("NEXT_YEAR_VEST_SHARES")
                
                @schemas.classproperty
                def NEXT_YEAR_VEST_VALUE(cls):
                    return cls("NEXT_YEAR_VEST_VALUE")
                
                @schemas.classproperty
                def NOTE(cls):
                    return cls("NOTE")
                
                @schemas.classproperty
                def NOOP(cls):
                    return cls("NOOP")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("OPEN")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def PERSON(cls):
                    return cls("PERSON")
                
                @schemas.classproperty
                def PERSON_ID(cls):
                    return cls("PERSON_ID")
                
                @schemas.classproperty
                def PLACEMENT(cls):
                    return cls("PLACEMENT")
                
                @schemas.classproperty
                def PREV_DAY_OFF(cls):
                    return cls("PREV_DAY_OFF")
                
                @schemas.classproperty
                def PREV_TIME_OFF(cls):
                    return cls("PREV_TIME_OFF")
                
                @schemas.classproperty
                def PROMOTION(cls):
                    return cls("PROMOTION")
                
                @schemas.classproperty
                def PROMOTION_DATE(cls):
                    return cls("PROMOTION_DATE")
                
                @schemas.classproperty
                def PROPOSED(cls):
                    return cls("PROPOSED")
                
                @schemas.classproperty
                def Q(cls):
                    return cls("Q")
                
                @schemas.classproperty
                def RAISE_AMOUNT(cls):
                    return cls("RAISE_AMOUNT")
                
                @schemas.classproperty
                def RAISE_DATE(cls):
                    return cls("RAISE_DATE")
                
                @schemas.classproperty
                def RAISE_PERCENT(cls):
                    return cls("RAISE_PERCENT")
                
                @schemas.classproperty
                def RAISE_PROMOTION_DATE(cls):
                    return cls("RAISE_PROMOTION_DATE")
                
                @schemas.classproperty
                def REASON(cls):
                    return cls("REASON")
                
                @schemas.classproperty
                def REGRET(cls):
                    return cls("REGRET")
                
                @schemas.classproperty
                def RELATIONSHIPS(cls):
                    return cls("RELATIONSHIPS")
                
                @schemas.classproperty
                def REMOTE_WORK_ADDRESS(cls):
                    return cls("REMOTE_WORK_ADDRESS")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def SCENARIO_CHANGED(cls):
                    return cls("SCENARIO_CHANGED")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def SENSITIVE_FIELDS(cls):
                    return cls("SENSITIVE_FIELDS")
                
                @schemas.classproperty
                def START_DATE(cls):
                    return cls("START_DATE")
                
                @schemas.classproperty
                def START_DATE_JOB(cls):
                    return cls("START_DATE_JOB")
                
                @schemas.classproperty
                def START_DATE_ORG(cls):
                    return cls("START_DATE_ORG")
                
                @schemas.classproperty
                def START_DATE_PLANNED(cls):
                    return cls("START_DATE_PLANNED")
                
                @schemas.classproperty
                def STATE(cls):
                    return cls("STATE")
                
                @schemas.classproperty
                def STRIKE_PRICE(cls):
                    return cls("STRIKE_PRICE")
                
                @schemas.classproperty
                def TARGET_HOURS_PER_WEEK(cls):
                    return cls("TARGET_HOURS_PER_WEEK")
                
                @schemas.classproperty
                def TARGET_WEEKS_PER_YEAR(cls):
                    return cls("TARGET_WEEKS_PER_YEAR")
                
                @schemas.classproperty
                def TEAM(cls):
                    return cls("TEAM")
                
                @schemas.classproperty
                def TENURE_JOB(cls):
                    return cls("TENURE_JOB")
                
                @schemas.classproperty
                def TENURE_ORG(cls):
                    return cls("TENURE_ORG")
                
                @schemas.classproperty
                def TIMEZONE_OFFSET(cls):
                    return cls("TIMEZONE_OFFSET")
                
                @schemas.classproperty
                def TITLE(cls):
                    return cls("TITLE")
                
                @schemas.classproperty
                def TITLE_DATE(cls):
                    return cls("TITLE_DATE")
                
                @schemas.classproperty
                def TODAY(cls):
                    return cls("TODAY")
                
                @schemas.classproperty
                def TOTAL_COMP(cls):
                    return cls("TOTAL_COMP")
                
                @schemas.classproperty
                def TOTAL_COMP_LOCAL(cls):
                    return cls("TOTAL_COMP_LOCAL")
                
                @schemas.classproperty
                def TOTAL_ORG_SHARES(cls):
                    return cls("TOTAL_ORG_SHARES")
                
                @schemas.classproperty
                def TOTAL_SHARES(cls):
                    return cls("TOTAL_SHARES")
                
                @schemas.classproperty
                def TOTAL_SHARES_VALUE(cls):
                    return cls("TOTAL_SHARES_VALUE")
                
                @schemas.classproperty
                def UNDER(cls):
                    return cls("UNDER")
                
                @schemas.classproperty
                def UNDER_INCLUDING(cls):
                    return cls("UNDER_INCLUDING")
                
                @schemas.classproperty
                def UNDER_JOBS(cls):
                    return cls("UNDER_JOBS")
                
                @schemas.classproperty
                def UNVESTED_SHARES(cls):
                    return cls("UNVESTED_SHARES")
                
                @schemas.classproperty
                def UNVESTED_VALUE(cls):
                    return cls("UNVESTED_VALUE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def USER_ACTIVE_DAYS(cls):
                    return cls("USER_ACTIVE_DAYS")
                
                @schemas.classproperty
                def USER_CAN_EDIT_COMP_FOR_JOB(cls):
                    return cls("USER_CAN_EDIT_COMP_FOR_JOB")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def VARIABLE(cls):
                    return cls("VARIABLE")
                
                @schemas.classproperty
                def VARIABLE_AMOUNT(cls):
                    return cls("VARIABLE_AMOUNT")
                
                @schemas.classproperty
                def VARIABLE_INTERVAL(cls):
                    return cls("VARIABLE_INTERVAL")
                
                @schemas.classproperty
                def VARIABLE_PERCENT(cls):
                    return cls("VARIABLE_PERCENT")
                
                @schemas.classproperty
                def VARIABLE_PRIMARY(cls):
                    return cls("VARIABLE_PRIMARY")
                
                @schemas.classproperty
                def VARIABLE_TARGET(cls):
                    return cls("VARIABLE_TARGET")
                
                @schemas.classproperty
                def VARIABLE_TARGET_AMOUNT(cls):
                    return cls("VARIABLE_TARGET_AMOUNT")
                
                @schemas.classproperty
                def VARIABLE_TARGET_ANNUALIZED(cls):
                    return cls("VARIABLE_TARGET_ANNUALIZED")
                
                @schemas.classproperty
                def VARIABLE_TARGET_CURRENCY(cls):
                    return cls("VARIABLE_TARGET_CURRENCY")
                
                @schemas.classproperty
                def VARIABLE_TARGET_PERCENT(cls):
                    return cls("VARIABLE_TARGET_PERCENT")
                
                @schemas.classproperty
                def VARIABLE_TARGET_TYPE(cls):
                    return cls("VARIABLE_TARGET_TYPE")
                
                @schemas.classproperty
                def VARIABLE_TARGETS(cls):
                    return cls("VARIABLE_TARGETS")
                
                @schemas.classproperty
                def VARIABLE_TARGETS_LAST_RAISE_DATE(cls):
                    return cls("VARIABLE_TARGETS_LAST_RAISE_DATE")
                
                @schemas.classproperty
                def VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE(cls):
                    return cls("VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE")
                
                @schemas.classproperty
                def VARIABLE_TARGETS_LAST_RAISE_PAY(cls):
                    return cls("VARIABLE_TARGETS_LAST_RAISE_PAY")
                
                @schemas.classproperty
                def VARIABLE_TARGETS_LAST_RAISE_PERCENT(cls):
                    return cls("VARIABLE_TARGETS_LAST_RAISE_PERCENT")
                
                @schemas.classproperty
                def VARIABLE_TYPE(cls):
                    return cls("VARIABLE_TYPE")
                
                @schemas.classproperty
                def VESTED_DATE(cls):
                    return cls("VESTED_DATE")
                
                @schemas.classproperty
                def VESTED_SHARES(cls):
                    return cls("VESTED_SHARES")
                
                @schemas.classproperty
                def VESTED_VALUE(cls):
                    return cls("VESTED_VALUE")
                
                @schemas.classproperty
                def WEEKS_PER_YEAR(cls):
                    return cls("WEEKS_PER_YEAR")
                
                @schemas.classproperty
                def WORK_ADDRESS(cls):
                    return cls("WORK_ADDRESS")
            categoryId = schemas.StrSchema
            
            
            class classification(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "COMPOUND": "COMPOUND",
                    }
                
                @schemas.classproperty
                def COMPOUND(cls):
                    return cls("COMPOUND")
            places = schemas.Int32Schema
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            deleteId = schemas.StrSchema
            deleteAt = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "orgId": orgId,
                "name": name,
                "label": label,
                "question": question,
                "inUse": inUse,
                "expr": expr,
                "exprType": exprType,
                "type": type,
                "plural": plural,
                "values": values,
                "defaultValue": defaultValue,
                "options": options,
                "entityType": entityType,
                "sensitive": sensitive,
                "hideExpr": hideExpr,
                "expireDays": expireDays,
                "status": status,
                "tableId": tableId,
                "tableRef": tableRef,
                "isUnique": isUnique,
                "isRequired": isRequired,
                "isEffectiveDated": isEffectiveDated,
                "dataFetchTypes": dataFetchTypes,
                "aliases": aliases,
                "calc": calc,
                "categoryId": categoryId,
                "classification": classification,
                "places": places,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question"]) -> MetaOapg.properties.question: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inUse"]) -> MetaOapg.properties.inUse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expr"]) -> MetaOapg.properties.expr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exprType"]) -> MetaOapg.properties.exprType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plural"]) -> MetaOapg.properties.plural: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultValue"]) -> MetaOapg.properties.defaultValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitive"]) -> MetaOapg.properties.sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hideExpr"]) -> MetaOapg.properties.hideExpr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireDays"]) -> MetaOapg.properties.expireDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableId"]) -> MetaOapg.properties.tableId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableRef"]) -> 'TableRef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isUnique"]) -> MetaOapg.properties.isUnique: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRequired"]) -> MetaOapg.properties.isRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEffectiveDated"]) -> MetaOapg.properties.isEffectiveDated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataFetchTypes"]) -> 'PartialFieldDataFetchTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aliases"]) -> 'PartialFieldAliases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calc"]) -> MetaOapg.properties.calc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categoryId"]) -> MetaOapg.properties.categoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["places"]) -> MetaOapg.properties.places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "orgId", "name", "label", "question", "inUse", "expr", "exprType", "type", "plural", "values", "defaultValue", "options", "entityType", "sensitive", "hideExpr", "expireDays", "status", "tableId", "tableRef", "isUnique", "isRequired", "isEffectiveDated", "dataFetchTypes", "aliases", "calc", "categoryId", "classification", "places", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question"]) -> typing.Union[MetaOapg.properties.question, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inUse"]) -> typing.Union[MetaOapg.properties.inUse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expr"]) -> typing.Union[MetaOapg.properties.expr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exprType"]) -> typing.Union[MetaOapg.properties.exprType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plural"]) -> typing.Union[MetaOapg.properties.plural, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union[MetaOapg.properties.values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultValue"]) -> typing.Union[MetaOapg.properties.defaultValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union[MetaOapg.properties.options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> typing.Union[MetaOapg.properties.entityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitive"]) -> typing.Union[MetaOapg.properties.sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hideExpr"]) -> typing.Union[MetaOapg.properties.hideExpr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireDays"]) -> typing.Union[MetaOapg.properties.expireDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableId"]) -> typing.Union[MetaOapg.properties.tableId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableRef"]) -> typing.Union['TableRef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isUnique"]) -> typing.Union[MetaOapg.properties.isUnique, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRequired"]) -> typing.Union[MetaOapg.properties.isRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEffectiveDated"]) -> typing.Union[MetaOapg.properties.isEffectiveDated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataFetchTypes"]) -> typing.Union['PartialFieldDataFetchTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aliases"]) -> typing.Union['PartialFieldAliases', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calc"]) -> typing.Union[MetaOapg.properties.calc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categoryId"]) -> typing.Union[MetaOapg.properties.categoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["places"]) -> typing.Union[MetaOapg.properties.places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> typing.Union[MetaOapg.properties.updateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> typing.Union[MetaOapg.properties.updateAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "orgId", "name", "label", "question", "inUse", "expr", "exprType", "type", "plural", "values", "defaultValue", "options", "entityType", "sensitive", "hideExpr", "expireDays", "status", "tableId", "tableRef", "isUnique", "isRequired", "isEffectiveDated", "dataFetchTypes", "aliases", "calc", "categoryId", "classification", "places", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        question: typing.Union[MetaOapg.properties.question, str, schemas.Unset] = schemas.unset,
        inUse: typing.Union[MetaOapg.properties.inUse, bool, schemas.Unset] = schemas.unset,
        expr: typing.Union[MetaOapg.properties.expr, str, schemas.Unset] = schemas.unset,
        exprType: typing.Union[MetaOapg.properties.exprType, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        plural: typing.Union[MetaOapg.properties.plural, str, schemas.Unset] = schemas.unset,
        values: typing.Union[MetaOapg.properties.values, list, tuple, schemas.Unset] = schemas.unset,
        defaultValue: typing.Union[MetaOapg.properties.defaultValue, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        entityType: typing.Union[MetaOapg.properties.entityType, str, schemas.Unset] = schemas.unset,
        sensitive: typing.Union[MetaOapg.properties.sensitive, str, schemas.Unset] = schemas.unset,
        hideExpr: typing.Union[MetaOapg.properties.hideExpr, bool, schemas.Unset] = schemas.unset,
        expireDays: typing.Union[MetaOapg.properties.expireDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        tableId: typing.Union[MetaOapg.properties.tableId, str, schemas.Unset] = schemas.unset,
        tableRef: typing.Union['TableRef', schemas.Unset] = schemas.unset,
        isUnique: typing.Union[MetaOapg.properties.isUnique, bool, schemas.Unset] = schemas.unset,
        isRequired: typing.Union[MetaOapg.properties.isRequired, bool, schemas.Unset] = schemas.unset,
        isEffectiveDated: typing.Union[MetaOapg.properties.isEffectiveDated, bool, schemas.Unset] = schemas.unset,
        dataFetchTypes: typing.Union['PartialFieldDataFetchTypes', schemas.Unset] = schemas.unset,
        aliases: typing.Union['PartialFieldAliases', schemas.Unset] = schemas.unset,
        calc: typing.Union[MetaOapg.properties.calc, str, schemas.Unset] = schemas.unset,
        categoryId: typing.Union[MetaOapg.properties.categoryId, str, schemas.Unset] = schemas.unset,
        classification: typing.Union[MetaOapg.properties.classification, str, schemas.Unset] = schemas.unset,
        places: typing.Union[MetaOapg.properties.places, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, str, schemas.Unset] = schemas.unset,
        updateId: typing.Union[MetaOapg.properties.updateId, str, schemas.Unset] = schemas.unset,
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartialField':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            orgId=orgId,
            name=name,
            label=label,
            question=question,
            inUse=inUse,
            expr=expr,
            exprType=exprType,
            type=type,
            plural=plural,
            values=values,
            defaultValue=defaultValue,
            options=options,
            entityType=entityType,
            sensitive=sensitive,
            hideExpr=hideExpr,
            expireDays=expireDays,
            status=status,
            tableId=tableId,
            tableRef=tableRef,
            isUnique=isUnique,
            isRequired=isRequired,
            isEffectiveDated=isEffectiveDated,
            dataFetchTypes=dataFetchTypes,
            aliases=aliases,
            calc=calc,
            categoryId=categoryId,
            classification=classification,
            places=places,
            createId=createId,
            createAt=createAt,
            updateId=updateId,
            updateAt=updateAt,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.enum_value import EnumValue
from chart_hop_python_sdk.model.partial_field_aliases import PartialFieldAliases
from chart_hop_python_sdk.model.partial_field_data_fetch_types import PartialFieldDataFetchTypes
from chart_hop_python_sdk.model.table_ref import TableRef
