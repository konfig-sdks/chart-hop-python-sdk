# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class BulkChangeAssessmentTypesBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ids",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def ids() -> typing.Type['BulkChangeAssessmentTypesBodyIds']:
                return BulkChangeAssessmentTypesBodyIds
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "REVIEW": "REVIEW",
                        "COMP_REVIEW": "COMP_REVIEW",
                        "SURVEY": "SURVEY",
                    }
                
                @schemas.classproperty
                def REVIEW(cls):
                    return cls("REVIEW")
                
                @schemas.classproperty
                def COMP_REVIEW(cls):
                    return cls("COMP_REVIEW")
                
                @schemas.classproperty
                def SURVEY(cls):
                    return cls("SURVEY")
            __annotations__ = {
                "ids": ids,
                "type": type,
            }
    
    ids: 'BulkChangeAssessmentTypesBodyIds'
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ids"]) -> 'BulkChangeAssessmentTypesBodyIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ids", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ids"]) -> 'BulkChangeAssessmentTypesBodyIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ids", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ids: 'BulkChangeAssessmentTypesBodyIds',
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BulkChangeAssessmentTypesBody':
        return super().__new__(
            cls,
            *args,
            ids=ids,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.bulk_change_assessment_types_body_ids import BulkChangeAssessmentTypesBodyIds
