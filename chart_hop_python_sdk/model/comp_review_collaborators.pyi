# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewCollaborators(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "collaborationType",
            "jobToCollaboratorsMap",
            "collaboratorAccess",
        }
        
        class properties:
            
            
            class collaborationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("STATIC")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("DYNAMIC")
            
            
            class collaboratorAccess(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def READ(cls):
                    return cls("READ")
                
                @schemas.classproperty
                def EDIT(cls):
                    return cls("EDIT")
                
                @schemas.classproperty
                def SUBMIT(cls):
                    return cls("SUBMIT")
        
            @staticmethod
            def jobToCollaboratorsMap() -> typing.Type['CompReviewCollaboratorsJobToCollaboratorsMap']:
                return CompReviewCollaboratorsJobToCollaboratorsMap
        
            @staticmethod
            def collaboratorJobIds() -> typing.Type['CompReviewCollaboratorsCollaboratorJobIds']:
                return CompReviewCollaboratorsCollaboratorJobIds
        
            @staticmethod
            def collaboratorMatrix() -> typing.Type['CollaboratorMatrix']:
                return CollaboratorMatrix
            __annotations__ = {
                "collaborationType": collaborationType,
                "collaboratorAccess": collaboratorAccess,
                "jobToCollaboratorsMap": jobToCollaboratorsMap,
                "collaboratorJobIds": collaboratorJobIds,
                "collaboratorMatrix": collaboratorMatrix,
            }
    
    collaborationType: MetaOapg.properties.collaborationType
    jobToCollaboratorsMap: 'CompReviewCollaboratorsJobToCollaboratorsMap'
    collaboratorAccess: MetaOapg.properties.collaboratorAccess
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaborationType"]) -> MetaOapg.properties.collaborationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaboratorAccess"]) -> MetaOapg.properties.collaboratorAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobToCollaboratorsMap"]) -> 'CompReviewCollaboratorsJobToCollaboratorsMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaboratorJobIds"]) -> 'CompReviewCollaboratorsCollaboratorJobIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaboratorMatrix"]) -> 'CollaboratorMatrix': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collaborationType", "collaboratorAccess", "jobToCollaboratorsMap", "collaboratorJobIds", "collaboratorMatrix", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaborationType"]) -> MetaOapg.properties.collaborationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaboratorAccess"]) -> MetaOapg.properties.collaboratorAccess: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobToCollaboratorsMap"]) -> 'CompReviewCollaboratorsJobToCollaboratorsMap': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaboratorJobIds"]) -> typing.Union['CompReviewCollaboratorsCollaboratorJobIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaboratorMatrix"]) -> typing.Union['CollaboratorMatrix', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collaborationType", "collaboratorAccess", "jobToCollaboratorsMap", "collaboratorJobIds", "collaboratorMatrix", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        collaborationType: typing.Union[MetaOapg.properties.collaborationType, str, ],
        jobToCollaboratorsMap: 'CompReviewCollaboratorsJobToCollaboratorsMap',
        collaboratorAccess: typing.Union[MetaOapg.properties.collaboratorAccess, str, ],
        collaboratorJobIds: typing.Union['CompReviewCollaboratorsCollaboratorJobIds', schemas.Unset] = schemas.unset,
        collaboratorMatrix: typing.Union['CollaboratorMatrix', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewCollaborators':
        return super().__new__(
            cls,
            *args,
            collaborationType=collaborationType,
            jobToCollaboratorsMap=jobToCollaboratorsMap,
            collaboratorAccess=collaboratorAccess,
            collaboratorJobIds=collaboratorJobIds,
            collaboratorMatrix=collaboratorMatrix,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.collaborator_matrix import CollaboratorMatrix
from chart_hop_python_sdk.model.comp_review_collaborators_collaborator_job_ids import CompReviewCollaboratorsCollaboratorJobIds
from chart_hop_python_sdk.model.comp_review_collaborators_job_to_collaborators_map import CompReviewCollaboratorsJobToCollaboratorsMap
