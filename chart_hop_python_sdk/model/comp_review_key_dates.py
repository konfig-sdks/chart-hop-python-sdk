# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewKeyDates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cycleBeginDate",
            "levelsSubmitByDate",
            "finalApprovalDate",
        }
        
        class properties:
            cycleBeginDate = schemas.DateSchema
            levelsSubmitByDate = schemas.DateSchema
            finalApprovalDate = schemas.DateSchema
            payrollEffectiveDate = schemas.DateSchema
            customEffectiveDate = schemas.DateSchema
            isSkipAfterSubmitOverdue = schemas.BoolSchema
            skippedAt = schemas.Int64Schema
            isEdited = schemas.BoolSchema
            __annotations__ = {
                "cycleBeginDate": cycleBeginDate,
                "levelsSubmitByDate": levelsSubmitByDate,
                "finalApprovalDate": finalApprovalDate,
                "payrollEffectiveDate": payrollEffectiveDate,
                "customEffectiveDate": customEffectiveDate,
                "isSkipAfterSubmitOverdue": isSkipAfterSubmitOverdue,
                "skippedAt": skippedAt,
                "isEdited": isEdited,
            }
    
    cycleBeginDate: MetaOapg.properties.cycleBeginDate
    levelsSubmitByDate: MetaOapg.properties.levelsSubmitByDate
    finalApprovalDate: MetaOapg.properties.finalApprovalDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleBeginDate"]) -> MetaOapg.properties.cycleBeginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["levelsSubmitByDate"]) -> MetaOapg.properties.levelsSubmitByDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalApprovalDate"]) -> MetaOapg.properties.finalApprovalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollEffectiveDate"]) -> MetaOapg.properties.payrollEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customEffectiveDate"]) -> MetaOapg.properties.customEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSkipAfterSubmitOverdue"]) -> MetaOapg.properties.isSkipAfterSubmitOverdue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skippedAt"]) -> MetaOapg.properties.skippedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEdited"]) -> MetaOapg.properties.isEdited: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cycleBeginDate", "levelsSubmitByDate", "finalApprovalDate", "payrollEffectiveDate", "customEffectiveDate", "isSkipAfterSubmitOverdue", "skippedAt", "isEdited", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleBeginDate"]) -> MetaOapg.properties.cycleBeginDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["levelsSubmitByDate"]) -> MetaOapg.properties.levelsSubmitByDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalApprovalDate"]) -> MetaOapg.properties.finalApprovalDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollEffectiveDate"]) -> typing.Union[MetaOapg.properties.payrollEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customEffectiveDate"]) -> typing.Union[MetaOapg.properties.customEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSkipAfterSubmitOverdue"]) -> typing.Union[MetaOapg.properties.isSkipAfterSubmitOverdue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skippedAt"]) -> typing.Union[MetaOapg.properties.skippedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEdited"]) -> typing.Union[MetaOapg.properties.isEdited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cycleBeginDate", "levelsSubmitByDate", "finalApprovalDate", "payrollEffectiveDate", "customEffectiveDate", "isSkipAfterSubmitOverdue", "skippedAt", "isEdited", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cycleBeginDate: typing.Union[MetaOapg.properties.cycleBeginDate, str, date, ],
        levelsSubmitByDate: typing.Union[MetaOapg.properties.levelsSubmitByDate, str, date, ],
        finalApprovalDate: typing.Union[MetaOapg.properties.finalApprovalDate, str, date, ],
        payrollEffectiveDate: typing.Union[MetaOapg.properties.payrollEffectiveDate, str, date, schemas.Unset] = schemas.unset,
        customEffectiveDate: typing.Union[MetaOapg.properties.customEffectiveDate, str, date, schemas.Unset] = schemas.unset,
        isSkipAfterSubmitOverdue: typing.Union[MetaOapg.properties.isSkipAfterSubmitOverdue, bool, schemas.Unset] = schemas.unset,
        skippedAt: typing.Union[MetaOapg.properties.skippedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isEdited: typing.Union[MetaOapg.properties.isEdited, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewKeyDates':
        return super().__new__(
            cls,
            *args,
            cycleBeginDate=cycleBeginDate,
            levelsSubmitByDate=levelsSubmitByDate,
            finalApprovalDate=finalApprovalDate,
            payrollEffectiveDate=payrollEffectiveDate,
            customEffectiveDate=customEffectiveDate,
            isSkipAfterSubmitOverdue=isSkipAfterSubmitOverdue,
            skippedAt=skippedAt,
            isEdited=isEdited,
            _configuration=_configuration,
            **kwargs,
        )
