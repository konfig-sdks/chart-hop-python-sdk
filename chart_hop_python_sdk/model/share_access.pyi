# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ShareAccess(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "access",
        }
        
        class properties:
            
            
            class access(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def LIMITED_READ(cls):
                    return cls("LIMITED_READ")
                
                @schemas.classproperty
                def LIMITED_WRITE(cls):
                    return cls("LIMITED_WRITE")
                
                @schemas.classproperty
                def STANDARD_READ(cls):
                    return cls("STANDARD_READ")
                
                @schemas.classproperty
                def STANDARD_WRITE(cls):
                    return cls("STANDARD_WRITE")
                
                @schemas.classproperty
                def COMPENSATION_READ(cls):
                    return cls("COMPENSATION_READ")
                
                @schemas.classproperty
                def FULL_READ(cls):
                    return cls("FULL_READ")
                
                @schemas.classproperty
                def COMP_PLANNING_PARTICIPANT(cls):
                    return cls("COMP_PLANNING_PARTICIPANT")
                
                @schemas.classproperty
                def COMPENSATION_WRITE(cls):
                    return cls("COMPENSATION_WRITE")
                
                @schemas.classproperty
                def WRITE(cls):
                    return cls("WRITE")
                
                @schemas.classproperty
                def COMPENSATION_OWNER(cls):
                    return cls("COMPENSATION_OWNER")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("OWNER")
            userId = schemas.StrSchema
            groupId = schemas.StrSchema
            fields = schemas.StrSchema
            __annotations__ = {
                "access": access,
                "userId": userId,
                "groupId": groupId,
                "fields": fields,
            }
    
    access: MetaOapg.properties.access
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "userId", "groupId", "fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "userId", "groupId", "fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        access: typing.Union[MetaOapg.properties.access, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShareAccess':
        return super().__new__(
            cls,
            *args,
            access=access,
            userId=userId,
            groupId=groupId,
            fields=fields,
            _configuration=_configuration,
            **kwargs,
        )
