# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class BundleInstallEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "entityType",
            "entityId",
            "originalId",
        }
        
        class properties:
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTION": "ACTION",
                        "CATEGORY": "CATEGORY",
                        "FIELD": "FIELD",
                        "FORM": "FORM",
                        "GROUP": "GROUP",
                        "PROFILE_TAB": "PROFILE_TAB",
                        "QUESTION": "QUESTION",
                        "REPORT": "REPORT",
                        "REPORT_CHART": "REPORT_CHART",
                        "TASK_CONFIG": "TASK_CONFIG",
                        "TEMPLATE": "TEMPLATE",
                        "CONTENT": "CONTENT",
                    }
                
                @schemas.classproperty
                def ACTION(cls):
                    return cls("ACTION")
                
                @schemas.classproperty
                def CATEGORY(cls):
                    return cls("CATEGORY")
                
                @schemas.classproperty
                def FIELD(cls):
                    return cls("FIELD")
                
                @schemas.classproperty
                def FORM(cls):
                    return cls("FORM")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def PROFILE_TAB(cls):
                    return cls("PROFILE_TAB")
                
                @schemas.classproperty
                def QUESTION(cls):
                    return cls("QUESTION")
                
                @schemas.classproperty
                def REPORT(cls):
                    return cls("REPORT")
                
                @schemas.classproperty
                def REPORT_CHART(cls):
                    return cls("REPORT_CHART")
                
                @schemas.classproperty
                def TASK_CONFIG(cls):
                    return cls("TASK_CONFIG")
                
                @schemas.classproperty
                def TEMPLATE(cls):
                    return cls("TEMPLATE")
                
                @schemas.classproperty
                def CONTENT(cls):
                    return cls("CONTENT")
            entityId = schemas.StrSchema
            originalId = schemas.StrSchema
            __annotations__ = {
                "entityType": entityType,
                "entityId": entityId,
                "originalId": originalId,
            }
    
    entityType: MetaOapg.properties.entityType
    entityId: MetaOapg.properties.entityId
    originalId: MetaOapg.properties.originalId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalId"]) -> MetaOapg.properties.originalId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entityType", "entityId", "originalId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalId"]) -> MetaOapg.properties.originalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entityType", "entityId", "originalId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, ],
        originalId: typing.Union[MetaOapg.properties.originalId, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BundleInstallEntity':
        return super().__new__(
            cls,
            *args,
            entityType=entityType,
            entityId=entityId,
            originalId=originalId,
            _configuration=_configuration,
            **kwargs,
        )
