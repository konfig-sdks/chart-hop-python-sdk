# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GroupAssignment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "assignmentType",
            "group",
        }
        
        class properties:
        
            @staticmethod
            def group() -> typing.Type['TrackedGroupRef']:
                return TrackedGroupRef
            
            
            class assignmentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LEAD(cls):
                    return cls("LEAD")
                
                @schemas.classproperty
                def MEMBER(cls):
                    return cls("MEMBER")
            __annotations__ = {
                "group": group,
                "assignmentType": assignmentType,
            }
    
    assignmentType: MetaOapg.properties.assignmentType
    group: 'TrackedGroupRef'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'TrackedGroupRef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignmentType"]) -> MetaOapg.properties.assignmentType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["group", "assignmentType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> 'TrackedGroupRef': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignmentType"]) -> MetaOapg.properties.assignmentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["group", "assignmentType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assignmentType: typing.Union[MetaOapg.properties.assignmentType, str, ],
        group: 'TrackedGroupRef',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupAssignment':
        return super().__new__(
            cls,
            *args,
            assignmentType=assignmentType,
            group=group,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.tracked_group_ref import TrackedGroupRef
