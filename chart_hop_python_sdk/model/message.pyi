# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Message(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "notificationType",
            "type",
            "userId",
            "createAt",
            "orgId",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CHAT(cls):
                    return cls("CHAT")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("WEB")
            
            
            class notificationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def WARN(cls):
                    return cls("WARN")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def COMMENT(cls):
                    return cls("COMMENT")
                
                @schemas.classproperty
                def TASK_COMPLETED(cls):
                    return cls("TASK_COMPLETED")
                
                @schemas.classproperty
                def TASK_ASSIGNED(cls):
                    return cls("TASK_ASSIGNED")
                
                @schemas.classproperty
                def REMINDER(cls):
                    return cls("REMINDER")
                
                @schemas.classproperty
                def ANNOUNCEMENT(cls):
                    return cls("ANNOUNCEMENT")
                
                @schemas.classproperty
                def PROCESS_ERROR(cls):
                    return cls("PROCESS_ERROR")
                
                @schemas.classproperty
                def PROCESS_DONE(cls):
                    return cls("PROCESS_DONE")
            userId = schemas.StrSchema
            createAt = schemas.StrSchema
            title = schemas.StrSchema
            content = schemas.StrSchema
            messageUrl = schemas.StrSchema
            key = schemas.StrSchema
            readAt = schemas.StrSchema
            seenAt = schemas.StrSchema
            createId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "type": type,
                "notificationType": notificationType,
                "userId": userId,
                "createAt": createAt,
                "title": title,
                "content": content,
                "messageUrl": messageUrl,
                "key": key,
                "readAt": readAt,
                "seenAt": seenAt,
                "createId": createId,
            }
    
    id: MetaOapg.properties.id
    notificationType: MetaOapg.properties.notificationType
    type: MetaOapg.properties.type
    userId: MetaOapg.properties.userId
    createAt: MetaOapg.properties.createAt
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationType"]) -> MetaOapg.properties.notificationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageUrl"]) -> MetaOapg.properties.messageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readAt"]) -> MetaOapg.properties.readAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seenAt"]) -> MetaOapg.properties.seenAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "type", "notificationType", "userId", "createAt", "title", "content", "messageUrl", "key", "readAt", "seenAt", "createId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationType"]) -> MetaOapg.properties.notificationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageUrl"]) -> typing.Union[MetaOapg.properties.messageUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readAt"]) -> typing.Union[MetaOapg.properties.readAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seenAt"]) -> typing.Union[MetaOapg.properties.seenAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "type", "notificationType", "userId", "createAt", "title", "content", "messageUrl", "key", "readAt", "seenAt", "createId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        notificationType: typing.Union[MetaOapg.properties.notificationType, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        messageUrl: typing.Union[MetaOapg.properties.messageUrl, str, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        readAt: typing.Union[MetaOapg.properties.readAt, str, schemas.Unset] = schemas.unset,
        seenAt: typing.Union[MetaOapg.properties.seenAt, str, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Message':
        return super().__new__(
            cls,
            *args,
            id=id,
            notificationType=notificationType,
            type=type,
            userId=userId,
            createAt=createAt,
            orgId=orgId,
            title=title,
            content=content,
            messageUrl=messageUrl,
            key=key,
            readAt=readAt,
            seenAt=seenAt,
            createId=createId,
            _configuration=_configuration,
            **kwargs,
        )
