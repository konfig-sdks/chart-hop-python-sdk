# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class QueryToken(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "expireAt",
            "params",
            "type",
            "userId",
            "createAt",
            "orgId",
            "token",
        }
        
        class properties:
            id = schemas.StrSchema
            token = schemas.StrSchema
            orgId = schemas.StrSchema
            userId = schemas.StrSchema
            type = schemas.StrSchema
            params = schemas.DictSchema
            createAt = schemas.StrSchema
            expireAt = schemas.StrSchema
            path = schemas.StrSchema
            accessCount = schemas.Int64Schema
            activeAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "token": token,
                "orgId": orgId,
                "userId": userId,
                "type": type,
                "params": params,
                "createAt": createAt,
                "expireAt": expireAt,
                "path": path,
                "accessCount": accessCount,
                "activeAt": activeAt,
            }
    
    id: MetaOapg.properties.id
    expireAt: MetaOapg.properties.expireAt
    params: MetaOapg.properties.params
    type: MetaOapg.properties.type
    userId: MetaOapg.properties.userId
    createAt: MetaOapg.properties.createAt
    orgId: MetaOapg.properties.orgId
    token: MetaOapg.properties.token
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireAt"]) -> MetaOapg.properties.expireAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessCount"]) -> MetaOapg.properties.accessCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeAt"]) -> MetaOapg.properties.activeAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "token", "orgId", "userId", "type", "params", "createAt", "expireAt", "path", "accessCount", "activeAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireAt"]) -> MetaOapg.properties.expireAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessCount"]) -> typing.Union[MetaOapg.properties.accessCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeAt"]) -> typing.Union[MetaOapg.properties.activeAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "token", "orgId", "userId", "type", "params", "createAt", "expireAt", "path", "accessCount", "activeAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        expireAt: typing.Union[MetaOapg.properties.expireAt, str, ],
        params: typing.Union[MetaOapg.properties.params, dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        token: typing.Union[MetaOapg.properties.token, str, ],
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        accessCount: typing.Union[MetaOapg.properties.accessCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        activeAt: typing.Union[MetaOapg.properties.activeAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QueryToken':
        return super().__new__(
            cls,
            *args,
            id=id,
            expireAt=expireAt,
            params=params,
            type=type,
            userId=userId,
            createAt=createAt,
            orgId=orgId,
            token=token,
            path=path,
            accessCount=accessCount,
            activeAt=activeAt,
            _configuration=_configuration,
            **kwargs,
        )
