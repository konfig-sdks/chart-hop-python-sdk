# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class InCycleViewFeatures(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "isApprover",
            "isProposer",
            "isOwner",
            "isCollaborator",
            "isFinalApprover",
        }
        
        class properties:
            isFinalApprover = schemas.BoolSchema
            isProposer = schemas.BoolSchema
            isApprover = schemas.BoolSchema
            isOwner = schemas.BoolSchema
            isCollaborator = schemas.BoolSchema
            isRoot = schemas.BoolSchema
            __annotations__ = {
                "isFinalApprover": isFinalApprover,
                "isProposer": isProposer,
                "isApprover": isApprover,
                "isOwner": isOwner,
                "isCollaborator": isCollaborator,
                "isRoot": isRoot,
            }
    
    isApprover: MetaOapg.properties.isApprover
    isProposer: MetaOapg.properties.isProposer
    isOwner: MetaOapg.properties.isOwner
    isCollaborator: MetaOapg.properties.isCollaborator
    isFinalApprover: MetaOapg.properties.isFinalApprover
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFinalApprover"]) -> MetaOapg.properties.isFinalApprover: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isProposer"]) -> MetaOapg.properties.isProposer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isApprover"]) -> MetaOapg.properties.isApprover: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isOwner"]) -> MetaOapg.properties.isOwner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCollaborator"]) -> MetaOapg.properties.isCollaborator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRoot"]) -> MetaOapg.properties.isRoot: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isFinalApprover", "isProposer", "isApprover", "isOwner", "isCollaborator", "isRoot", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFinalApprover"]) -> MetaOapg.properties.isFinalApprover: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isProposer"]) -> MetaOapg.properties.isProposer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isApprover"]) -> MetaOapg.properties.isApprover: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isOwner"]) -> MetaOapg.properties.isOwner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCollaborator"]) -> MetaOapg.properties.isCollaborator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRoot"]) -> typing.Union[MetaOapg.properties.isRoot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isFinalApprover", "isProposer", "isApprover", "isOwner", "isCollaborator", "isRoot", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isApprover: typing.Union[MetaOapg.properties.isApprover, bool, ],
        isProposer: typing.Union[MetaOapg.properties.isProposer, bool, ],
        isOwner: typing.Union[MetaOapg.properties.isOwner, bool, ],
        isCollaborator: typing.Union[MetaOapg.properties.isCollaborator, bool, ],
        isFinalApprover: typing.Union[MetaOapg.properties.isFinalApprover, bool, ],
        isRoot: typing.Union[MetaOapg.properties.isRoot, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InCycleViewFeatures':
        return super().__new__(
            cls,
            *args,
            isApprover=isApprover,
            isProposer=isProposer,
            isOwner=isOwner,
            isCollaborator=isCollaborator,
            isFinalApprover=isFinalApprover,
            isRoot=isRoot,
            _configuration=_configuration,
            **kwargs,
        )
