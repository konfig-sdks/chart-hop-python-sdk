# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ApprovalChainStage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "approvalCommentRequired",
            "rejectBehavior",
            "approvalChainId",
            "groups",
            "id",
            "orgId",
            "rejectionCommentRequired",
            "order",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            approvalChainId = schemas.StrSchema
            
            
            class rejectBehavior(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BACK_TO_BEGINNING(cls):
                    return cls("BACK_TO_BEGINNING")
                
                @schemas.classproperty
                def PREVIOUS_PHASE(cls):
                    return cls("PREVIOUS_PHASE")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("CANCELED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def REVIEWED(cls):
                    return cls("REVIEWED")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("APPROVED")
                
                @schemas.classproperty
                def SKIPPED(cls):
                    return cls("SKIPPED")
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("SUBMITTED")
            approvalCommentRequired = schemas.BoolSchema
            rejectionCommentRequired = schemas.BoolSchema
            order = schemas.Int32Schema
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApprovalGroup']:
                        return ApprovalGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApprovalGroup'], typing.List['ApprovalGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApprovalGroup':
                    return super().__getitem__(i)
            inclusionExpression = schemas.StrSchema
            
            
            class inclusionBehavior(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ONLY_INCLUDE_IF(cls):
                    return cls("ONLY_INCLUDE_IF")
                
                @schemas.classproperty
                def EXCLUDE_IF(cls):
                    return cls("EXCLUDE_IF")
            expandExpression = schemas.StrSchema
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            deleteId = schemas.StrSchema
            deleteAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "approvalChainId": approvalChainId,
                "rejectBehavior": rejectBehavior,
                "status": status,
                "approvalCommentRequired": approvalCommentRequired,
                "rejectionCommentRequired": rejectionCommentRequired,
                "order": order,
                "groups": groups,
                "inclusionExpression": inclusionExpression,
                "inclusionBehavior": inclusionBehavior,
                "expandExpression": expandExpression,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    approvalCommentRequired: MetaOapg.properties.approvalCommentRequired
    rejectBehavior: MetaOapg.properties.rejectBehavior
    approvalChainId: MetaOapg.properties.approvalChainId
    groups: MetaOapg.properties.groups
    id: MetaOapg.properties.id
    orgId: MetaOapg.properties.orgId
    rejectionCommentRequired: MetaOapg.properties.rejectionCommentRequired
    order: MetaOapg.properties.order
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectBehavior"]) -> MetaOapg.properties.rejectBehavior: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalCommentRequired"]) -> MetaOapg.properties.approvalCommentRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectionCommentRequired"]) -> MetaOapg.properties.rejectionCommentRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclusionExpression"]) -> MetaOapg.properties.inclusionExpression: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclusionBehavior"]) -> MetaOapg.properties.inclusionBehavior: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expandExpression"]) -> MetaOapg.properties.expandExpression: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "approvalChainId", "rejectBehavior", "status", "approvalCommentRequired", "rejectionCommentRequired", "order", "groups", "inclusionExpression", "inclusionBehavior", "expandExpression", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectBehavior"]) -> MetaOapg.properties.rejectBehavior: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalCommentRequired"]) -> MetaOapg.properties.approvalCommentRequired: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectionCommentRequired"]) -> MetaOapg.properties.rejectionCommentRequired: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclusionExpression"]) -> typing.Union[MetaOapg.properties.inclusionExpression, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclusionBehavior"]) -> typing.Union[MetaOapg.properties.inclusionBehavior, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expandExpression"]) -> typing.Union[MetaOapg.properties.expandExpression, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> typing.Union[MetaOapg.properties.createId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> typing.Union[MetaOapg.properties.updateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> typing.Union[MetaOapg.properties.updateAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "approvalChainId", "rejectBehavior", "status", "approvalCommentRequired", "rejectionCommentRequired", "order", "groups", "inclusionExpression", "inclusionBehavior", "expandExpression", "createId", "createAt", "updateId", "updateAt", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approvalCommentRequired: typing.Union[MetaOapg.properties.approvalCommentRequired, bool, ],
        rejectBehavior: typing.Union[MetaOapg.properties.rejectBehavior, str, ],
        approvalChainId: typing.Union[MetaOapg.properties.approvalChainId, str, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        rejectionCommentRequired: typing.Union[MetaOapg.properties.rejectionCommentRequired, bool, ],
        order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        inclusionExpression: typing.Union[MetaOapg.properties.inclusionExpression, str, schemas.Unset] = schemas.unset,
        inclusionBehavior: typing.Union[MetaOapg.properties.inclusionBehavior, str, schemas.Unset] = schemas.unset,
        expandExpression: typing.Union[MetaOapg.properties.expandExpression, str, schemas.Unset] = schemas.unset,
        createId: typing.Union[MetaOapg.properties.createId, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, str, schemas.Unset] = schemas.unset,
        updateId: typing.Union[MetaOapg.properties.updateId, str, schemas.Unset] = schemas.unset,
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApprovalChainStage':
        return super().__new__(
            cls,
            *args,
            approvalCommentRequired=approvalCommentRequired,
            rejectBehavior=rejectBehavior,
            approvalChainId=approvalChainId,
            groups=groups,
            id=id,
            orgId=orgId,
            rejectionCommentRequired=rejectionCommentRequired,
            order=order,
            status=status,
            inclusionExpression=inclusionExpression,
            inclusionBehavior=inclusionBehavior,
            expandExpression=expandExpression,
            createId=createId,
            createAt=createAt,
            updateId=updateId,
            updateAt=updateAt,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.approval_group import ApprovalGroup
