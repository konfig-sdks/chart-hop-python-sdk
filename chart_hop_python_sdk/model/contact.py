# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Contact(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "format",
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADP": "ADP",
                        "BAMBOO": "BAMBOO",
                        "EMPLOYEE": "EMPLOYEE",
                        "GREENHOUSE": "GREENHOUSE",
                        "GOOGLE": "GOOGLE",
                        "GUSTO": "GUSTO",
                        "HUMAANS": "HUMAANS",
                        "JOBVITE": "JOBVITE",
                        "JUSTWORKS": "JUSTWORKS",
                        "LEVER": "LEVER",
                        "NAMELY": "NAMELY",
                        "OKTA": "OKTA",
                        "PAYLOCITY": "PAYLOCITY",
                        "SAPLING": "SAPLING",
                        "PRISM": "PRISM",
                        "SUCCESSFACTORS": "SUCCESSFACTORS",
                        "RIPPLING": "RIPPLING",
                        "TRINET": "TRINET",
                        "ULTIPRO": "ULTIPRO",
                        "WORKDAY": "WORKDAY",
                        "ZENEFITS": "ZENEFITS",
                        "LINKEDIN": "LINKEDIN",
                        "TWITTER": "TWITTER",
                        "GITHUB": "GITHUB",
                        "SLACK": "SLACK",
                        "TIMETASTIC": "TIMETASTIC",
                        "HOME_EMAIL": "HOME_EMAIL",
                        "MOBILE_PHONE": "MOBILE_PHONE",
                        "WORK_EMAIL": "WORK_EMAIL",
                        "HOME_PHONE": "HOME_PHONE",
                        "WORK_PHONE": "WORK_PHONE",
                        "WORK_FAX": "WORK_FAX",
                        "FINCH": "FINCH",
                        "ALPHASTAFF": "ALPHASTAFF",
                        "LEVER_JOB_POSTING": "LEVER_JOB_POSTING",
                        "DEEL": "DEEL",
                        "ADP_ASSOCIATE_ID": "ADP_ASSOCIATE_ID",
                        "ADP_WORKER_ID": "ADP_WORKER_ID",
                    }
                
                @schemas.classproperty
                def ADP(cls):
                    return cls("ADP")
                
                @schemas.classproperty
                def BAMBOO(cls):
                    return cls("BAMBOO")
                
                @schemas.classproperty
                def EMPLOYEE(cls):
                    return cls("EMPLOYEE")
                
                @schemas.classproperty
                def GREENHOUSE(cls):
                    return cls("GREENHOUSE")
                
                @schemas.classproperty
                def GOOGLE(cls):
                    return cls("GOOGLE")
                
                @schemas.classproperty
                def GUSTO(cls):
                    return cls("GUSTO")
                
                @schemas.classproperty
                def HUMAANS(cls):
                    return cls("HUMAANS")
                
                @schemas.classproperty
                def JOBVITE(cls):
                    return cls("JOBVITE")
                
                @schemas.classproperty
                def JUSTWORKS(cls):
                    return cls("JUSTWORKS")
                
                @schemas.classproperty
                def LEVER(cls):
                    return cls("LEVER")
                
                @schemas.classproperty
                def NAMELY(cls):
                    return cls("NAMELY")
                
                @schemas.classproperty
                def OKTA(cls):
                    return cls("OKTA")
                
                @schemas.classproperty
                def PAYLOCITY(cls):
                    return cls("PAYLOCITY")
                
                @schemas.classproperty
                def SAPLING(cls):
                    return cls("SAPLING")
                
                @schemas.classproperty
                def PRISM(cls):
                    return cls("PRISM")
                
                @schemas.classproperty
                def SUCCESSFACTORS(cls):
                    return cls("SUCCESSFACTORS")
                
                @schemas.classproperty
                def RIPPLING(cls):
                    return cls("RIPPLING")
                
                @schemas.classproperty
                def TRINET(cls):
                    return cls("TRINET")
                
                @schemas.classproperty
                def ULTIPRO(cls):
                    return cls("ULTIPRO")
                
                @schemas.classproperty
                def WORKDAY(cls):
                    return cls("WORKDAY")
                
                @schemas.classproperty
                def ZENEFITS(cls):
                    return cls("ZENEFITS")
                
                @schemas.classproperty
                def LINKEDIN(cls):
                    return cls("LINKEDIN")
                
                @schemas.classproperty
                def TWITTER(cls):
                    return cls("TWITTER")
                
                @schemas.classproperty
                def GITHUB(cls):
                    return cls("GITHUB")
                
                @schemas.classproperty
                def SLACK(cls):
                    return cls("SLACK")
                
                @schemas.classproperty
                def TIMETASTIC(cls):
                    return cls("TIMETASTIC")
                
                @schemas.classproperty
                def HOME_EMAIL(cls):
                    return cls("HOME_EMAIL")
                
                @schemas.classproperty
                def MOBILE_PHONE(cls):
                    return cls("MOBILE_PHONE")
                
                @schemas.classproperty
                def WORK_EMAIL(cls):
                    return cls("WORK_EMAIL")
                
                @schemas.classproperty
                def HOME_PHONE(cls):
                    return cls("HOME_PHONE")
                
                @schemas.classproperty
                def WORK_PHONE(cls):
                    return cls("WORK_PHONE")
                
                @schemas.classproperty
                def WORK_FAX(cls):
                    return cls("WORK_FAX")
                
                @schemas.classproperty
                def FINCH(cls):
                    return cls("FINCH")
                
                @schemas.classproperty
                def ALPHASTAFF(cls):
                    return cls("ALPHASTAFF")
                
                @schemas.classproperty
                def LEVER_JOB_POSTING(cls):
                    return cls("LEVER_JOB_POSTING")
                
                @schemas.classproperty
                def DEEL(cls):
                    return cls("DEEL")
                
                @schemas.classproperty
                def ADP_ASSOCIATE_ID(cls):
                    return cls("ADP_ASSOCIATE_ID")
                
                @schemas.classproperty
                def ADP_WORKER_ID(cls):
                    return cls("ADP_WORKER_ID")
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PHONE": "PHONE",
                        "EMAIL": "EMAIL",
                        "ID": "ID",
                    }
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("PHONE")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def ID(cls):
                    return cls("ID")
            value = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "format": format,
                "value": value,
            }
    
    format: MetaOapg.properties.format
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "format", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "format", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contact':
        return super().__new__(
            cls,
            *args,
            format=format,
            type=type,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
