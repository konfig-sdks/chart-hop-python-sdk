# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewReviewersApprovers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "reviewers",
        }
        
        class properties:
            
            
            class reviewers(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALL_MANAGERS(cls):
                    return cls("ALL_MANAGERS")
                
                @schemas.classproperty
                def ONLY_SPECIFIC_LEVEL(cls):
                    return cls("ONLY_SPECIFIC_LEVEL")
                
                @schemas.classproperty
                def ONLY_SPECIFIC_TITLES(cls):
                    return cls("ONLY_SPECIFIC_TITLES")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
        
            @staticmethod
            def reviewerLevels() -> typing.Type['CompReviewReviewersApproversReviewerLevels']:
                return CompReviewReviewersApproversReviewerLevels
        
            @staticmethod
            def reviewerTitles() -> typing.Type['CompReviewReviewersApproversReviewerTitles']:
                return CompReviewReviewersApproversReviewerTitles
            reviewerFilter = schemas.StrSchema
        
            @staticmethod
            def excludedReviewerIds() -> typing.Type['CompReviewReviewersApproversExcludedReviewerIds']:
                return CompReviewReviewersApproversExcludedReviewerIds
        
            @staticmethod
            def approverIds() -> typing.Type['CompReviewReviewersApproversApproverIds']:
                return CompReviewReviewersApproversApproverIds
            __annotations__ = {
                "reviewers": reviewers,
                "reviewerLevels": reviewerLevels,
                "reviewerTitles": reviewerTitles,
                "reviewerFilter": reviewerFilter,
                "excludedReviewerIds": excludedReviewerIds,
                "approverIds": approverIds,
            }
    
    reviewers: MetaOapg.properties.reviewers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewers"]) -> MetaOapg.properties.reviewers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerLevels"]) -> 'CompReviewReviewersApproversReviewerLevels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerTitles"]) -> 'CompReviewReviewersApproversReviewerTitles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerFilter"]) -> MetaOapg.properties.reviewerFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludedReviewerIds"]) -> 'CompReviewReviewersApproversExcludedReviewerIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approverIds"]) -> 'CompReviewReviewersApproversApproverIds': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reviewers", "reviewerLevels", "reviewerTitles", "reviewerFilter", "excludedReviewerIds", "approverIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewers"]) -> MetaOapg.properties.reviewers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerLevels"]) -> typing.Union['CompReviewReviewersApproversReviewerLevels', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerTitles"]) -> typing.Union['CompReviewReviewersApproversReviewerTitles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerFilter"]) -> typing.Union[MetaOapg.properties.reviewerFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludedReviewerIds"]) -> typing.Union['CompReviewReviewersApproversExcludedReviewerIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approverIds"]) -> typing.Union['CompReviewReviewersApproversApproverIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reviewers", "reviewerLevels", "reviewerTitles", "reviewerFilter", "excludedReviewerIds", "approverIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reviewers: typing.Union[MetaOapg.properties.reviewers, str, ],
        reviewerLevels: typing.Union['CompReviewReviewersApproversReviewerLevels', schemas.Unset] = schemas.unset,
        reviewerTitles: typing.Union['CompReviewReviewersApproversReviewerTitles', schemas.Unset] = schemas.unset,
        reviewerFilter: typing.Union[MetaOapg.properties.reviewerFilter, str, schemas.Unset] = schemas.unset,
        excludedReviewerIds: typing.Union['CompReviewReviewersApproversExcludedReviewerIds', schemas.Unset] = schemas.unset,
        approverIds: typing.Union['CompReviewReviewersApproversApproverIds', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewReviewersApprovers':
        return super().__new__(
            cls,
            *args,
            reviewers=reviewers,
            reviewerLevels=reviewerLevels,
            reviewerTitles=reviewerTitles,
            reviewerFilter=reviewerFilter,
            excludedReviewerIds=excludedReviewerIds,
            approverIds=approverIds,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.comp_review_reviewers_approvers_approver_ids import CompReviewReviewersApproversApproverIds
from chart_hop_python_sdk.model.comp_review_reviewers_approvers_excluded_reviewer_ids import CompReviewReviewersApproversExcludedReviewerIds
from chart_hop_python_sdk.model.comp_review_reviewers_approvers_reviewer_levels import CompReviewReviewersApproversReviewerLevels
from chart_hop_python_sdk.model.comp_review_reviewers_approvers_reviewer_titles import CompReviewReviewersApproversReviewerTitles
