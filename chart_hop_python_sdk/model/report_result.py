# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "endDate",
            "createId",
            "options",
            "id",
            "queries",
            "results",
            "createAt",
            "key",
            "orgId",
            "startDate",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            key = schemas.StrSchema
            startDate = schemas.DateSchema
            endDate = schemas.DateSchema
            options = schemas.DictSchema
            
            
            class queries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportQuery']:
                        return ReportQuery
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportQuery'], typing.List['ReportQuery']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'queries':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportQuery':
                    return super().__getitem__(i)
            
            
            class results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportQueryResult']:
                        return ReportQueryResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportQueryResult'], typing.List['ReportQueryResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'results':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportQueryResult':
                    return super().__getitem__(i)
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "OK": "OK",
                        "LOCKED": "LOCKED",
                        "RETRY": "RETRY",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def OK(cls):
                    return cls("OK")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("LOCKED")
                
                @schemas.classproperty
                def RETRY(cls):
                    return cls("RETRY")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            buildStartAt = schemas.StrSchema
            buildEndAt = schemas.StrSchema
            message = schemas.StrSchema
            progress = schemas.Float64Schema
            viewId = schemas.StrSchema
            reportId = schemas.StrSchema
            chartId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "key": key,
                "startDate": startDate,
                "endDate": endDate,
                "options": options,
                "queries": queries,
                "results": results,
                "createId": createId,
                "createAt": createAt,
                "status": status,
                "buildStartAt": buildStartAt,
                "buildEndAt": buildEndAt,
                "message": message,
                "progress": progress,
                "viewId": viewId,
                "reportId": reportId,
                "chartId": chartId,
            }
    
    endDate: MetaOapg.properties.endDate
    createId: MetaOapg.properties.createId
    options: MetaOapg.properties.options
    id: MetaOapg.properties.id
    queries: MetaOapg.properties.queries
    results: MetaOapg.properties.results
    createAt: MetaOapg.properties.createAt
    key: MetaOapg.properties.key
    orgId: MetaOapg.properties.orgId
    startDate: MetaOapg.properties.startDate
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queries"]) -> MetaOapg.properties.queries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildStartAt"]) -> MetaOapg.properties.buildStartAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildEndAt"]) -> MetaOapg.properties.buildEndAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewId"]) -> MetaOapg.properties.viewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chartId"]) -> MetaOapg.properties.chartId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "key", "startDate", "endDate", "options", "queries", "results", "createId", "createAt", "status", "buildStartAt", "buildEndAt", "message", "progress", "viewId", "reportId", "chartId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queries"]) -> MetaOapg.properties.queries: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildStartAt"]) -> typing.Union[MetaOapg.properties.buildStartAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildEndAt"]) -> typing.Union[MetaOapg.properties.buildEndAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union[MetaOapg.properties.progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewId"]) -> typing.Union[MetaOapg.properties.viewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportId"]) -> typing.Union[MetaOapg.properties.reportId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chartId"]) -> typing.Union[MetaOapg.properties.chartId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "key", "startDate", "endDate", "options", "queries", "results", "createId", "createAt", "status", "buildStartAt", "buildEndAt", "message", "progress", "viewId", "reportId", "chartId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, ],
        createId: typing.Union[MetaOapg.properties.createId, str, ],
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        queries: typing.Union[MetaOapg.properties.queries, list, tuple, ],
        results: typing.Union[MetaOapg.properties.results, list, tuple, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        buildStartAt: typing.Union[MetaOapg.properties.buildStartAt, str, schemas.Unset] = schemas.unset,
        buildEndAt: typing.Union[MetaOapg.properties.buildEndAt, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        progress: typing.Union[MetaOapg.properties.progress, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        viewId: typing.Union[MetaOapg.properties.viewId, str, schemas.Unset] = schemas.unset,
        reportId: typing.Union[MetaOapg.properties.reportId, str, schemas.Unset] = schemas.unset,
        chartId: typing.Union[MetaOapg.properties.chartId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportResult':
        return super().__new__(
            cls,
            *args,
            endDate=endDate,
            createId=createId,
            options=options,
            id=id,
            queries=queries,
            results=results,
            createAt=createAt,
            key=key,
            orgId=orgId,
            startDate=startDate,
            status=status,
            buildStartAt=buildStartAt,
            buildEndAt=buildEndAt,
            message=message,
            progress=progress,
            viewId=viewId,
            reportId=reportId,
            chartId=chartId,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.report_query import ReportQuery
from chart_hop_python_sdk.model.report_query_result import ReportQueryResult
