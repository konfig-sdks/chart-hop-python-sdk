# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from chart_hop_python_sdk.pydantic.due_date import DueDate

class PartialTaskConfig(BaseModel):
    # description for all tasks associated with the config that should be used in notifications
    description: typing.Optional[str] = Field(None, alias='description')

    # unique id of task config
    id: typing.Optional[str] = Field(None, alias='id')

    # parent organization id
    org_id: typing.Optional[str] = Field(None, alias='orgId')

    # parent assessment id that this task config belongs to
    assessment_id: typing.Optional[str] = Field(None, alias='assessmentId')

    # parent entity id that this task config belongs to, should be used with entityId
    parent_entity_id: typing.Optional[str] = Field(None, alias='parentEntityId')

    # the primary entity being referenced by the task config
    entity_id: typing.Optional[str] = Field(None, alias='entityId')

    # System generated identifying name so that actions can be triggered as a result of task completion
    slug: typing.Optional[str] = Field(None, alias='slug')

    # type of task generated by the task config
    type: typing.Optional[Literal["FORM_SUBMIT", "CHANGE_APPROVE", "TIMEOFF_APPROVE", "SCENARIO_CHANGES_APPROVE", "SCENARIO_CHANGES_CREATE", "ORG_IMPORT", "COMP_REVIEW_APPROVAL_SUBMIT", "SCENARIO_APPROVAL_SUBMIT", "APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER", "ACTION"]] = Field(None, alias='type')

    due_date: typing.Optional[DueDate] = Field(None, alias='dueDate')

    # sets pastDueAction on the task when it's generated
    past_due_action: typing.Optional[Literal["NONE", "SET_EXPIRED"]] = Field(None, alias='pastDueAction')

    # sets isSkippable on the task
    is_skippable: typing.Optional[bool] = Field(None, alias='isSkippable')

    # human-readable label that should be used for all tasks associated with the config as the task name
    label: typing.Optional[str] = Field(None, alias='label')

    # created by user id
    create_id: typing.Optional[str] = Field(None, alias='createId')

    # created timestamp
    create_at: typing.Optional[str] = Field(None, alias='createAt')

    # last updated by user id
    update_id: typing.Optional[str] = Field(None, alias='updateId')

    # last updated timestamp
    update_at: typing.Optional[str] = Field(None, alias='updateAt')

    # deleted by user id
    delete_id: typing.Optional[str] = Field(None, alias='deleteId')

    # deleted timestamp
    delete_at: typing.Optional[str] = Field(None, alias='deleteAt')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
