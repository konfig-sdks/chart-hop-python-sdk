# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CreateReportChart(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "query",
            "label",
            "sort",
            "type",
        }
        
        class properties:
            label = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LINE": "LINE",
                        "AREA": "AREA",
                        "STACKED": "STACKED",
                        "BAR": "BAR",
                        "VERTICAL_BAR": "VERTICAL_BAR",
                        "HORIZONTAL_BAR": "HORIZONTAL_BAR",
                        "PIE": "PIE",
                        "TABLE": "TABLE",
                        "TABLE_CROSSTAB": "TABLE_CROSSTAB",
                        "SINGLE_METRIC": "SINGLE_METRIC",
                        "HEADER": "HEADER",
                        "TEXT": "TEXT",
                    }
                
                @schemas.classproperty
                def LINE(cls):
                    return cls("LINE")
                
                @schemas.classproperty
                def AREA(cls):
                    return cls("AREA")
                
                @schemas.classproperty
                def STACKED(cls):
                    return cls("STACKED")
                
                @schemas.classproperty
                def BAR(cls):
                    return cls("BAR")
                
                @schemas.classproperty
                def VERTICAL_BAR(cls):
                    return cls("VERTICAL_BAR")
                
                @schemas.classproperty
                def HORIZONTAL_BAR(cls):
                    return cls("HORIZONTAL_BAR")
                
                @schemas.classproperty
                def PIE(cls):
                    return cls("PIE")
                
                @schemas.classproperty
                def TABLE(cls):
                    return cls("TABLE")
                
                @schemas.classproperty
                def TABLE_CROSSTAB(cls):
                    return cls("TABLE_CROSSTAB")
                
                @schemas.classproperty
                def SINGLE_METRIC(cls):
                    return cls("SINGLE_METRIC")
                
                @schemas.classproperty
                def HEADER(cls):
                    return cls("HEADER")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
        
            @staticmethod
            def query() -> typing.Type['ReportQuery']:
                return ReportQuery
            sort = schemas.Int32Schema
            filter = schemas.StrSchema
            filterOverride = schemas.BoolSchema
            isAdvancedQueryMode = schemas.BoolSchema
            __annotations__ = {
                "label": label,
                "type": type,
                "query": query,
                "sort": sort,
                "filter": filter,
                "filterOverride": filterOverride,
                "isAdvancedQueryMode": isAdvancedQueryMode,
            }
    
    query: 'ReportQuery'
    label: MetaOapg.properties.label
    sort: MetaOapg.properties.sort
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query"]) -> 'ReportQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterOverride"]) -> MetaOapg.properties.filterOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAdvancedQueryMode"]) -> MetaOapg.properties.isAdvancedQueryMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "type", "query", "sort", "filter", "filterOverride", "isAdvancedQueryMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query"]) -> 'ReportQuery': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterOverride"]) -> typing.Union[MetaOapg.properties.filterOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAdvancedQueryMode"]) -> typing.Union[MetaOapg.properties.isAdvancedQueryMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "type", "query", "sort", "filter", "filterOverride", "isAdvancedQueryMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        query: 'ReportQuery',
        label: typing.Union[MetaOapg.properties.label, str, ],
        sort: typing.Union[MetaOapg.properties.sort, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        filterOverride: typing.Union[MetaOapg.properties.filterOverride, bool, schemas.Unset] = schemas.unset,
        isAdvancedQueryMode: typing.Union[MetaOapg.properties.isAdvancedQueryMode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateReportChart':
        return super().__new__(
            cls,
            *args,
            query=query,
            label=label,
            sort=sort,
            type=type,
            filter=filter,
            filterOverride=filterOverride,
            isAdvancedQueryMode=isAdvancedQueryMode,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.report_query import ReportQuery
