# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Template(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "updateId",
            "createId",
            "format",
            "name",
            "updateAt",
            "id",
            "type",
            "content",
            "createAt",
            "orgId",
            "tags",
        }
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['TemplateTags']:
                return TemplateTags
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            name = schemas.StrSchema
            content = schemas.StrSchema
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HTML": "HTML",
                        "MARKDOWN": "MARKDOWN",
                        "TEXT": "TEXT",
                    }
                
                @schemas.classproperty
                def HTML(cls):
                    return cls("HTML")
                
                @schemas.classproperty
                def MARKDOWN(cls):
                    return cls("MARKDOWN")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DOCUMENT": "DOCUMENT",
                        "EMAIL": "EMAIL",
                    }
                
                @schemas.classproperty
                def DOCUMENT(cls):
                    return cls("DOCUMENT")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            description = schemas.StrSchema
            stylesheet = schemas.StrSchema
            filename = schemas.StrSchema
            deleteId = schemas.StrSchema
            deleteAt = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "id": id,
                "orgId": orgId,
                "name": name,
                "content": content,
                "format": format,
                "type": type,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "description": description,
                "stylesheet": stylesheet,
                "filename": filename,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    updateId: MetaOapg.properties.updateId
    createId: MetaOapg.properties.createId
    format: MetaOapg.properties.format
    name: MetaOapg.properties.name
    updateAt: MetaOapg.properties.updateAt
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    content: MetaOapg.properties.content
    createAt: MetaOapg.properties.createAt
    orgId: MetaOapg.properties.orgId
    tags: 'TemplateTags'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'TemplateTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stylesheet"]) -> MetaOapg.properties.stylesheet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "id", "orgId", "name", "content", "format", "type", "createId", "createAt", "updateId", "updateAt", "description", "stylesheet", "filename", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> 'TemplateTags': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stylesheet"]) -> typing.Union[MetaOapg.properties.stylesheet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "id", "orgId", "name", "content", "format", "type", "createId", "createAt", "updateId", "updateAt", "description", "stylesheet", "filename", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        updateId: typing.Union[MetaOapg.properties.updateId, str, ],
        createId: typing.Union[MetaOapg.properties.createId, str, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        content: typing.Union[MetaOapg.properties.content, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        tags: 'TemplateTags',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        stylesheet: typing.Union[MetaOapg.properties.stylesheet, str, schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Template':
        return super().__new__(
            cls,
            *args,
            updateId=updateId,
            createId=createId,
            format=format,
            name=name,
            updateAt=updateAt,
            id=id,
            type=type,
            content=content,
            createAt=createAt,
            orgId=orgId,
            tags=tags,
            description=description,
            stylesheet=stylesheet,
            filename=filename,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.template_tags import TemplateTags
