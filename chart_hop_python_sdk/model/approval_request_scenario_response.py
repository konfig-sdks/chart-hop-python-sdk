# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ApprovalRequestScenarioResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "updateId",
            "approvalChainId",
            "stageOverrides",
            "createId",
            "updateAt",
            "isRejectionCommentRequiredForActiveStage",
            "id",
            "scenarioId",
            "createAt",
            "isApprovalCommentRequiredForActiveStage",
            "isComplete",
        }
        
        class properties:
            id = schemas.StrSchema
            isComplete = schemas.BoolSchema
            
            
            class stageOverrides(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApprovalChainStageOverride']:
                        return ApprovalChainStageOverride
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApprovalChainStageOverride'], typing.List['ApprovalChainStageOverride']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stageOverrides':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApprovalChainStageOverride':
                    return super().__getitem__(i)
            isApprovalCommentRequiredForActiveStage = schemas.BoolSchema
            isRejectionCommentRequiredForActiveStage = schemas.BoolSchema
            approvalChainId = schemas.StrSchema
            scenarioId = schemas.StrSchema
            createId = schemas.StrSchema
            createAt = schemas.Int64Schema
            updateId = schemas.StrSchema
            updateAt = schemas.Int64Schema
        
            @staticmethod
            def activeStage() -> typing.Type['ApprovalChainStageOverride']:
                return ApprovalChainStageOverride
        
            @staticmethod
            def proposerStage() -> typing.Type['ApprovalChainStageOverride']:
                return ApprovalChainStageOverride
        
            @staticmethod
            def nextReviewerStage() -> typing.Type['ApprovalChainStageOverride']:
                return ApprovalChainStageOverride
        
            @staticmethod
            def rejectedStage() -> typing.Type['ApprovalChainStageOverride']:
                return ApprovalChainStageOverride
            deleteId = schemas.StrSchema
            deleteAt = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "isComplete": isComplete,
                "stageOverrides": stageOverrides,
                "isApprovalCommentRequiredForActiveStage": isApprovalCommentRequiredForActiveStage,
                "isRejectionCommentRequiredForActiveStage": isRejectionCommentRequiredForActiveStage,
                "approvalChainId": approvalChainId,
                "scenarioId": scenarioId,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "activeStage": activeStage,
                "proposerStage": proposerStage,
                "nextReviewerStage": nextReviewerStage,
                "rejectedStage": rejectedStage,
                "deleteId": deleteId,
                "deleteAt": deleteAt,
            }
    
    updateId: MetaOapg.properties.updateId
    approvalChainId: MetaOapg.properties.approvalChainId
    stageOverrides: MetaOapg.properties.stageOverrides
    createId: MetaOapg.properties.createId
    updateAt: MetaOapg.properties.updateAt
    isRejectionCommentRequiredForActiveStage: MetaOapg.properties.isRejectionCommentRequiredForActiveStage
    id: MetaOapg.properties.id
    scenarioId: MetaOapg.properties.scenarioId
    createAt: MetaOapg.properties.createAt
    isApprovalCommentRequiredForActiveStage: MetaOapg.properties.isApprovalCommentRequiredForActiveStage
    isComplete: MetaOapg.properties.isComplete
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stageOverrides"]) -> MetaOapg.properties.stageOverrides: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isApprovalCommentRequiredForActiveStage"]) -> MetaOapg.properties.isApprovalCommentRequiredForActiveStage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRejectionCommentRequiredForActiveStage"]) -> MetaOapg.properties.isRejectionCommentRequiredForActiveStage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeStage"]) -> 'ApprovalChainStageOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposerStage"]) -> 'ApprovalChainStageOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextReviewerStage"]) -> 'ApprovalChainStageOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectedStage"]) -> 'ApprovalChainStageOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteId"]) -> MetaOapg.properties.deleteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAt"]) -> MetaOapg.properties.deleteAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "isComplete", "stageOverrides", "isApprovalCommentRequiredForActiveStage", "isRejectionCommentRequiredForActiveStage", "approvalChainId", "scenarioId", "createId", "createAt", "updateId", "updateAt", "activeStage", "proposerStage", "nextReviewerStage", "rejectedStage", "deleteId", "deleteAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stageOverrides"]) -> MetaOapg.properties.stageOverrides: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isApprovalCommentRequiredForActiveStage"]) -> MetaOapg.properties.isApprovalCommentRequiredForActiveStage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRejectionCommentRequiredForActiveStage"]) -> MetaOapg.properties.isRejectionCommentRequiredForActiveStage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalChainId"]) -> MetaOapg.properties.approvalChainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeStage"]) -> typing.Union['ApprovalChainStageOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposerStage"]) -> typing.Union['ApprovalChainStageOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextReviewerStage"]) -> typing.Union['ApprovalChainStageOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectedStage"]) -> typing.Union['ApprovalChainStageOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteId"]) -> typing.Union[MetaOapg.properties.deleteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAt"]) -> typing.Union[MetaOapg.properties.deleteAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "isComplete", "stageOverrides", "isApprovalCommentRequiredForActiveStage", "isRejectionCommentRequiredForActiveStage", "approvalChainId", "scenarioId", "createId", "createAt", "updateId", "updateAt", "activeStage", "proposerStage", "nextReviewerStage", "rejectedStage", "deleteId", "deleteAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        updateId: typing.Union[MetaOapg.properties.updateId, str, ],
        approvalChainId: typing.Union[MetaOapg.properties.approvalChainId, str, ],
        stageOverrides: typing.Union[MetaOapg.properties.stageOverrides, list, tuple, ],
        createId: typing.Union[MetaOapg.properties.createId, str, ],
        updateAt: typing.Union[MetaOapg.properties.updateAt, decimal.Decimal, int, ],
        isRejectionCommentRequiredForActiveStage: typing.Union[MetaOapg.properties.isRejectionCommentRequiredForActiveStage, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, decimal.Decimal, int, ],
        isApprovalCommentRequiredForActiveStage: typing.Union[MetaOapg.properties.isApprovalCommentRequiredForActiveStage, bool, ],
        isComplete: typing.Union[MetaOapg.properties.isComplete, bool, ],
        activeStage: typing.Union['ApprovalChainStageOverride', schemas.Unset] = schemas.unset,
        proposerStage: typing.Union['ApprovalChainStageOverride', schemas.Unset] = schemas.unset,
        nextReviewerStage: typing.Union['ApprovalChainStageOverride', schemas.Unset] = schemas.unset,
        rejectedStage: typing.Union['ApprovalChainStageOverride', schemas.Unset] = schemas.unset,
        deleteId: typing.Union[MetaOapg.properties.deleteId, str, schemas.Unset] = schemas.unset,
        deleteAt: typing.Union[MetaOapg.properties.deleteAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApprovalRequestScenarioResponse':
        return super().__new__(
            cls,
            *args,
            updateId=updateId,
            approvalChainId=approvalChainId,
            stageOverrides=stageOverrides,
            createId=createId,
            updateAt=updateAt,
            isRejectionCommentRequiredForActiveStage=isRejectionCommentRequiredForActiveStage,
            id=id,
            scenarioId=scenarioId,
            createAt=createAt,
            isApprovalCommentRequiredForActiveStage=isApprovalCommentRequiredForActiveStage,
            isComplete=isComplete,
            activeStage=activeStage,
            proposerStage=proposerStage,
            nextReviewerStage=nextReviewerStage,
            rejectedStage=rejectedStage,
            deleteId=deleteId,
            deleteAt=deleteAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.approval_chain_stage_override import ApprovalChainStageOverride
