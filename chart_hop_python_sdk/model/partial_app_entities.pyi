# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PartialAppEntities(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "persons",
            "jobs",
            "personToJobMap",
            "fields",
        }
        
        class properties:
        
            @staticmethod
            def jobs() -> typing.Type['PartialAppEntitiesJobs']:
                return PartialAppEntitiesJobs
        
            @staticmethod
            def persons() -> typing.Type['PartialAppEntitiesPersons']:
                return PartialAppEntitiesPersons
        
            @staticmethod
            def personToJobMap() -> typing.Type['PartialAppEntitiesPersonToJobMap']:
                return PartialAppEntitiesPersonToJobMap
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Field']:
                        return Field
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Field'], typing.List['Field']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Field':
                    return super().__getitem__(i)
            __annotations__ = {
                "jobs": jobs,
                "persons": persons,
                "personToJobMap": personToJobMap,
                "fields": fields,
            }
    
    persons: 'PartialAppEntitiesPersons'
    jobs: 'PartialAppEntitiesJobs'
    personToJobMap: 'PartialAppEntitiesPersonToJobMap'
    fields: MetaOapg.properties.fields
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> 'PartialAppEntitiesJobs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> 'PartialAppEntitiesPersons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personToJobMap"]) -> 'PartialAppEntitiesPersonToJobMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobs", "persons", "personToJobMap", "fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> 'PartialAppEntitiesJobs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> 'PartialAppEntitiesPersons': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personToJobMap"]) -> 'PartialAppEntitiesPersonToJobMap': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobs", "persons", "personToJobMap", "fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        persons: 'PartialAppEntitiesPersons',
        jobs: 'PartialAppEntitiesJobs',
        personToJobMap: 'PartialAppEntitiesPersonToJobMap',
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartialAppEntities':
        return super().__new__(
            cls,
            *args,
            persons=persons,
            jobs=jobs,
            personToJobMap=personToJobMap,
            fields=fields,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.field import Field
from chart_hop_python_sdk.model.partial_app_entities_jobs import PartialAppEntitiesJobs
from chart_hop_python_sdk.model.partial_app_entities_person_to_job_map import PartialAppEntitiesPersonToJobMap
from chart_hop_python_sdk.model.partial_app_entities_persons import PartialAppEntitiesPersons
