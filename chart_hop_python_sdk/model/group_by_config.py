# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GroupByConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class overrides(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LabelOverride']:
                        return LabelOverride
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LabelOverride'], typing.List['LabelOverride']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'overrides':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LabelOverride':
                    return super().__getitem__(i)
            limit = schemas.Int32Schema
            includeOther = schemas.BoolSchema
            includeNone = schemas.BoolSchema
            includeAllValues = schemas.BoolSchema
            fieldId = schemas.StrSchema
            questionId = schemas.StrSchema
            
            
            class sortBy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LABEL": "LABEL",
                        "KEY": "KEY",
                        "VALUE": "VALUE",
                        "COUNT": "COUNT",
                    }
                
                @schemas.classproperty
                def LABEL(cls):
                    return cls("LABEL")
                
                @schemas.classproperty
                def KEY(cls):
                    return cls("KEY")
                
                @schemas.classproperty
                def VALUE(cls):
                    return cls("VALUE")
                
                @schemas.classproperty
                def COUNT(cls):
                    return cls("COUNT")
            
            
            class sortDirection(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ASC": "ASC",
                        "DESC": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("ASC")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("DESC")
            __annotations__ = {
                "overrides": overrides,
                "limit": limit,
                "includeOther": includeOther,
                "includeNone": includeNone,
                "includeAllValues": includeAllValues,
                "fieldId": fieldId,
                "questionId": questionId,
                "sortBy": sortBy,
                "sortDirection": sortDirection,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overrides"]) -> MetaOapg.properties.overrides: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeOther"]) -> MetaOapg.properties.includeOther: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNone"]) -> MetaOapg.properties.includeNone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeAllValues"]) -> MetaOapg.properties.includeAllValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldId"]) -> MetaOapg.properties.fieldId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questionId"]) -> MetaOapg.properties.questionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortBy"]) -> MetaOapg.properties.sortBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortDirection"]) -> MetaOapg.properties.sortDirection: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["overrides", "limit", "includeOther", "includeNone", "includeAllValues", "fieldId", "questionId", "sortBy", "sortDirection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overrides"]) -> typing.Union[MetaOapg.properties.overrides, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeOther"]) -> typing.Union[MetaOapg.properties.includeOther, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNone"]) -> typing.Union[MetaOapg.properties.includeNone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeAllValues"]) -> typing.Union[MetaOapg.properties.includeAllValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldId"]) -> typing.Union[MetaOapg.properties.fieldId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questionId"]) -> typing.Union[MetaOapg.properties.questionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortBy"]) -> typing.Union[MetaOapg.properties.sortBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortDirection"]) -> typing.Union[MetaOapg.properties.sortDirection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["overrides", "limit", "includeOther", "includeNone", "includeAllValues", "fieldId", "questionId", "sortBy", "sortDirection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        overrides: typing.Union[MetaOapg.properties.overrides, list, tuple, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        includeOther: typing.Union[MetaOapg.properties.includeOther, bool, schemas.Unset] = schemas.unset,
        includeNone: typing.Union[MetaOapg.properties.includeNone, bool, schemas.Unset] = schemas.unset,
        includeAllValues: typing.Union[MetaOapg.properties.includeAllValues, bool, schemas.Unset] = schemas.unset,
        fieldId: typing.Union[MetaOapg.properties.fieldId, str, schemas.Unset] = schemas.unset,
        questionId: typing.Union[MetaOapg.properties.questionId, str, schemas.Unset] = schemas.unset,
        sortBy: typing.Union[MetaOapg.properties.sortBy, str, schemas.Unset] = schemas.unset,
        sortDirection: typing.Union[MetaOapg.properties.sortDirection, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupByConfig':
        return super().__new__(
            cls,
            *args,
            overrides=overrides,
            limit=limit,
            includeOther=includeOther,
            includeNone=includeNone,
            includeAllValues=includeAllValues,
            fieldId=fieldId,
            questionId=questionId,
            sortBy=sortBy,
            sortDirection=sortDirection,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.label_override import LabelOverride
