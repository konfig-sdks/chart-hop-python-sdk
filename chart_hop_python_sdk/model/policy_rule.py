# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PolicyRule(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def allow() -> typing.Type['PolicyRuleAllow']:
                return PolicyRuleAllow
        
            @staticmethod
            def deny() -> typing.Type['PolicyRuleDeny']:
                return PolicyRuleDeny
        
            @staticmethod
            def categories() -> typing.Type['PolicyRuleCategories']:
                return PolicyRuleCategories
        
            @staticmethod
            def fields() -> typing.Type['PolicyRuleFields']:
                return PolicyRuleFields
        
            @staticmethod
            def departmentIds() -> typing.Type['PolicyRuleDepartmentIds']:
                return PolicyRuleDepartmentIds
            filter = schemas.StrSchema
        
            @staticmethod
            def directions() -> typing.Type['PolicyRuleDirections']:
                return PolicyRuleDirections
        
            @staticmethod
            def types() -> typing.Type['PolicyRuleTypes']:
                return PolicyRuleTypes
        
            @staticmethod
            def visibleSensitive() -> typing.Type['PolicyRuleVisibleSensitive']:
                return PolicyRuleVisibleSensitive
        
            @staticmethod
            def fieldsSensitive() -> typing.Type['PolicyRuleFieldsSensitive']:
                return PolicyRuleFieldsSensitive
            __annotations__ = {
                "allow": allow,
                "deny": deny,
                "categories": categories,
                "fields": fields,
                "departmentIds": departmentIds,
                "filter": filter,
                "directions": directions,
                "types": types,
                "visibleSensitive": visibleSensitive,
                "fieldsSensitive": fieldsSensitive,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow"]) -> 'PolicyRuleAllow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deny"]) -> 'PolicyRuleDeny': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> 'PolicyRuleCategories': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'PolicyRuleFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentIds"]) -> 'PolicyRuleDepartmentIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directions"]) -> 'PolicyRuleDirections': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> 'PolicyRuleTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibleSensitive"]) -> 'PolicyRuleVisibleSensitive': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldsSensitive"]) -> 'PolicyRuleFieldsSensitive': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow", "deny", "categories", "fields", "departmentIds", "filter", "directions", "types", "visibleSensitive", "fieldsSensitive", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow"]) -> typing.Union['PolicyRuleAllow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deny"]) -> typing.Union['PolicyRuleDeny', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union['PolicyRuleCategories', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['PolicyRuleFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentIds"]) -> typing.Union['PolicyRuleDepartmentIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directions"]) -> typing.Union['PolicyRuleDirections', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union['PolicyRuleTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibleSensitive"]) -> typing.Union['PolicyRuleVisibleSensitive', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldsSensitive"]) -> typing.Union['PolicyRuleFieldsSensitive', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow", "deny", "categories", "fields", "departmentIds", "filter", "directions", "types", "visibleSensitive", "fieldsSensitive", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allow: typing.Union['PolicyRuleAllow', schemas.Unset] = schemas.unset,
        deny: typing.Union['PolicyRuleDeny', schemas.Unset] = schemas.unset,
        categories: typing.Union['PolicyRuleCategories', schemas.Unset] = schemas.unset,
        fields: typing.Union['PolicyRuleFields', schemas.Unset] = schemas.unset,
        departmentIds: typing.Union['PolicyRuleDepartmentIds', schemas.Unset] = schemas.unset,
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        directions: typing.Union['PolicyRuleDirections', schemas.Unset] = schemas.unset,
        types: typing.Union['PolicyRuleTypes', schemas.Unset] = schemas.unset,
        visibleSensitive: typing.Union['PolicyRuleVisibleSensitive', schemas.Unset] = schemas.unset,
        fieldsSensitive: typing.Union['PolicyRuleFieldsSensitive', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicyRule':
        return super().__new__(
            cls,
            *args,
            allow=allow,
            deny=deny,
            categories=categories,
            fields=fields,
            departmentIds=departmentIds,
            filter=filter,
            directions=directions,
            types=types,
            visibleSensitive=visibleSensitive,
            fieldsSensitive=fieldsSensitive,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.policy_rule_allow import PolicyRuleAllow
from chart_hop_python_sdk.model.policy_rule_categories import PolicyRuleCategories
from chart_hop_python_sdk.model.policy_rule_deny import PolicyRuleDeny
from chart_hop_python_sdk.model.policy_rule_department_ids import PolicyRuleDepartmentIds
from chart_hop_python_sdk.model.policy_rule_directions import PolicyRuleDirections
from chart_hop_python_sdk.model.policy_rule_fields import PolicyRuleFields
from chart_hop_python_sdk.model.policy_rule_fields_sensitive import PolicyRuleFieldsSensitive
from chart_hop_python_sdk.model.policy_rule_types import PolicyRuleTypes
from chart_hop_python_sdk.model.policy_rule_visible_sensitive import PolicyRuleVisibleSensitive
