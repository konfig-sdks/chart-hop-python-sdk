# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class JobUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            
            
            class addRelationships(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['JobRelationship']:
                        return JobRelationship
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['JobRelationship'], typing.List['JobRelationship']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addRelationships':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'JobRelationship':
                    return super().__getitem__(i)
            
            
            class removeRelationships(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['JobRelationship']:
                        return JobRelationship
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['JobRelationship'], typing.List['JobRelationship']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'removeRelationships':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'JobRelationship':
                    return super().__getitem__(i)
        
            @staticmethod
            def addGroupIds() -> typing.Type['JobUpdateAddGroupIds']:
                return JobUpdateAddGroupIds
        
            @staticmethod
            def removeGroupIds() -> typing.Type['JobUpdateRemoveGroupIds']:
                return JobUpdateRemoveGroupIds
        
            @staticmethod
            def setGroupIds() -> typing.Type['JobUpdateSetGroupIds']:
                return JobUpdateSetGroupIds
            
            
            class addGroupAssignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['GroupAssignment']:
                        return GroupAssignment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupAssignment'], typing.List['GroupAssignment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addGroupAssignments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupAssignment':
                    return super().__getitem__(i)
            
            
            class removeGroupAssignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['GroupAssignment']:
                        return GroupAssignment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupAssignment'], typing.List['GroupAssignment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'removeGroupAssignments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupAssignment':
                    return super().__getitem__(i)
        
            @staticmethod
            def grant() -> typing.Type['StockGrant']:
                return StockGrant
        
            @staticmethod
            def timeOff() -> typing.Type['TimeOff']:
                return TimeOff
        
            @staticmethod
            def comp() -> typing.Type['Comp']:
                return Comp
            
            
            class placement(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NORMAL": "NORMAL",
                        "ASSISTANT": "ASSISTANT",
                    }
                
                @schemas.classproperty
                def NORMAL(cls):
                    return cls("NORMAL")
                
                @schemas.classproperty
                def ASSISTANT(cls):
                    return cls("ASSISTANT")
            
            
            class employment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FULL": "FULL",
                        "PART": "PART",
                        "TEMP": "TEMP",
                        "CONTRACT": "CONTRACT",
                        "INTERN": "INTERN",
                        "EXPAT": "EXPAT",
                    }
                
                @schemas.classproperty
                def FULL(cls):
                    return cls("FULL")
                
                @schemas.classproperty
                def PART(cls):
                    return cls("PART")
                
                @schemas.classproperty
                def TEMP(cls):
                    return cls("TEMP")
                
                @schemas.classproperty
                def CONTRACT(cls):
                    return cls("CONTRACT")
                
                @schemas.classproperty
                def INTERN(cls):
                    return cls("INTERN")
                
                @schemas.classproperty
                def EXPAT(cls):
                    return cls("EXPAT")
            
            
            class sensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "GLOBAL": "GLOBAL",
                        "ORG": "ORG",
                        "ORG_OTHER": "ORG_OTHER",
                        "PERSONAL_DEMOG": "PERSONAL_DEMOG",
                        "PERSONAL_BIRTH": "PERSONAL_BIRTH",
                        "PERSONAL_CONTACT": "PERSONAL_CONTACT",
                        "PERSONAL_PRIVATE": "PERSONAL_PRIVATE",
                        "SENSITIVE_BIRTH": "SENSITIVE_BIRTH",
                        "SENSITIVE_CONTACT": "SENSITIVE_CONTACT",
                        "TIMEOFF": "TIMEOFF",
                        "COMP_CASH": "COMP_CASH",
                        "COMP_EQUITY": "COMP_EQUITY",
                        "SENSITIVE": "SENSITIVE",
                        "PERSONAL": "PERSONAL",
                        "MANAGER": "MANAGER",
                        "GRAND_MANAGER": "GRAND_MANAGER",
                        "DIRECT": "DIRECT",
                        "PEERS": "PEERS",
                        "HIGH": "HIGH",
                        "PRIVATE": "PRIVATE",
                    }
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            startDatePlanned = schemas.DateSchema
            startDatePlannedRemove = schemas.BoolSchema
            startDate = schemas.DateSchema
            backfillPersonId = schemas.AnyTypeSchema
            hasUnsetFields = schemas.BoolSchema
        
            @staticmethod
            def fields() -> typing.Type['JobUpdateFields']:
                return JobUpdateFields
            
            
            class orderedFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PairStringObject']:
                        return PairStringObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PairStringObject'], typing.List['PairStringObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderedFields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PairStringObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "title": title,
                "addRelationships": addRelationships,
                "removeRelationships": removeRelationships,
                "addGroupIds": addGroupIds,
                "removeGroupIds": removeGroupIds,
                "setGroupIds": setGroupIds,
                "addGroupAssignments": addGroupAssignments,
                "removeGroupAssignments": removeGroupAssignments,
                "grant": grant,
                "timeOff": timeOff,
                "comp": comp,
                "placement": placement,
                "employment": employment,
                "sensitive": sensitive,
                "startDatePlanned": startDatePlanned,
                "startDatePlannedRemove": startDatePlannedRemove,
                "startDate": startDate,
                "backfillPersonId": backfillPersonId,
                "hasUnsetFields": hasUnsetFields,
                "fields": fields,
                "orderedFields": orderedFields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addRelationships"]) -> MetaOapg.properties.addRelationships: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removeRelationships"]) -> MetaOapg.properties.removeRelationships: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addGroupIds"]) -> 'JobUpdateAddGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removeGroupIds"]) -> 'JobUpdateRemoveGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setGroupIds"]) -> 'JobUpdateSetGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addGroupAssignments"]) -> MetaOapg.properties.addGroupAssignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removeGroupAssignments"]) -> MetaOapg.properties.removeGroupAssignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grant"]) -> 'StockGrant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeOff"]) -> 'TimeOff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comp"]) -> 'Comp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placement"]) -> MetaOapg.properties.placement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> MetaOapg.properties.employment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitive"]) -> MetaOapg.properties.sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDatePlanned"]) -> MetaOapg.properties.startDatePlanned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDatePlannedRemove"]) -> MetaOapg.properties.startDatePlannedRemove: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backfillPersonId"]) -> MetaOapg.properties.backfillPersonId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasUnsetFields"]) -> MetaOapg.properties.hasUnsetFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'JobUpdateFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderedFields"]) -> MetaOapg.properties.orderedFields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "addRelationships", "removeRelationships", "addGroupIds", "removeGroupIds", "setGroupIds", "addGroupAssignments", "removeGroupAssignments", "grant", "timeOff", "comp", "placement", "employment", "sensitive", "startDatePlanned", "startDatePlannedRemove", "startDate", "backfillPersonId", "hasUnsetFields", "fields", "orderedFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addRelationships"]) -> typing.Union[MetaOapg.properties.addRelationships, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removeRelationships"]) -> typing.Union[MetaOapg.properties.removeRelationships, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addGroupIds"]) -> typing.Union['JobUpdateAddGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removeGroupIds"]) -> typing.Union['JobUpdateRemoveGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setGroupIds"]) -> typing.Union['JobUpdateSetGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addGroupAssignments"]) -> typing.Union[MetaOapg.properties.addGroupAssignments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removeGroupAssignments"]) -> typing.Union[MetaOapg.properties.removeGroupAssignments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grant"]) -> typing.Union['StockGrant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeOff"]) -> typing.Union['TimeOff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comp"]) -> typing.Union['Comp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placement"]) -> typing.Union[MetaOapg.properties.placement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> typing.Union[MetaOapg.properties.employment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitive"]) -> typing.Union[MetaOapg.properties.sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDatePlanned"]) -> typing.Union[MetaOapg.properties.startDatePlanned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDatePlannedRemove"]) -> typing.Union[MetaOapg.properties.startDatePlannedRemove, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backfillPersonId"]) -> typing.Union[MetaOapg.properties.backfillPersonId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasUnsetFields"]) -> typing.Union[MetaOapg.properties.hasUnsetFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['JobUpdateFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderedFields"]) -> typing.Union[MetaOapg.properties.orderedFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "addRelationships", "removeRelationships", "addGroupIds", "removeGroupIds", "setGroupIds", "addGroupAssignments", "removeGroupAssignments", "grant", "timeOff", "comp", "placement", "employment", "sensitive", "startDatePlanned", "startDatePlannedRemove", "startDate", "backfillPersonId", "hasUnsetFields", "fields", "orderedFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        addRelationships: typing.Union[MetaOapg.properties.addRelationships, list, tuple, schemas.Unset] = schemas.unset,
        removeRelationships: typing.Union[MetaOapg.properties.removeRelationships, list, tuple, schemas.Unset] = schemas.unset,
        addGroupIds: typing.Union['JobUpdateAddGroupIds', schemas.Unset] = schemas.unset,
        removeGroupIds: typing.Union['JobUpdateRemoveGroupIds', schemas.Unset] = schemas.unset,
        setGroupIds: typing.Union['JobUpdateSetGroupIds', schemas.Unset] = schemas.unset,
        addGroupAssignments: typing.Union[MetaOapg.properties.addGroupAssignments, list, tuple, schemas.Unset] = schemas.unset,
        removeGroupAssignments: typing.Union[MetaOapg.properties.removeGroupAssignments, list, tuple, schemas.Unset] = schemas.unset,
        grant: typing.Union['StockGrant', schemas.Unset] = schemas.unset,
        timeOff: typing.Union['TimeOff', schemas.Unset] = schemas.unset,
        comp: typing.Union['Comp', schemas.Unset] = schemas.unset,
        placement: typing.Union[MetaOapg.properties.placement, str, schemas.Unset] = schemas.unset,
        employment: typing.Union[MetaOapg.properties.employment, str, schemas.Unset] = schemas.unset,
        sensitive: typing.Union[MetaOapg.properties.sensitive, str, schemas.Unset] = schemas.unset,
        startDatePlanned: typing.Union[MetaOapg.properties.startDatePlanned, str, date, schemas.Unset] = schemas.unset,
        startDatePlannedRemove: typing.Union[MetaOapg.properties.startDatePlannedRemove, bool, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        backfillPersonId: typing.Union[MetaOapg.properties.backfillPersonId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hasUnsetFields: typing.Union[MetaOapg.properties.hasUnsetFields, bool, schemas.Unset] = schemas.unset,
        fields: typing.Union['JobUpdateFields', schemas.Unset] = schemas.unset,
        orderedFields: typing.Union[MetaOapg.properties.orderedFields, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobUpdate':
        return super().__new__(
            cls,
            *args,
            title=title,
            addRelationships=addRelationships,
            removeRelationships=removeRelationships,
            addGroupIds=addGroupIds,
            removeGroupIds=removeGroupIds,
            setGroupIds=setGroupIds,
            addGroupAssignments=addGroupAssignments,
            removeGroupAssignments=removeGroupAssignments,
            grant=grant,
            timeOff=timeOff,
            comp=comp,
            placement=placement,
            employment=employment,
            sensitive=sensitive,
            startDatePlanned=startDatePlanned,
            startDatePlannedRemove=startDatePlannedRemove,
            startDate=startDate,
            backfillPersonId=backfillPersonId,
            hasUnsetFields=hasUnsetFields,
            fields=fields,
            orderedFields=orderedFields,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.comp import Comp
from chart_hop_python_sdk.model.group_assignment import GroupAssignment
from chart_hop_python_sdk.model.job_relationship import JobRelationship
from chart_hop_python_sdk.model.job_update_add_group_ids import JobUpdateAddGroupIds
from chart_hop_python_sdk.model.job_update_fields import JobUpdateFields
from chart_hop_python_sdk.model.job_update_remove_group_ids import JobUpdateRemoveGroupIds
from chart_hop_python_sdk.model.job_update_set_group_ids import JobUpdateSetGroupIds
from chart_hop_python_sdk.model.pair_string_object import PairStringObject
from chart_hop_python_sdk.model.stock_grant import StockGrant
from chart_hop_python_sdk.model.time_off import TimeOff
