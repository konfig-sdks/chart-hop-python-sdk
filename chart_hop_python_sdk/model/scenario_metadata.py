# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ScenarioMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "canChange",
            "access",
            "cost",
            "changeCount",
            "scenarioId",
        }
        
        class properties:
            scenarioId = schemas.StrSchema
            changeCount = schemas.Int32Schema
            
            
            class access(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ResultsAccess']:
                        return ResultsAccess
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ResultsAccess'], typing.List['ResultsAccess']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ResultsAccess':
                    return super().__getitem__(i)
            canChange = schemas.BoolSchema
        
            @staticmethod
            def cost() -> typing.Type['CostImpact']:
                return CostImpact
            jobCount = schemas.Int32Schema
            calcEndAt = schemas.StrSchema
            __annotations__ = {
                "scenarioId": scenarioId,
                "changeCount": changeCount,
                "access": access,
                "canChange": canChange,
                "cost": cost,
                "jobCount": jobCount,
                "calcEndAt": calcEndAt,
            }
    
    canChange: MetaOapg.properties.canChange
    access: MetaOapg.properties.access
    cost: 'CostImpact'
    changeCount: MetaOapg.properties.changeCount
    scenarioId: MetaOapg.properties.scenarioId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeCount"]) -> MetaOapg.properties.changeCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canChange"]) -> MetaOapg.properties.canChange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> 'CostImpact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCount"]) -> MetaOapg.properties.jobCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcEndAt"]) -> MetaOapg.properties.calcEndAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scenarioId", "changeCount", "access", "canChange", "cost", "jobCount", "calcEndAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeCount"]) -> MetaOapg.properties.changeCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canChange"]) -> MetaOapg.properties.canChange: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> 'CostImpact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCount"]) -> typing.Union[MetaOapg.properties.jobCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcEndAt"]) -> typing.Union[MetaOapg.properties.calcEndAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scenarioId", "changeCount", "access", "canChange", "cost", "jobCount", "calcEndAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        canChange: typing.Union[MetaOapg.properties.canChange, bool, ],
        access: typing.Union[MetaOapg.properties.access, list, tuple, ],
        cost: 'CostImpact',
        changeCount: typing.Union[MetaOapg.properties.changeCount, decimal.Decimal, int, ],
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, ],
        jobCount: typing.Union[MetaOapg.properties.jobCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        calcEndAt: typing.Union[MetaOapg.properties.calcEndAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScenarioMetadata':
        return super().__new__(
            cls,
            *args,
            canChange=canChange,
            access=access,
            cost=cost,
            changeCount=changeCount,
            scenarioId=scenarioId,
            jobCount=jobCount,
            calcEndAt=calcEndAt,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.cost_impact import CostImpact
from chart_hop_python_sdk.model.results_access import ResultsAccess
