# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PayInterval(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "pay",
            "interval",
        }
        
        class properties:
            
            
            class interval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("YEARLY")
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("HOURLY")
        
            @staticmethod
            def pay() -> typing.Type['Money']:
                return Money
            hoursPerWeek = schemas.Int32Schema
            weeksPerYear = schemas.Int32Schema
            __annotations__ = {
                "interval": interval,
                "pay": pay,
                "hoursPerWeek": hoursPerWeek,
                "weeksPerYear": weeksPerYear,
            }
    
    pay: 'Money'
    interval: MetaOapg.properties.interval
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursPerWeek"]) -> MetaOapg.properties.hoursPerWeek: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeksPerYear"]) -> MetaOapg.properties.weeksPerYear: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["interval", "pay", "hoursPerWeek", "weeksPerYear", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay"]) -> 'Money': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursPerWeek"]) -> typing.Union[MetaOapg.properties.hoursPerWeek, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeksPerYear"]) -> typing.Union[MetaOapg.properties.weeksPerYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["interval", "pay", "hoursPerWeek", "weeksPerYear", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pay: 'Money',
        interval: typing.Union[MetaOapg.properties.interval, str, ],
        hoursPerWeek: typing.Union[MetaOapg.properties.hoursPerWeek, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        weeksPerYear: typing.Union[MetaOapg.properties.weeksPerYear, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayInterval':
        return super().__new__(
            cls,
            *args,
            pay=pay,
            interval=interval,
            hoursPerWeek=hoursPerWeek,
            weeksPerYear=weeksPerYear,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.money import Money
