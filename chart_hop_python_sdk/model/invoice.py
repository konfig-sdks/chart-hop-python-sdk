# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Invoice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "number",
            "amount",
            "createAt",
            "status",
        }
        
        class properties:
            number = schemas.StrSchema
            amount = schemas.NumberSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PAID": "PAID",
                        "UNPAID": "UNPAID",
                        "VOID": "VOID",
                    }
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("PAID")
                
                @schemas.classproperty
                def UNPAID(cls):
                    return cls("UNPAID")
                
                @schemas.classproperty
                def VOID(cls):
                    return cls("VOID")
            createAt = schemas.StrSchema
            hostedInvoiceUrl = schemas.StrSchema
            invoicePdf = schemas.StrSchema
            __annotations__ = {
                "number": number,
                "amount": amount,
                "status": status,
                "createAt": createAt,
                "hostedInvoiceUrl": hostedInvoiceUrl,
                "invoicePdf": invoicePdf,
            }
    
    number: MetaOapg.properties.number
    amount: MetaOapg.properties.amount
    createAt: MetaOapg.properties.createAt
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostedInvoiceUrl"]) -> MetaOapg.properties.hostedInvoiceUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoicePdf"]) -> MetaOapg.properties.invoicePdf: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["number", "amount", "status", "createAt", "hostedInvoiceUrl", "invoicePdf", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostedInvoiceUrl"]) -> typing.Union[MetaOapg.properties.hostedInvoiceUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoicePdf"]) -> typing.Union[MetaOapg.properties.invoicePdf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["number", "amount", "status", "createAt", "hostedInvoiceUrl", "invoicePdf", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        hostedInvoiceUrl: typing.Union[MetaOapg.properties.hostedInvoiceUrl, str, schemas.Unset] = schemas.unset,
        invoicePdf: typing.Union[MetaOapg.properties.invoicePdf, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Invoice':
        return super().__new__(
            cls,
            *args,
            number=number,
            amount=amount,
            createAt=createAt,
            status=status,
            hostedInvoiceUrl=hostedInvoiceUrl,
            invoicePdf=invoicePdf,
            _configuration=_configuration,
            **kwargs,
        )
