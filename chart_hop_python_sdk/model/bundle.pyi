# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class Bundle(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Category']:
                        return Category
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Category'], typing.List['Category']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Category':
                    return super().__getitem__(i)
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialField']:
                        return PartialField
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialField'], typing.List['PartialField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialField':
                    return super().__getitem__(i)
            
            
            class forms(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialForm']:
                        return PartialForm
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialForm'], typing.List['PartialForm']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'forms':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialForm':
                    return super().__getitem__(i)
            
            
            class questions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Question']:
                        return Question
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Question'], typing.List['Question']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'questions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Question':
                    return super().__getitem__(i)
            
            
            class profileTabs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialProfileTab']:
                        return PartialProfileTab
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialProfileTab'], typing.List['PartialProfileTab']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profileTabs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialProfileTab':
                    return super().__getitem__(i)
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialGroup']:
                        return PartialGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialGroup'], typing.List['PartialGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialGroup':
                    return super().__getitem__(i)
            
            
            class reports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BundleReport']:
                        return BundleReport
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BundleReport'], typing.List['BundleReport']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reports':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BundleReport':
                    return super().__getitem__(i)
            
            
            class actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialAction']:
                        return PartialAction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialAction'], typing.List['PartialAction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialAction':
                    return super().__getitem__(i)
            
            
            class templates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Template']:
                        return Template
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Template'], typing.List['Template']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'templates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Template':
                    return super().__getitem__(i)
            
            
            class contents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Content']:
                        return Content
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Content'], typing.List['Content']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contents':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Content':
                    return super().__getitem__(i)
            
            
            class taskConfigs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartialTaskConfig']:
                        return PartialTaskConfig
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PartialTaskConfig'], typing.List['PartialTaskConfig']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taskConfigs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartialTaskConfig':
                    return super().__getitem__(i)
            __annotations__ = {
                "categories": categories,
                "fields": fields,
                "forms": forms,
                "questions": questions,
                "profileTabs": profileTabs,
                "groups": groups,
                "reports": reports,
                "actions": actions,
                "templates": templates,
                "contents": contents,
                "taskConfigs": taskConfigs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forms"]) -> MetaOapg.properties.forms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileTabs"]) -> MetaOapg.properties.profileTabs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reports"]) -> MetaOapg.properties.reports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> MetaOapg.properties.actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templates"]) -> MetaOapg.properties.templates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contents"]) -> MetaOapg.properties.contents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskConfigs"]) -> MetaOapg.properties.taskConfigs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["categories", "fields", "forms", "questions", "profileTabs", "groups", "reports", "actions", "templates", "contents", "taskConfigs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union[MetaOapg.properties.categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forms"]) -> typing.Union[MetaOapg.properties.forms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> typing.Union[MetaOapg.properties.questions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileTabs"]) -> typing.Union[MetaOapg.properties.profileTabs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reports"]) -> typing.Union[MetaOapg.properties.reports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union[MetaOapg.properties.actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templates"]) -> typing.Union[MetaOapg.properties.templates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contents"]) -> typing.Union[MetaOapg.properties.contents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskConfigs"]) -> typing.Union[MetaOapg.properties.taskConfigs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["categories", "fields", "forms", "questions", "profileTabs", "groups", "reports", "actions", "templates", "contents", "taskConfigs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, schemas.Unset] = schemas.unset,
        forms: typing.Union[MetaOapg.properties.forms, list, tuple, schemas.Unset] = schemas.unset,
        questions: typing.Union[MetaOapg.properties.questions, list, tuple, schemas.Unset] = schemas.unset,
        profileTabs: typing.Union[MetaOapg.properties.profileTabs, list, tuple, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        reports: typing.Union[MetaOapg.properties.reports, list, tuple, schemas.Unset] = schemas.unset,
        actions: typing.Union[MetaOapg.properties.actions, list, tuple, schemas.Unset] = schemas.unset,
        templates: typing.Union[MetaOapg.properties.templates, list, tuple, schemas.Unset] = schemas.unset,
        contents: typing.Union[MetaOapg.properties.contents, list, tuple, schemas.Unset] = schemas.unset,
        taskConfigs: typing.Union[MetaOapg.properties.taskConfigs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Bundle':
        return super().__new__(
            cls,
            *args,
            categories=categories,
            fields=fields,
            forms=forms,
            questions=questions,
            profileTabs=profileTabs,
            groups=groups,
            reports=reports,
            actions=actions,
            templates=templates,
            contents=contents,
            taskConfigs=taskConfigs,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.bundle_report import BundleReport
from chart_hop_python_sdk.model.category import Category
from chart_hop_python_sdk.model.content import Content
from chart_hop_python_sdk.model.partial_action import PartialAction
from chart_hop_python_sdk.model.partial_field import PartialField
from chart_hop_python_sdk.model.partial_form import PartialForm
from chart_hop_python_sdk.model.partial_group import PartialGroup
from chart_hop_python_sdk.model.partial_profile_tab import PartialProfileTab
from chart_hop_python_sdk.model.partial_task_config import PartialTaskConfig
from chart_hop_python_sdk.model.question import Question
from chart_hop_python_sdk.model.template import Template
