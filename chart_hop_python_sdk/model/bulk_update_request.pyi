# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class BulkUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "jobIds",
            "update",
        }
        
        class properties:
        
            @staticmethod
            def jobIds() -> typing.Type['BulkUpdateRequestJobIds']:
                return BulkUpdateRequestJobIds
        
            @staticmethod
            def update() -> typing.Type['JobUpdate']:
                return JobUpdate
            date = schemas.DateSchema
            scenarioId = schemas.StrSchema
            note = schemas.StrSchema
            __annotations__ = {
                "jobIds": jobIds,
                "update": update,
                "date": date,
                "scenarioId": scenarioId,
                "note": note,
            }
    
    date: MetaOapg.properties.date
    jobIds: 'BulkUpdateRequestJobIds'
    update: 'JobUpdate'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobIds"]) -> 'BulkUpdateRequestJobIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update"]) -> 'JobUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobIds", "update", "date", "scenarioId", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobIds"]) -> 'BulkUpdateRequestJobIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update"]) -> 'JobUpdate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobIds", "update", "date", "scenarioId", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        jobIds: 'BulkUpdateRequestJobIds',
        update: 'JobUpdate',
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BulkUpdateRequest':
        return super().__new__(
            cls,
            *args,
            date=date,
            jobIds=jobIds,
            update=update,
            scenarioId=scenarioId,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.bulk_update_request_job_ids import BulkUpdateRequestJobIds
from chart_hop_python_sdk.model.job_update import JobUpdate
