# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CreateChange(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            jobId = schemas.StrSchema
            orgId = schemas.StrSchema
            scenarioId = schemas.StrSchema
            personId = schemas.StrSchema
            otherJobId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HIRE": "HIRE",
                        "DEPART": "DEPART",
                        "MOVE": "MOVE",
                        "UPCOMING": "UPCOMING",
                        "CREATE": "CREATE",
                        "UPDATE": "UPDATE",
                        "DATA": "DATA",
                        "DELETE": "DELETE",
                        "RELATE": "RELATE",
                        "BACKFILL": "BACKFILL",
                    }
                
                @schemas.classproperty
                def HIRE(cls):
                    return cls("HIRE")
                
                @schemas.classproperty
                def DEPART(cls):
                    return cls("DEPART")
                
                @schemas.classproperty
                def MOVE(cls):
                    return cls("MOVE")
                
                @schemas.classproperty
                def UPCOMING(cls):
                    return cls("UPCOMING")
                
                @schemas.classproperty
                def CREATE(cls):
                    return cls("CREATE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def DATA(cls):
                    return cls("DATA")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
                
                @schemas.classproperty
                def RELATE(cls):
                    return cls("RELATE")
                
                @schemas.classproperty
                def BACKFILL(cls):
                    return cls("BACKFILL")
            date = schemas.DateSchema
            announceDate = schemas.DateSchema
            
            
            class departType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VOLUNTARY": "VOLUNTARY",
                        "INVOLUNTARY": "INVOLUNTARY",
                    }
                
                @schemas.classproperty
                def VOLUNTARY(cls):
                    return cls("VOLUNTARY")
                
                @schemas.classproperty
                def INVOLUNTARY(cls):
                    return cls("INVOLUNTARY")
            
            
            class departRegret(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "REGRET": "REGRET",
                        "NONREGRET": "NONREGRET",
                    }
                
                @schemas.classproperty
                def REGRET(cls):
                    return cls("REGRET")
                
                @schemas.classproperty
                def NONREGRET(cls):
                    return cls("NONREGRET")
            reason = schemas.StrSchema
            
            
            class promotionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROMOTION": "PROMOTION",
                        "DEMOTION": "DEMOTION",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def PROMOTION(cls):
                    return cls("PROMOTION")
                
                @schemas.classproperty
                def DEMOTION(cls):
                    return cls("DEMOTION")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
        
            @staticmethod
            def job() -> typing.Type['PartialJob']:
                return PartialJob
        
            @staticmethod
            def update() -> typing.Type['JobUpdate']:
                return JobUpdate
            note = schemas.StrSchema
            __annotations__ = {
                "jobId": jobId,
                "orgId": orgId,
                "scenarioId": scenarioId,
                "personId": personId,
                "otherJobId": otherJobId,
                "type": type,
                "date": date,
                "announceDate": announceDate,
                "departType": departType,
                "departRegret": departRegret,
                "reason": reason,
                "promotionType": promotionType,
                "job": job,
                "update": update,
                "note": note,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherJobId"]) -> MetaOapg.properties.otherJobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announceDate"]) -> MetaOapg.properties.announceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departType"]) -> MetaOapg.properties.departType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departRegret"]) -> MetaOapg.properties.departRegret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promotionType"]) -> MetaOapg.properties.promotionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'PartialJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update"]) -> 'JobUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobId", "orgId", "scenarioId", "personId", "otherJobId", "type", "date", "announceDate", "departType", "departRegret", "reason", "promotionType", "job", "update", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherJobId"]) -> typing.Union[MetaOapg.properties.otherJobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announceDate"]) -> typing.Union[MetaOapg.properties.announceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departType"]) -> typing.Union[MetaOapg.properties.departType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departRegret"]) -> typing.Union[MetaOapg.properties.departRegret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promotionType"]) -> typing.Union[MetaOapg.properties.promotionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['PartialJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update"]) -> typing.Union['JobUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobId", "orgId", "scenarioId", "personId", "otherJobId", "type", "date", "announceDate", "departType", "departRegret", "reason", "promotionType", "job", "update", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        otherJobId: typing.Union[MetaOapg.properties.otherJobId, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        announceDate: typing.Union[MetaOapg.properties.announceDate, str, date, schemas.Unset] = schemas.unset,
        departType: typing.Union[MetaOapg.properties.departType, str, schemas.Unset] = schemas.unset,
        departRegret: typing.Union[MetaOapg.properties.departRegret, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        promotionType: typing.Union[MetaOapg.properties.promotionType, str, schemas.Unset] = schemas.unset,
        job: typing.Union['PartialJob', schemas.Unset] = schemas.unset,
        update: typing.Union['JobUpdate', schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateChange':
        return super().__new__(
            cls,
            *args,
            jobId=jobId,
            orgId=orgId,
            scenarioId=scenarioId,
            personId=personId,
            otherJobId=otherJobId,
            type=type,
            date=date,
            announceDate=announceDate,
            departType=departType,
            departRegret=departRegret,
            reason=reason,
            promotionType=promotionType,
            job=job,
            update=update,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.job_update import JobUpdate
from chart_hop_python_sdk.model.partial_job import PartialJob
