# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class OnboardStep(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "actionText",
            "docsUrl",
            "actionUrl",
            "name",
            "description",
            "eventType",
            "id",
            "label",
            "sort",
            "pictureFileName",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
            label = schemas.StrSchema
            docsUrl = schemas.StrSchema
            actionUrl = schemas.StrSchema
            actionText = schemas.StrSchema
            pictureFileName = schemas.StrSchema
            sort = schemas.Int32Schema
            eventType = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "name": name,
                "label": label,
                "docsUrl": docsUrl,
                "actionUrl": actionUrl,
                "actionText": actionText,
                "pictureFileName": pictureFileName,
                "sort": sort,
                "eventType": eventType,
            }
    
    actionText: MetaOapg.properties.actionText
    docsUrl: MetaOapg.properties.docsUrl
    actionUrl: MetaOapg.properties.actionUrl
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    eventType: MetaOapg.properties.eventType
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    sort: MetaOapg.properties.sort
    pictureFileName: MetaOapg.properties.pictureFileName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docsUrl"]) -> MetaOapg.properties.docsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionUrl"]) -> MetaOapg.properties.actionUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionText"]) -> MetaOapg.properties.actionText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictureFileName"]) -> MetaOapg.properties.pictureFileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventType"]) -> MetaOapg.properties.eventType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "label", "docsUrl", "actionUrl", "actionText", "pictureFileName", "sort", "eventType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docsUrl"]) -> MetaOapg.properties.docsUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionUrl"]) -> MetaOapg.properties.actionUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionText"]) -> MetaOapg.properties.actionText: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictureFileName"]) -> MetaOapg.properties.pictureFileName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventType"]) -> MetaOapg.properties.eventType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "label", "docsUrl", "actionUrl", "actionText", "pictureFileName", "sort", "eventType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        actionText: typing.Union[MetaOapg.properties.actionText, str, ],
        docsUrl: typing.Union[MetaOapg.properties.docsUrl, str, ],
        actionUrl: typing.Union[MetaOapg.properties.actionUrl, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        eventType: typing.Union[MetaOapg.properties.eventType, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        sort: typing.Union[MetaOapg.properties.sort, decimal.Decimal, int, ],
        pictureFileName: typing.Union[MetaOapg.properties.pictureFileName, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnboardStep':
        return super().__new__(
            cls,
            *args,
            actionText=actionText,
            docsUrl=docsUrl,
            actionUrl=actionUrl,
            name=name,
            description=description,
            eventType=eventType,
            id=id,
            label=label,
            sort=sort,
            pictureFileName=pictureFileName,
            _configuration=_configuration,
            **kwargs,
        )
