# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class AccessTokenRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "scope",
            "idToken",
        }
        
        class properties:
            idToken = schemas.StrSchema
            scope = schemas.StrSchema
            fromToken = schemas.StrSchema
            __annotations__ = {
                "idToken": idToken,
                "scope": scope,
                "fromToken": fromToken,
            }
    
    scope: MetaOapg.properties.scope
    idToken: MetaOapg.properties.idToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idToken"]) -> MetaOapg.properties.idToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromToken"]) -> MetaOapg.properties.fromToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idToken", "scope", "fromToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idToken"]) -> MetaOapg.properties.idToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromToken"]) -> typing.Union[MetaOapg.properties.fromToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idToken", "scope", "fromToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scope: typing.Union[MetaOapg.properties.scope, str, ],
        idToken: typing.Union[MetaOapg.properties.idToken, str, ],
        fromToken: typing.Union[MetaOapg.properties.fromToken, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccessTokenRequest':
        return super().__new__(
            cls,
            *args,
            scope=scope,
            idToken=idToken,
            fromToken=fromToken,
            _configuration=_configuration,
            **kwargs,
        )
