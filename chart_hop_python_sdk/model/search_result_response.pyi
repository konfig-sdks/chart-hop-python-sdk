# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class SearchResultResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class orgs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orgs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class customers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class persons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'persons':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class functions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'functions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class reports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reports':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class scenarios(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scenarios':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class appUsers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appUsers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class compBands(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'compBands':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class questions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'questions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            
            
            class contents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SearchResult']:
                        return SearchResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SearchResult'], typing.List['SearchResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contents':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SearchResult':
                    return super().__getitem__(i)
            __annotations__ = {
                "orgs": orgs,
                "customers": customers,
                "jobs": jobs,
                "persons": persons,
                "groups": groups,
                "fields": fields,
                "functions": functions,
                "reports": reports,
                "scenarios": scenarios,
                "users": users,
                "appUsers": appUsers,
                "compBands": compBands,
                "questions": questions,
                "contents": contents,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgs"]) -> MetaOapg.properties.orgs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customers"]) -> MetaOapg.properties.customers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["functions"]) -> MetaOapg.properties.functions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reports"]) -> MetaOapg.properties.reports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarios"]) -> MetaOapg.properties.scenarios: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appUsers"]) -> MetaOapg.properties.appUsers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compBands"]) -> MetaOapg.properties.compBands: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contents"]) -> MetaOapg.properties.contents: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orgs", "customers", "jobs", "persons", "groups", "fields", "functions", "reports", "scenarios", "users", "appUsers", "compBands", "questions", "contents", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgs"]) -> typing.Union[MetaOapg.properties.orgs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customers"]) -> typing.Union[MetaOapg.properties.customers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> typing.Union[MetaOapg.properties.persons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["functions"]) -> typing.Union[MetaOapg.properties.functions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reports"]) -> typing.Union[MetaOapg.properties.reports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarios"]) -> typing.Union[MetaOapg.properties.scenarios, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appUsers"]) -> typing.Union[MetaOapg.properties.appUsers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compBands"]) -> typing.Union[MetaOapg.properties.compBands, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> typing.Union[MetaOapg.properties.questions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contents"]) -> typing.Union[MetaOapg.properties.contents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orgs", "customers", "jobs", "persons", "groups", "fields", "functions", "reports", "scenarios", "users", "appUsers", "compBands", "questions", "contents", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        orgs: typing.Union[MetaOapg.properties.orgs, list, tuple, schemas.Unset] = schemas.unset,
        customers: typing.Union[MetaOapg.properties.customers, list, tuple, schemas.Unset] = schemas.unset,
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, schemas.Unset] = schemas.unset,
        persons: typing.Union[MetaOapg.properties.persons, list, tuple, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, schemas.Unset] = schemas.unset,
        functions: typing.Union[MetaOapg.properties.functions, list, tuple, schemas.Unset] = schemas.unset,
        reports: typing.Union[MetaOapg.properties.reports, list, tuple, schemas.Unset] = schemas.unset,
        scenarios: typing.Union[MetaOapg.properties.scenarios, list, tuple, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
        appUsers: typing.Union[MetaOapg.properties.appUsers, list, tuple, schemas.Unset] = schemas.unset,
        compBands: typing.Union[MetaOapg.properties.compBands, list, tuple, schemas.Unset] = schemas.unset,
        questions: typing.Union[MetaOapg.properties.questions, list, tuple, schemas.Unset] = schemas.unset,
        contents: typing.Union[MetaOapg.properties.contents, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchResultResponse':
        return super().__new__(
            cls,
            *args,
            orgs=orgs,
            customers=customers,
            jobs=jobs,
            persons=persons,
            groups=groups,
            fields=fields,
            functions=functions,
            reports=reports,
            scenarios=scenarios,
            users=users,
            appUsers=appUsers,
            compBands=compBands,
            questions=questions,
            contents=contents,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.search_result import SearchResult
