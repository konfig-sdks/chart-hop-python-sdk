# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpdateCustomer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            email = schemas.StrSchema
        
            @staticmethod
            def billAddress() -> typing.Type['Address']:
                return Address
            industry = schemas.StrSchema
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ADP_MARKETPLACE(cls):
                    return cls("ADP_MARKETPLACE")
                
                @schemas.classproperty
                def SELF_SERVE(cls):
                    return cls("SELF_SERVE")
                
                @schemas.classproperty
                def SELF_SERVE_TEST(cls):
                    return cls("SELF_SERVE_TEST")
                
                @schemas.classproperty
                def SEQUOIA_ONE(cls):
                    return cls("SEQUOIA_ONE")
                
                @schemas.classproperty
                def CONNECT(cls):
                    return cls("CONNECT")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
                
                @schemas.classproperty
                def TRIAL(cls):
                    return cls("TRIAL")
                
                @schemas.classproperty
                def CHURN(cls):
                    return cls("CHURN")
                
                @schemas.classproperty
                def PAYMENT_ERROR(cls):
                    return cls("PAYMENT_ERROR")
            
            
            class salesforceAccountId(
                schemas.StrSchema
            ):
                pass
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductItem']:
                        return ProductItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProductItem'], typing.List['ProductItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductItem':
                    return super().__getitem__(i)
            startDate = schemas.DateSchema
            endDate = schemas.DateSchema
            nextInvoiceDate = schemas.DateSchema
            primaryHeadCountFilter = schemas.StrSchema
            secondaryHeadCountFilter = schemas.StrSchema
            arr = schemas.NumberSchema
            projectedArr = schemas.NumberSchema
            trialStartDate = schemas.DateSchema
            trialEndDate = schemas.DateSchema
            
            
            class stripeSubscriptionSync(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SYNC(cls):
                    return cls("SYNC")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
            __annotations__ = {
                "name": name,
                "email": email,
                "billAddress": billAddress,
                "industry": industry,
                "source": source,
                "status": status,
                "salesforceAccountId": salesforceAccountId,
                "products": products,
                "startDate": startDate,
                "endDate": endDate,
                "nextInvoiceDate": nextInvoiceDate,
                "primaryHeadCountFilter": primaryHeadCountFilter,
                "secondaryHeadCountFilter": secondaryHeadCountFilter,
                "arr": arr,
                "projectedArr": projectedArr,
                "trialStartDate": trialStartDate,
                "trialEndDate": trialEndDate,
                "stripeSubscriptionSync": stripeSubscriptionSync,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesforceAccountId"]) -> MetaOapg.properties.salesforceAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextInvoiceDate"]) -> MetaOapg.properties.nextInvoiceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryHeadCountFilter"]) -> MetaOapg.properties.primaryHeadCountFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryHeadCountFilter"]) -> MetaOapg.properties.secondaryHeadCountFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arr"]) -> MetaOapg.properties.arr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectedArr"]) -> MetaOapg.properties.projectedArr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trialStartDate"]) -> MetaOapg.properties.trialStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trialEndDate"]) -> MetaOapg.properties.trialEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeSubscriptionSync"]) -> MetaOapg.properties.stripeSubscriptionSync: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "email", "billAddress", "industry", "source", "status", "salesforceAccountId", "products", "startDate", "endDate", "nextInvoiceDate", "primaryHeadCountFilter", "secondaryHeadCountFilter", "arr", "projectedArr", "trialStartDate", "trialEndDate", "stripeSubscriptionSync", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industry"]) -> typing.Union[MetaOapg.properties.industry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesforceAccountId"]) -> typing.Union[MetaOapg.properties.salesforceAccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union[MetaOapg.properties.products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextInvoiceDate"]) -> typing.Union[MetaOapg.properties.nextInvoiceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryHeadCountFilter"]) -> typing.Union[MetaOapg.properties.primaryHeadCountFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryHeadCountFilter"]) -> typing.Union[MetaOapg.properties.secondaryHeadCountFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arr"]) -> typing.Union[MetaOapg.properties.arr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectedArr"]) -> typing.Union[MetaOapg.properties.projectedArr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trialStartDate"]) -> typing.Union[MetaOapg.properties.trialStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trialEndDate"]) -> typing.Union[MetaOapg.properties.trialEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeSubscriptionSync"]) -> typing.Union[MetaOapg.properties.stripeSubscriptionSync, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "email", "billAddress", "industry", "source", "status", "salesforceAccountId", "products", "startDate", "endDate", "nextInvoiceDate", "primaryHeadCountFilter", "secondaryHeadCountFilter", "arr", "projectedArr", "trialStartDate", "trialEndDate", "stripeSubscriptionSync", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        billAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        industry: typing.Union[MetaOapg.properties.industry, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        salesforceAccountId: typing.Union[MetaOapg.properties.salesforceAccountId, str, schemas.Unset] = schemas.unset,
        products: typing.Union[MetaOapg.properties.products, list, tuple, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        nextInvoiceDate: typing.Union[MetaOapg.properties.nextInvoiceDate, str, date, schemas.Unset] = schemas.unset,
        primaryHeadCountFilter: typing.Union[MetaOapg.properties.primaryHeadCountFilter, str, schemas.Unset] = schemas.unset,
        secondaryHeadCountFilter: typing.Union[MetaOapg.properties.secondaryHeadCountFilter, str, schemas.Unset] = schemas.unset,
        arr: typing.Union[MetaOapg.properties.arr, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        projectedArr: typing.Union[MetaOapg.properties.projectedArr, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        trialStartDate: typing.Union[MetaOapg.properties.trialStartDate, str, date, schemas.Unset] = schemas.unset,
        trialEndDate: typing.Union[MetaOapg.properties.trialEndDate, str, date, schemas.Unset] = schemas.unset,
        stripeSubscriptionSync: typing.Union[MetaOapg.properties.stripeSubscriptionSync, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateCustomer':
        return super().__new__(
            cls,
            *args,
            name=name,
            email=email,
            billAddress=billAddress,
            industry=industry,
            source=source,
            status=status,
            salesforceAccountId=salesforceAccountId,
            products=products,
            startDate=startDate,
            endDate=endDate,
            nextInvoiceDate=nextInvoiceDate,
            primaryHeadCountFilter=primaryHeadCountFilter,
            secondaryHeadCountFilter=secondaryHeadCountFilter,
            arr=arr,
            projectedArr=projectedArr,
            trialStartDate=trialStartDate,
            trialEndDate=trialEndDate,
            stripeSubscriptionSync=stripeSubscriptionSync,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.address import Address
from chart_hop_python_sdk.model.product_item import ProductItem
