# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpcomingChange(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
        }
        
        class properties:
            date = schemas.DateSchema
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HIRE(cls):
                    return cls("HIRE")
                
                @schemas.classproperty
                def DEPART(cls):
                    return cls("DEPART")
                
                @schemas.classproperty
                def MOVE(cls):
                    return cls("MOVE")
                
                @schemas.classproperty
                def UPCOMING(cls):
                    return cls("UPCOMING")
                
                @schemas.classproperty
                def CREATE(cls):
                    return cls("CREATE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def DATA(cls):
                    return cls("DATA")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
                
                @schemas.classproperty
                def RELATE(cls):
                    return cls("RELATE")
                
                @schemas.classproperty
                def BACKFILL(cls):
                    return cls("BACKFILL")
            announceDate = schemas.DateSchema
            personId = schemas.StrSchema
            otherPersonId = schemas.StrSchema
            __annotations__ = {
                "date": date,
                "id": id,
                "type": type,
                "announceDate": announceDate,
                "personId": personId,
                "otherPersonId": otherPersonId,
            }
    
    date: MetaOapg.properties.date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announceDate"]) -> MetaOapg.properties.announceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPersonId"]) -> MetaOapg.properties.otherPersonId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "id", "type", "announceDate", "personId", "otherPersonId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announceDate"]) -> typing.Union[MetaOapg.properties.announceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPersonId"]) -> typing.Union[MetaOapg.properties.otherPersonId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "id", "type", "announceDate", "personId", "otherPersonId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        announceDate: typing.Union[MetaOapg.properties.announceDate, str, date, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        otherPersonId: typing.Union[MetaOapg.properties.otherPersonId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpcomingChange':
        return super().__new__(
            cls,
            *args,
            date=date,
            id=id,
            type=type,
            announceDate=announceDate,
            personId=personId,
            otherPersonId=otherPersonId,
            _configuration=_configuration,
            **kwargs,
        )
