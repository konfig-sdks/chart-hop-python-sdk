# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class SearchResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "score",
            "entityType",
            "entityId",
            "searchFields",
            "entity",
        }
        
        class properties:
            entity = schemas.DictSchema
            entityId = schemas.StrSchema
            entityType = schemas.StrSchema
        
            @staticmethod
            def searchFields() -> typing.Type['SearchResultSearchFields']:
                return SearchResultSearchFields
            score = schemas.Int32Schema
            description = schemas.StrSchema
            name = schemas.StrSchema
            imagePath = schemas.StrSchema
            __annotations__ = {
                "entity": entity,
                "entityId": entityId,
                "entityType": entityType,
                "searchFields": searchFields,
                "score": score,
                "description": description,
                "name": name,
                "imagePath": imagePath,
            }
    
    score: MetaOapg.properties.score
    entityType: MetaOapg.properties.entityType
    entityId: MetaOapg.properties.entityId
    searchFields: 'SearchResultSearchFields'
    entity: MetaOapg.properties.entity
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchFields"]) -> 'SearchResultSearchFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePath"]) -> MetaOapg.properties.imagePath: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", "entityId", "entityType", "searchFields", "score", "description", "name", "imagePath", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchFields"]) -> 'SearchResultSearchFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePath"]) -> typing.Union[MetaOapg.properties.imagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", "entityId", "entityType", "searchFields", "score", "description", "name", "imagePath", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, ],
        searchFields: 'SearchResultSearchFields',
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        imagePath: typing.Union[MetaOapg.properties.imagePath, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchResult':
        return super().__new__(
            cls,
            *args,
            score=score,
            entityType=entityType,
            entityId=entityId,
            searchFields=searchFields,
            entity=entity,
            description=description,
            name=name,
            imagePath=imagePath,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.search_result_search_fields import SearchResultSearchFields
