# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GroupCount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "totalGroupCount",
            "orphanedGroupCount",
            "relationshipGroupCount",
        }
        
        class properties:
            totalGroupCount = schemas.NumberSchema
            relationshipGroupCount = schemas.NumberSchema
            orphanedGroupCount = schemas.NumberSchema
            __annotations__ = {
                "totalGroupCount": totalGroupCount,
                "relationshipGroupCount": relationshipGroupCount,
                "orphanedGroupCount": orphanedGroupCount,
            }
    
    totalGroupCount: MetaOapg.properties.totalGroupCount
    orphanedGroupCount: MetaOapg.properties.orphanedGroupCount
    relationshipGroupCount: MetaOapg.properties.relationshipGroupCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalGroupCount"]) -> MetaOapg.properties.totalGroupCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationshipGroupCount"]) -> MetaOapg.properties.relationshipGroupCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orphanedGroupCount"]) -> MetaOapg.properties.orphanedGroupCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalGroupCount", "relationshipGroupCount", "orphanedGroupCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalGroupCount"]) -> MetaOapg.properties.totalGroupCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationshipGroupCount"]) -> MetaOapg.properties.relationshipGroupCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orphanedGroupCount"]) -> MetaOapg.properties.orphanedGroupCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalGroupCount", "relationshipGroupCount", "orphanedGroupCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalGroupCount: typing.Union[MetaOapg.properties.totalGroupCount, decimal.Decimal, int, float, ],
        orphanedGroupCount: typing.Union[MetaOapg.properties.orphanedGroupCount, decimal.Decimal, int, float, ],
        relationshipGroupCount: typing.Union[MetaOapg.properties.relationshipGroupCount, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupCount':
        return super().__new__(
            cls,
            *args,
            totalGroupCount=totalGroupCount,
            orphanedGroupCount=orphanedGroupCount,
            relationshipGroupCount=relationshipGroupCount,
            _configuration=_configuration,
            **kwargs,
        )
