# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class PartialFieldDataFetchTypes(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    set of data fetch types
    """


    class MetaOapg:
        unique_items = True
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "BASIC": "BASIC",
                    "UPDATE": "UPDATE",
                    "CHANGE": "CHANGE",
                    "RELATIONSHIP_MANAGER": "RELATIONSHIP_MANAGER",
                    "RELATIONSHIP_ALL": "RELATIONSHIP_ALL",
                    "TITLE": "TITLE",
                    "PROMOTION": "PROMOTION",
                    "GROUP": "GROUP",
                    "COMP": "COMP",
                    "COMP_HISTORY": "COMP_HISTORY",
                    "GRANT": "GRANT",
                    "TIMEOFF": "TIMEOFF",
                    "PERSON_JOIN": "PERSON_JOIN",
                    "ALL_DATA": "ALL_DATA",
                }
            
            @schemas.classproperty
            def BASIC(cls):
                return cls("BASIC")
            
            @schemas.classproperty
            def UPDATE(cls):
                return cls("UPDATE")
            
            @schemas.classproperty
            def CHANGE(cls):
                return cls("CHANGE")
            
            @schemas.classproperty
            def RELATIONSHIP_MANAGER(cls):
                return cls("RELATIONSHIP_MANAGER")
            
            @schemas.classproperty
            def RELATIONSHIP_ALL(cls):
                return cls("RELATIONSHIP_ALL")
            
            @schemas.classproperty
            def TITLE(cls):
                return cls("TITLE")
            
            @schemas.classproperty
            def PROMOTION(cls):
                return cls("PROMOTION")
            
            @schemas.classproperty
            def GROUP(cls):
                return cls("GROUP")
            
            @schemas.classproperty
            def COMP(cls):
                return cls("COMP")
            
            @schemas.classproperty
            def COMP_HISTORY(cls):
                return cls("COMP_HISTORY")
            
            @schemas.classproperty
            def GRANT(cls):
                return cls("GRANT")
            
            @schemas.classproperty
            def TIMEOFF(cls):
                return cls("TIMEOFF")
            
            @schemas.classproperty
            def PERSON_JOIN(cls):
                return cls("PERSON_JOIN")
            
            @schemas.classproperty
            def ALL_DATA(cls):
                return cls("ALL_DATA")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PartialFieldDataFetchTypes':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
