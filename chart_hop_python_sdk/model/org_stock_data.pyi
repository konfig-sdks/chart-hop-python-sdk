# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class OrgStockData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            strikePrice = schemas.NumberSchema
            grantPrice = schemas.NumberSchema
            totalShares = schemas.Int64Schema
            __annotations__ = {
                "strikePrice": strikePrice,
                "grantPrice": grantPrice,
                "totalShares": totalShares,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strikePrice"]) -> MetaOapg.properties.strikePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantPrice"]) -> MetaOapg.properties.grantPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalShares"]) -> MetaOapg.properties.totalShares: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["strikePrice", "grantPrice", "totalShares", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strikePrice"]) -> typing.Union[MetaOapg.properties.strikePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantPrice"]) -> typing.Union[MetaOapg.properties.grantPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalShares"]) -> typing.Union[MetaOapg.properties.totalShares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["strikePrice", "grantPrice", "totalShares", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        strikePrice: typing.Union[MetaOapg.properties.strikePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grantPrice: typing.Union[MetaOapg.properties.grantPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalShares: typing.Union[MetaOapg.properties.totalShares, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrgStockData':
        return super().__new__(
            cls,
            *args,
            strikePrice=strikePrice,
            grantPrice=grantPrice,
            totalShares=totalShares,
            _configuration=_configuration,
            **kwargs,
        )
