# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportQueryResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "series",
        }
        
        class properties:
            
            
            class series(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportSeriesResult']:
                        return ReportSeriesResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportSeriesResult'], typing.List['ReportSeriesResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'series':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportSeriesResult':
                    return super().__getitem__(i)
            version = schemas.Int32Schema
            content = schemas.StrSchema
            
            
            class groupBys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportGroupByDimension']:
                        return ReportGroupByDimension
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportGroupByDimension'], typing.List['ReportGroupByDimension']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groupBys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportGroupByDimension':
                    return super().__getitem__(i)
            
            
            class dateIntervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportDateInterval']:
                        return ReportDateInterval
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportDateInterval'], typing.List['ReportDateInterval']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateIntervals':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportDateInterval':
                    return super().__getitem__(i)
            __annotations__ = {
                "series": series,
                "version": version,
                "content": content,
                "groupBys": groupBys,
                "dateIntervals": dateIntervals,
            }
    
    series: MetaOapg.properties.series
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["series"]) -> MetaOapg.properties.series: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupBys"]) -> MetaOapg.properties.groupBys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateIntervals"]) -> MetaOapg.properties.dateIntervals: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["series", "version", "content", "groupBys", "dateIntervals", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["series"]) -> MetaOapg.properties.series: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupBys"]) -> typing.Union[MetaOapg.properties.groupBys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateIntervals"]) -> typing.Union[MetaOapg.properties.dateIntervals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["series", "version", "content", "groupBys", "dateIntervals", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        series: typing.Union[MetaOapg.properties.series, list, tuple, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        groupBys: typing.Union[MetaOapg.properties.groupBys, list, tuple, schemas.Unset] = schemas.unset,
        dateIntervals: typing.Union[MetaOapg.properties.dateIntervals, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportQueryResult':
        return super().__new__(
            cls,
            *args,
            series=series,
            version=version,
            content=content,
            groupBys=groupBys,
            dateIntervals=dateIntervals,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.report_date_interval import ReportDateInterval
from chart_hop_python_sdk.model.report_group_by_dimension import ReportGroupByDimension
from chart_hop_python_sdk.model.report_series_result import ReportSeriesResult
