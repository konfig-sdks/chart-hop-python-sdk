# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class FormDraft(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "formId",
            "updateId",
            "data",
            "createId",
            "updateAt",
            "id",
            "createAt",
            "orgId",
        }
        
        class properties:
            id = schemas.StrSchema
            orgId = schemas.StrSchema
            formId = schemas.StrSchema
            data = schemas.DictSchema
            createId = schemas.StrSchema
            createAt = schemas.StrSchema
            updateId = schemas.StrSchema
            updateAt = schemas.StrSchema
            personId = schemas.StrSchema
            pendingApprovalChangeId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "orgId": orgId,
                "formId": formId,
                "data": data,
                "createId": createId,
                "createAt": createAt,
                "updateId": updateId,
                "updateAt": updateAt,
                "personId": personId,
                "pendingApprovalChangeId": pendingApprovalChangeId,
            }
    
    formId: MetaOapg.properties.formId
    updateId: MetaOapg.properties.updateId
    data: MetaOapg.properties.data
    createId: MetaOapg.properties.createId
    updateAt: MetaOapg.properties.updateAt
    id: MetaOapg.properties.id
    createAt: MetaOapg.properties.createAt
    orgId: MetaOapg.properties.orgId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingApprovalChangeId"]) -> MetaOapg.properties.pendingApprovalChangeId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "formId", "data", "createId", "createAt", "updateId", "updateAt", "personId", "pendingApprovalChangeId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createId"]) -> MetaOapg.properties.createId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateId"]) -> MetaOapg.properties.updateId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAt"]) -> MetaOapg.properties.updateAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingApprovalChangeId"]) -> typing.Union[MetaOapg.properties.pendingApprovalChangeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "orgId", "formId", "data", "createId", "createAt", "updateId", "updateAt", "personId", "pendingApprovalChangeId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formId: typing.Union[MetaOapg.properties.formId, str, ],
        updateId: typing.Union[MetaOapg.properties.updateId, str, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
        createId: typing.Union[MetaOapg.properties.createId, str, ],
        updateAt: typing.Union[MetaOapg.properties.updateAt, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        createAt: typing.Union[MetaOapg.properties.createAt, str, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        pendingApprovalChangeId: typing.Union[MetaOapg.properties.pendingApprovalChangeId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormDraft':
        return super().__new__(
            cls,
            *args,
            formId=formId,
            updateId=updateId,
            data=data,
            createId=createId,
            updateAt=updateAt,
            id=id,
            createAt=createAt,
            orgId=orgId,
            personId=personId,
            pendingApprovalChangeId=pendingApprovalChangeId,
            _configuration=_configuration,
            **kwargs,
        )
