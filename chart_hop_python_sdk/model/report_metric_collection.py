# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class ReportMetricCollection(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "persons",
            "jobs",
            "byQuery",
            "changes",
            "relevantFields",
        }
        
        class properties:
        
            @staticmethod
            def relevantFields() -> typing.Type['ReportMetricCollectionRelevantFields']:
                return ReportMetricCollectionRelevantFields
        
            @staticmethod
            def changes() -> typing.Type['ReportMetricCollectionChanges']:
                return ReportMetricCollectionChanges
        
            @staticmethod
            def jobs() -> typing.Type['ReportMetricCollectionJobs']:
                return ReportMetricCollectionJobs
        
            @staticmethod
            def persons() -> typing.Type['ReportMetricCollectionPersons']:
                return ReportMetricCollectionPersons
        
            @staticmethod
            def byQuery() -> typing.Type['ReportMetricCollectionByQuery']:
                return ReportMetricCollectionByQuery
        
            @staticmethod
            def collectedThrough() -> typing.Type['PairLocalDateLocalDate']:
                return PairLocalDateLocalDate
            date = schemas.DateSchema
            __annotations__ = {
                "relevantFields": relevantFields,
                "changes": changes,
                "jobs": jobs,
                "persons": persons,
                "byQuery": byQuery,
                "collectedThrough": collectedThrough,
                "date": date,
            }
    
    persons: 'ReportMetricCollectionPersons'
    jobs: 'ReportMetricCollectionJobs'
    byQuery: 'ReportMetricCollectionByQuery'
    changes: 'ReportMetricCollectionChanges'
    relevantFields: 'ReportMetricCollectionRelevantFields'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relevantFields"]) -> 'ReportMetricCollectionRelevantFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changes"]) -> 'ReportMetricCollectionChanges': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> 'ReportMetricCollectionJobs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> 'ReportMetricCollectionPersons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["byQuery"]) -> 'ReportMetricCollectionByQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectedThrough"]) -> 'PairLocalDateLocalDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relevantFields", "changes", "jobs", "persons", "byQuery", "collectedThrough", "date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relevantFields"]) -> 'ReportMetricCollectionRelevantFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changes"]) -> 'ReportMetricCollectionChanges': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> 'ReportMetricCollectionJobs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> 'ReportMetricCollectionPersons': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["byQuery"]) -> 'ReportMetricCollectionByQuery': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectedThrough"]) -> typing.Union['PairLocalDateLocalDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relevantFields", "changes", "jobs", "persons", "byQuery", "collectedThrough", "date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        persons: 'ReportMetricCollectionPersons',
        jobs: 'ReportMetricCollectionJobs',
        byQuery: 'ReportMetricCollectionByQuery',
        changes: 'ReportMetricCollectionChanges',
        relevantFields: 'ReportMetricCollectionRelevantFields',
        collectedThrough: typing.Union['PairLocalDateLocalDate', schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportMetricCollection':
        return super().__new__(
            cls,
            *args,
            persons=persons,
            jobs=jobs,
            byQuery=byQuery,
            changes=changes,
            relevantFields=relevantFields,
            collectedThrough=collectedThrough,
            date=date,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.pair_local_date_local_date import PairLocalDateLocalDate
from chart_hop_python_sdk.model.report_metric_collection_by_query import ReportMetricCollectionByQuery
from chart_hop_python_sdk.model.report_metric_collection_changes import ReportMetricCollectionChanges
from chart_hop_python_sdk.model.report_metric_collection_jobs import ReportMetricCollectionJobs
from chart_hop_python_sdk.model.report_metric_collection_persons import ReportMetricCollectionPersons
from chart_hop_python_sdk.model.report_metric_collection_relevant_fields import ReportMetricCollectionRelevantFields
