# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class GenerateTemplateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "useScenarioChanges",
            "saveToFiles",
            "sendToPersons",
            "sendToManagers",
        }
        
        class properties:
            saveToFiles = schemas.BoolSchema
            sendToManagers = schemas.BoolSchema
            sendToPersons = schemas.BoolSchema
            useScenarioChanges = schemas.BoolSchema
            filter = schemas.StrSchema
            emailSubject = schemas.StrSchema
            emailMessage = schemas.StrSchema
            
            
            class fileSensitive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def ORG(cls):
                    return cls("ORG")
                
                @schemas.classproperty
                def ORG_OTHER(cls):
                    return cls("ORG_OTHER")
                
                @schemas.classproperty
                def PERSONAL_DEMOG(cls):
                    return cls("PERSONAL_DEMOG")
                
                @schemas.classproperty
                def PERSONAL_BIRTH(cls):
                    return cls("PERSONAL_BIRTH")
                
                @schemas.classproperty
                def PERSONAL_CONTACT(cls):
                    return cls("PERSONAL_CONTACT")
                
                @schemas.classproperty
                def PERSONAL_PRIVATE(cls):
                    return cls("PERSONAL_PRIVATE")
                
                @schemas.classproperty
                def SENSITIVE_BIRTH(cls):
                    return cls("SENSITIVE_BIRTH")
                
                @schemas.classproperty
                def SENSITIVE_CONTACT(cls):
                    return cls("SENSITIVE_CONTACT")
                
                @schemas.classproperty
                def TIMEOFF(cls):
                    return cls("TIMEOFF")
                
                @schemas.classproperty
                def COMP_CASH(cls):
                    return cls("COMP_CASH")
                
                @schemas.classproperty
                def COMP_EQUITY(cls):
                    return cls("COMP_EQUITY")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("SENSITIVE")
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("MANAGER")
                
                @schemas.classproperty
                def GRAND_MANAGER(cls):
                    return cls("GRAND_MANAGER")
                
                @schemas.classproperty
                def DIRECT(cls):
                    return cls("DIRECT")
                
                @schemas.classproperty
                def PEERS(cls):
                    return cls("PEERS")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
            fileField = schemas.StrSchema
            scenarioId = schemas.StrSchema
            date = schemas.DateSchema
            
            
            class changeGroupingType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("PRIMARY")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def COMP_REVIEW(cls):
                    return cls("COMP_REVIEW")
            changeGroupingId = schemas.StrSchema
            __annotations__ = {
                "saveToFiles": saveToFiles,
                "sendToManagers": sendToManagers,
                "sendToPersons": sendToPersons,
                "useScenarioChanges": useScenarioChanges,
                "filter": filter,
                "emailSubject": emailSubject,
                "emailMessage": emailMessage,
                "fileSensitive": fileSensitive,
                "fileField": fileField,
                "scenarioId": scenarioId,
                "date": date,
                "changeGroupingType": changeGroupingType,
                "changeGroupingId": changeGroupingId,
            }
    
    useScenarioChanges: MetaOapg.properties.useScenarioChanges
    saveToFiles: MetaOapg.properties.saveToFiles
    sendToPersons: MetaOapg.properties.sendToPersons
    sendToManagers: MetaOapg.properties.sendToManagers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveToFiles"]) -> MetaOapg.properties.saveToFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendToManagers"]) -> MetaOapg.properties.sendToManagers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendToPersons"]) -> MetaOapg.properties.sendToPersons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useScenarioChanges"]) -> MetaOapg.properties.useScenarioChanges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailSubject"]) -> MetaOapg.properties.emailSubject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailMessage"]) -> MetaOapg.properties.emailMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileSensitive"]) -> MetaOapg.properties.fileSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileField"]) -> MetaOapg.properties.fileField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenarioId"]) -> MetaOapg.properties.scenarioId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeGroupingType"]) -> MetaOapg.properties.changeGroupingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeGroupingId"]) -> MetaOapg.properties.changeGroupingId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["saveToFiles", "sendToManagers", "sendToPersons", "useScenarioChanges", "filter", "emailSubject", "emailMessage", "fileSensitive", "fileField", "scenarioId", "date", "changeGroupingType", "changeGroupingId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveToFiles"]) -> MetaOapg.properties.saveToFiles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendToManagers"]) -> MetaOapg.properties.sendToManagers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendToPersons"]) -> MetaOapg.properties.sendToPersons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useScenarioChanges"]) -> MetaOapg.properties.useScenarioChanges: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailSubject"]) -> typing.Union[MetaOapg.properties.emailSubject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailMessage"]) -> typing.Union[MetaOapg.properties.emailMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileSensitive"]) -> typing.Union[MetaOapg.properties.fileSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileField"]) -> typing.Union[MetaOapg.properties.fileField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenarioId"]) -> typing.Union[MetaOapg.properties.scenarioId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeGroupingType"]) -> typing.Union[MetaOapg.properties.changeGroupingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeGroupingId"]) -> typing.Union[MetaOapg.properties.changeGroupingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["saveToFiles", "sendToManagers", "sendToPersons", "useScenarioChanges", "filter", "emailSubject", "emailMessage", "fileSensitive", "fileField", "scenarioId", "date", "changeGroupingType", "changeGroupingId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        useScenarioChanges: typing.Union[MetaOapg.properties.useScenarioChanges, bool, ],
        saveToFiles: typing.Union[MetaOapg.properties.saveToFiles, bool, ],
        sendToPersons: typing.Union[MetaOapg.properties.sendToPersons, bool, ],
        sendToManagers: typing.Union[MetaOapg.properties.sendToManagers, bool, ],
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        emailSubject: typing.Union[MetaOapg.properties.emailSubject, str, schemas.Unset] = schemas.unset,
        emailMessage: typing.Union[MetaOapg.properties.emailMessage, str, schemas.Unset] = schemas.unset,
        fileSensitive: typing.Union[MetaOapg.properties.fileSensitive, str, schemas.Unset] = schemas.unset,
        fileField: typing.Union[MetaOapg.properties.fileField, str, schemas.Unset] = schemas.unset,
        scenarioId: typing.Union[MetaOapg.properties.scenarioId, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        changeGroupingType: typing.Union[MetaOapg.properties.changeGroupingType, str, schemas.Unset] = schemas.unset,
        changeGroupingId: typing.Union[MetaOapg.properties.changeGroupingId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateTemplateRequest':
        return super().__new__(
            cls,
            *args,
            useScenarioChanges=useScenarioChanges,
            saveToFiles=saveToFiles,
            sendToPersons=sendToPersons,
            sendToManagers=sendToManagers,
            filter=filter,
            emailSubject=emailSubject,
            emailMessage=emailMessage,
            fileSensitive=fileSensitive,
            fileField=fileField,
            scenarioId=scenarioId,
            date=date,
            changeGroupingType=changeGroupingType,
            changeGroupingId=changeGroupingId,
            _configuration=_configuration,
            **kwargs,
        )
