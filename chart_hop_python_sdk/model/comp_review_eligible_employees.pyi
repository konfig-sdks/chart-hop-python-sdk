# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CompReviewEligibleEmployees(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ineligibilityType",
        }
        
        class properties:
            
            
            class ineligibilityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def DEPARTMENT(cls):
                    return cls("DEPARTMENT")
                
                @schemas.classproperty
                def DIVISION(cls):
                    return cls("DIVISION")
                
                @schemas.classproperty
                def LOCATION(cls):
                    return cls("LOCATION")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
        
            @staticmethod
            def excludedEmploymentStatuses() -> typing.Type['CompReviewEligibleEmployeesExcludedEmploymentStatuses']:
                return CompReviewEligibleEmployeesExcludedEmploymentStatuses
        
            @staticmethod
            def excludeGroupIds() -> typing.Type['CompReviewEligibleEmployeesExcludeGroupIds']:
                return CompReviewEligibleEmployeesExcludeGroupIds
            filter = schemas.StrSchema
            lastRaiseDate = schemas.DateSchema
            startDate = schemas.DateSchema
        
            @staticmethod
            def individualExclusions() -> typing.Type['CompReviewEligibleEmployeesIndividualExclusions']:
                return CompReviewEligibleEmployeesIndividualExclusions
        
            @staticmethod
            def individualInclusions() -> typing.Type['CompReviewEligibleEmployeesIndividualInclusions']:
                return CompReviewEligibleEmployeesIndividualInclusions
            __annotations__ = {
                "ineligibilityType": ineligibilityType,
                "excludedEmploymentStatuses": excludedEmploymentStatuses,
                "excludeGroupIds": excludeGroupIds,
                "filter": filter,
                "lastRaiseDate": lastRaiseDate,
                "startDate": startDate,
                "individualExclusions": individualExclusions,
                "individualInclusions": individualInclusions,
            }
    
    ineligibilityType: MetaOapg.properties.ineligibilityType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ineligibilityType"]) -> MetaOapg.properties.ineligibilityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludedEmploymentStatuses"]) -> 'CompReviewEligibleEmployeesExcludedEmploymentStatuses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeGroupIds"]) -> 'CompReviewEligibleEmployeesExcludeGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRaiseDate"]) -> MetaOapg.properties.lastRaiseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["individualExclusions"]) -> 'CompReviewEligibleEmployeesIndividualExclusions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["individualInclusions"]) -> 'CompReviewEligibleEmployeesIndividualInclusions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ineligibilityType", "excludedEmploymentStatuses", "excludeGroupIds", "filter", "lastRaiseDate", "startDate", "individualExclusions", "individualInclusions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ineligibilityType"]) -> MetaOapg.properties.ineligibilityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludedEmploymentStatuses"]) -> typing.Union['CompReviewEligibleEmployeesExcludedEmploymentStatuses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeGroupIds"]) -> typing.Union['CompReviewEligibleEmployeesExcludeGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRaiseDate"]) -> typing.Union[MetaOapg.properties.lastRaiseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["individualExclusions"]) -> typing.Union['CompReviewEligibleEmployeesIndividualExclusions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["individualInclusions"]) -> typing.Union['CompReviewEligibleEmployeesIndividualInclusions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ineligibilityType", "excludedEmploymentStatuses", "excludeGroupIds", "filter", "lastRaiseDate", "startDate", "individualExclusions", "individualInclusions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ineligibilityType: typing.Union[MetaOapg.properties.ineligibilityType, str, ],
        excludedEmploymentStatuses: typing.Union['CompReviewEligibleEmployeesExcludedEmploymentStatuses', schemas.Unset] = schemas.unset,
        excludeGroupIds: typing.Union['CompReviewEligibleEmployeesExcludeGroupIds', schemas.Unset] = schemas.unset,
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        lastRaiseDate: typing.Union[MetaOapg.properties.lastRaiseDate, str, date, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        individualExclusions: typing.Union['CompReviewEligibleEmployeesIndividualExclusions', schemas.Unset] = schemas.unset,
        individualInclusions: typing.Union['CompReviewEligibleEmployeesIndividualInclusions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompReviewEligibleEmployees':
        return super().__new__(
            cls,
            *args,
            ineligibilityType=ineligibilityType,
            excludedEmploymentStatuses=excludedEmploymentStatuses,
            excludeGroupIds=excludeGroupIds,
            filter=filter,
            lastRaiseDate=lastRaiseDate,
            startDate=startDate,
            individualExclusions=individualExclusions,
            individualInclusions=individualInclusions,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.comp_review_eligible_employees_exclude_group_ids import CompReviewEligibleEmployeesExcludeGroupIds
from chart_hop_python_sdk.model.comp_review_eligible_employees_excluded_employment_statuses import CompReviewEligibleEmployeesExcludedEmploymentStatuses
from chart_hop_python_sdk.model.comp_review_eligible_employees_individual_exclusions import CompReviewEligibleEmployeesIndividualExclusions
from chart_hop_python_sdk.model.comp_review_eligible_employees_individual_inclusions import CompReviewEligibleEmployeesIndividualInclusions
