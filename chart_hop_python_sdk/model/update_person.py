# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class UpdatePerson(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def name() -> typing.Type['Name']:
                return Name
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
        
            @staticmethod
            def address() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def remoteWorkAddress() -> typing.Type['Address']:
                return Address
            birthDate = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
            
            
            class imagePath(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z0-9._/-]+$',
                    }]
            
            
            class nameAudioPath(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z0-9._/-]+$',
                    }]
            
            
            class gender(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MALE": "MALE",
                        "FEMALE": "FEMALE",
                        "NONBINARY": "NONBINARY",
                        "PREFER_NOT": "PREFER_NOT",
                    }
                
                @schemas.classproperty
                def MALE(cls):
                    return cls("MALE")
                
                @schemas.classproperty
                def FEMALE(cls):
                    return cls("FEMALE")
                
                @schemas.classproperty
                def NONBINARY(cls):
                    return cls("NONBINARY")
                
                @schemas.classproperty
                def PREFER_NOT(cls):
                    return cls("PREFER_NOT")
            
            
            class ethnicity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HISPANIC": "HISPANIC",
                        "WHITE": "WHITE",
                        "BLACK": "BLACK",
                        "PACIFIC": "PACIFIC",
                        "ASIAN": "ASIAN",
                        "NATIVE": "NATIVE",
                        "TWO": "TWO",
                        "PREFER_NOT": "PREFER_NOT",
                    }
                
                @schemas.classproperty
                def HISPANIC(cls):
                    return cls("HISPANIC")
                
                @schemas.classproperty
                def WHITE(cls):
                    return cls("WHITE")
                
                @schemas.classproperty
                def BLACK(cls):
                    return cls("BLACK")
                
                @schemas.classproperty
                def PACIFIC(cls):
                    return cls("PACIFIC")
                
                @schemas.classproperty
                def ASIAN(cls):
                    return cls("ASIAN")
                
                @schemas.classproperty
                def NATIVE(cls):
                    return cls("NATIVE")
                
                @schemas.classproperty
                def TWO(cls):
                    return cls("TWO")
                
                @schemas.classproperty
                def PREFER_NOT(cls):
                    return cls("PREFER_NOT")
        
            @staticmethod
            def fields() -> typing.Type['UpdatePersonFields']:
                return UpdatePersonFields
            sensitiveFields = schemas.DictSchema
        
            @staticmethod
            def inviteOptions() -> typing.Type['OrgAccess']:
                return OrgAccess
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PRIMARY": "PRIMARY",
                        "SCENARIO": "SCENARIO",
                        "PENDING": "PENDING",
                        "INACTIVE": "INACTIVE",
                    }
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("PRIMARY")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
            __annotations__ = {
                "name": name,
                "contacts": contacts,
                "address": address,
                "remoteWorkAddress": remoteWorkAddress,
                "birthDate": birthDate,
                "startDate": startDate,
                "endDate": endDate,
                "imagePath": imagePath,
                "nameAudioPath": nameAudioPath,
                "gender": gender,
                "ethnicity": ethnicity,
                "fields": fields,
                "sensitiveFields": sensitiveFields,
                "inviteOptions": inviteOptions,
                "state": state,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'Name': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteWorkAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePath"]) -> MetaOapg.properties.imagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameAudioPath"]) -> MetaOapg.properties.nameAudioPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'UpdatePersonFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitiveFields"]) -> MetaOapg.properties.sensitiveFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviteOptions"]) -> 'OrgAccess': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "contacts", "address", "remoteWorkAddress", "birthDate", "startDate", "endDate", "imagePath", "nameAudioPath", "gender", "ethnicity", "fields", "sensitiveFields", "inviteOptions", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['Name', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteWorkAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePath"]) -> typing.Union[MetaOapg.properties.imagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameAudioPath"]) -> typing.Union[MetaOapg.properties.nameAudioPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['UpdatePersonFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitiveFields"]) -> typing.Union[MetaOapg.properties.sensitiveFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviteOptions"]) -> typing.Union['OrgAccess', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "contacts", "address", "remoteWorkAddress", "birthDate", "startDate", "endDate", "imagePath", "nameAudioPath", "gender", "ethnicity", "fields", "sensitiveFields", "inviteOptions", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union['Name', schemas.Unset] = schemas.unset,
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        address: typing.Union['Address', schemas.Unset] = schemas.unset,
        remoteWorkAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        imagePath: typing.Union[MetaOapg.properties.imagePath, str, schemas.Unset] = schemas.unset,
        nameAudioPath: typing.Union[MetaOapg.properties.nameAudioPath, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, str, schemas.Unset] = schemas.unset,
        fields: typing.Union['UpdatePersonFields', schemas.Unset] = schemas.unset,
        sensitiveFields: typing.Union[MetaOapg.properties.sensitiveFields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        inviteOptions: typing.Union['OrgAccess', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdatePerson':
        return super().__new__(
            cls,
            *args,
            name=name,
            contacts=contacts,
            address=address,
            remoteWorkAddress=remoteWorkAddress,
            birthDate=birthDate,
            startDate=startDate,
            endDate=endDate,
            imagePath=imagePath,
            nameAudioPath=nameAudioPath,
            gender=gender,
            ethnicity=ethnicity,
            fields=fields,
            sensitiveFields=sensitiveFields,
            inviteOptions=inviteOptions,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.address import Address
from chart_hop_python_sdk.model.contact import Contact
from chart_hop_python_sdk.model.name import Name
from chart_hop_python_sdk.model.org_access import OrgAccess
from chart_hop_python_sdk.model.update_person_fields import UpdatePersonFields
