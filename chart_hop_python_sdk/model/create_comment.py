# coding: utf-8

"""
    ChartHop API

    REST API for ChartHop

    The version of the OpenAPI document: V1.0.0
    Contact: support@charthop.com
    Created by: https://www.charthop.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chart_hop_python_sdk import schemas  # noqa: F401


class CreateComment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "entityType",
            "entityId",
            "content",
        }
        
        class properties:
            entityId = schemas.StrSchema
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CHANGE": "CHANGE",
                        "ASSESSMENT": "ASSESSMENT",
                        "SCENARIO": "SCENARIO",
                        "APPROVAL_APPROVE": "APPROVAL_APPROVE",
                        "APPROVAL_REJECT": "APPROVAL_REJECT",
                        "APPROVAL_REASSIGN": "APPROVAL_REASSIGN",
                        "APPROVAL_WITHDRAW": "APPROVAL_WITHDRAW",
                    }
                
                @schemas.classproperty
                def CHANGE(cls):
                    return cls("CHANGE")
                
                @schemas.classproperty
                def ASSESSMENT(cls):
                    return cls("ASSESSMENT")
                
                @schemas.classproperty
                def SCENARIO(cls):
                    return cls("SCENARIO")
                
                @schemas.classproperty
                def APPROVAL_APPROVE(cls):
                    return cls("APPROVAL_APPROVE")
                
                @schemas.classproperty
                def APPROVAL_REJECT(cls):
                    return cls("APPROVAL_REJECT")
                
                @schemas.classproperty
                def APPROVAL_REASSIGN(cls):
                    return cls("APPROVAL_REASSIGN")
                
                @schemas.classproperty
                def APPROVAL_WITHDRAW(cls):
                    return cls("APPROVAL_WITHDRAW")
        
            @staticmethod
            def content() -> typing.Type['Markup']:
                return Markup
            parentEntityId = schemas.StrSchema
            __annotations__ = {
                "entityId": entityId,
                "entityType": entityType,
                "content": content,
                "parentEntityId": parentEntityId,
            }
    
    entityType: MetaOapg.properties.entityType
    entityId: MetaOapg.properties.entityId
    content: 'Markup'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> 'Markup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentEntityId"]) -> MetaOapg.properties.parentEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entityId", "entityType", "content", "parentEntityId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> 'Markup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentEntityId"]) -> typing.Union[MetaOapg.properties.parentEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entityId", "entityType", "content", "parentEntityId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, ],
        content: 'Markup',
        parentEntityId: typing.Union[MetaOapg.properties.parentEntityId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateComment':
        return super().__new__(
            cls,
            *args,
            entityType=entityType,
            entityId=entityId,
            content=content,
            parentEntityId=parentEntityId,
            _configuration=_configuration,
            **kwargs,
        )

from chart_hop_python_sdk.model.markup import Markup
